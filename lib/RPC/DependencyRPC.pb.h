// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DependencyRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DependencyRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DependencyRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DependencyRPC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DependencyRPC_2eproto;
namespace dra {
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class DependencyInput;
class DependencyInputDefaultTypeInternal;
extern DependencyInputDefaultTypeInternal _DependencyInput_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class RelatedInput;
class RelatedInputDefaultTypeInternal;
extern RelatedInputDefaultTypeInternal _RelatedInput_default_instance_;
class RelatedSyscall;
class RelatedSyscallDefaultTypeInternal;
extern RelatedSyscallDefaultTypeInternal _RelatedSyscall_default_instance_;
class UncoveredAddress;
class UncoveredAddressDefaultTypeInternal;
extern UncoveredAddressDefaultTypeInternal _UncoveredAddress_default_instance_;
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> ::dra::Call* Arena::CreateMaybeMessage<::dra::Call>(Arena*);
template<> ::dra::DependencyInput* Arena::CreateMaybeMessage<::dra::DependencyInput>(Arena*);
template<> ::dra::Empty* Arena::CreateMaybeMessage<::dra::Empty>(Arena*);
template<> ::dra::Input* Arena::CreateMaybeMessage<::dra::Input>(Arena*);
template<> ::dra::RelatedInput* Arena::CreateMaybeMessage<::dra::RelatedInput>(Arena*);
template<> ::dra::RelatedSyscall* Arena::CreateMaybeMessage<::dra::RelatedSyscall>(Arena*);
template<> ::dra::UncoveredAddress* Arena::CreateMaybeMessage<::dra::UncoveredAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dra {

// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dra.Empty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// -------------------------------------------------------------------

class RelatedInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.RelatedInput) */ {
 public:
  RelatedInput();
  virtual ~RelatedInput();

  RelatedInput(const RelatedInput& from);
  RelatedInput(RelatedInput&& from) noexcept
    : RelatedInput() {
    *this = ::std::move(from);
  }

  inline RelatedInput& operator=(const RelatedInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatedInput& operator=(RelatedInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatedInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatedInput* internal_default_instance() {
    return reinterpret_cast<const RelatedInput*>(
               &_RelatedInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RelatedInput* other);
  friend void swap(RelatedInput& a, RelatedInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelatedInput* New() const final {
    return CreateMaybeMessage<RelatedInput>(nullptr);
  }

  RelatedInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatedInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatedInput& from);
  void MergeFrom(const RelatedInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatedInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.RelatedInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sig = 1;
  void clear_sig();
  static const int kSigFieldNumber = 1;
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);

  // uint32 address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:dra.RelatedInput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// -------------------------------------------------------------------

class RelatedSyscall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.RelatedSyscall) */ {
 public:
  RelatedSyscall();
  virtual ~RelatedSyscall();

  RelatedSyscall(const RelatedSyscall& from);
  RelatedSyscall(RelatedSyscall&& from) noexcept
    : RelatedSyscall() {
    *this = ::std::move(from);
  }

  inline RelatedSyscall& operator=(const RelatedSyscall& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatedSyscall& operator=(RelatedSyscall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatedSyscall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatedSyscall* internal_default_instance() {
    return reinterpret_cast<const RelatedSyscall*>(
               &_RelatedSyscall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RelatedSyscall* other);
  friend void swap(RelatedSyscall& a, RelatedSyscall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelatedSyscall* New() const final {
    return CreateMaybeMessage<RelatedSyscall>(nullptr);
  }

  RelatedSyscall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatedSyscall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatedSyscall& from);
  void MergeFrom(const RelatedSyscall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatedSyscall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.RelatedSyscall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:dra.RelatedSyscall)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// -------------------------------------------------------------------

class UncoveredAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.UncoveredAddress) */ {
 public:
  UncoveredAddress();
  virtual ~UncoveredAddress();

  UncoveredAddress(const UncoveredAddress& from);
  UncoveredAddress(UncoveredAddress&& from) noexcept
    : UncoveredAddress() {
    *this = ::std::move(from);
  }

  inline UncoveredAddress& operator=(const UncoveredAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline UncoveredAddress& operator=(UncoveredAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UncoveredAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UncoveredAddress* internal_default_instance() {
    return reinterpret_cast<const UncoveredAddress*>(
               &_UncoveredAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UncoveredAddress* other);
  friend void swap(UncoveredAddress& a, UncoveredAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UncoveredAddress* New() const final {
    return CreateMaybeMessage<UncoveredAddress>(nullptr);
  }

  UncoveredAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UncoveredAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UncoveredAddress& from);
  void MergeFrom(const UncoveredAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UncoveredAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.UncoveredAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dra.RelatedInput related_input = 3;
  int related_input_size() const;
  void clear_related_input();
  static const int kRelatedInputFieldNumber = 3;
  ::dra::RelatedInput* mutable_related_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedInput >*
      mutable_related_input();
  const ::dra::RelatedInput& related_input(int index) const;
  ::dra::RelatedInput* add_related_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedInput >&
      related_input() const;

  // repeated .dra.RelatedSyscall related_syscall = 4;
  int related_syscall_size() const;
  void clear_related_syscall();
  static const int kRelatedSyscallFieldNumber = 4;
  ::dra::RelatedSyscall* mutable_related_syscall(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedSyscall >*
      mutable_related_syscall();
  const ::dra::RelatedSyscall& related_syscall(int index) const;
  ::dra::RelatedSyscall* add_related_syscall();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedSyscall >&
      related_syscall() const;

  // uint32 address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 condition_address = 2;
  void clear_condition_address();
  static const int kConditionAddressFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_address() const;
  void set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:dra.UncoveredAddress)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedInput > related_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedSyscall > related_syscall_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// -------------------------------------------------------------------

class DependencyInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.DependencyInput) */ {
 public:
  DependencyInput();
  virtual ~DependencyInput();

  DependencyInput(const DependencyInput& from);
  DependencyInput(DependencyInput&& from) noexcept
    : DependencyInput() {
    *this = ::std::move(from);
  }

  inline DependencyInput& operator=(const DependencyInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline DependencyInput& operator=(DependencyInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DependencyInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DependencyInput* internal_default_instance() {
    return reinterpret_cast<const DependencyInput*>(
               &_DependencyInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DependencyInput* other);
  friend void swap(DependencyInput& a, DependencyInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DependencyInput* New() const final {
    return CreateMaybeMessage<DependencyInput>(nullptr);
  }

  DependencyInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DependencyInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DependencyInput& from);
  void MergeFrom(const DependencyInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DependencyInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.DependencyInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dra.UncoveredAddress uncovered_address = 2;
  int uncovered_address_size() const;
  void clear_uncovered_address();
  static const int kUncoveredAddressFieldNumber = 2;
  ::dra::UncoveredAddress* mutable_uncovered_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UncoveredAddress >*
      mutable_uncovered_address();
  const ::dra::UncoveredAddress& uncovered_address(int index) const;
  ::dra::UncoveredAddress* add_uncovered_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UncoveredAddress >&
      uncovered_address() const;

  // string sig = 1;
  void clear_sig();
  static const int kSigFieldNumber = 1;
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);

  // @@protoc_insertion_point(class_scope:dra.DependencyInput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UncoveredAddress > uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// -------------------------------------------------------------------

class Call :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(nullptr);
  }

  Call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Call";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 address = 2;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 address(int index) const;
  void set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_address();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:dra.Call)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > address_;
  mutable std::atomic<int> _address_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// -------------------------------------------------------------------

class Input :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Input* other);
  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Input";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DependencyRPC_2eproto);
    return ::descriptor_table_DependencyRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dra.Call call = 2;
  int call_size() const;
  void clear_call();
  static const int kCallFieldNumber = 2;
  ::dra::Call* mutable_call(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Call >*
      mutable_call();
  const ::dra::Call& call(int index) const;
  ::dra::Call* add_call();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Call >&
      call() const;

  // string sig = 1;
  void clear_sig();
  static const int kSigFieldNumber = 1;
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);

  // @@protoc_insertion_point(class_scope:dra.Input)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Call > call_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DependencyRPC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// RelatedInput

// string sig = 1;
inline void RelatedInput::clear_sig() {
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RelatedInput::sig() const {
  // @@protoc_insertion_point(field_get:dra.RelatedInput.sig)
  return sig_.GetNoArena();
}
inline void RelatedInput::set_sig(const std::string& value) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dra.RelatedInput.sig)
}
inline void RelatedInput::set_sig(std::string&& value) {
  
  sig_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.RelatedInput.sig)
}
inline void RelatedInput::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.RelatedInput.sig)
}
inline void RelatedInput::set_sig(const char* value, size_t size) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.RelatedInput.sig)
}
inline std::string* RelatedInput::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:dra.RelatedInput.sig)
  return sig_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RelatedInput::release_sig() {
  // @@protoc_insertion_point(field_release:dra.RelatedInput.sig)
  
  return sig_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RelatedInput::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:dra.RelatedInput.sig)
}

// uint32 address = 2;
inline void RelatedInput::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelatedInput::address() const {
  // @@protoc_insertion_point(field_get:dra.RelatedInput.address)
  return address_;
}
inline void RelatedInput::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:dra.RelatedInput.address)
}

// -------------------------------------------------------------------

// RelatedSyscall

// string name = 1;
inline void RelatedSyscall::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RelatedSyscall::name() const {
  // @@protoc_insertion_point(field_get:dra.RelatedSyscall.name)
  return name_.GetNoArena();
}
inline void RelatedSyscall::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dra.RelatedSyscall.name)
}
inline void RelatedSyscall::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.RelatedSyscall.name)
}
inline void RelatedSyscall::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.RelatedSyscall.name)
}
inline void RelatedSyscall::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.RelatedSyscall.name)
}
inline std::string* RelatedSyscall::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dra.RelatedSyscall.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RelatedSyscall::release_name() {
  // @@protoc_insertion_point(field_release:dra.RelatedSyscall.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RelatedSyscall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dra.RelatedSyscall.name)
}

// uint32 address = 2;
inline void RelatedSyscall::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelatedSyscall::address() const {
  // @@protoc_insertion_point(field_get:dra.RelatedSyscall.address)
  return address_;
}
inline void RelatedSyscall::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:dra.RelatedSyscall.address)
}

// -------------------------------------------------------------------

// UncoveredAddress

// uint32 address = 1;
inline void UncoveredAddress::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::address() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.address)
  return address_;
}
inline void UncoveredAddress::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.address)
}

// uint32 condition_address = 2;
inline void UncoveredAddress::clear_condition_address() {
  condition_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::condition_address() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.condition_address)
  return condition_address_;
}
inline void UncoveredAddress::set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  condition_address_ = value;
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.condition_address)
}

// repeated .dra.RelatedInput related_input = 3;
inline int UncoveredAddress::related_input_size() const {
  return related_input_.size();
}
inline void UncoveredAddress::clear_related_input() {
  related_input_.Clear();
}
inline ::dra::RelatedInput* UncoveredAddress::mutable_related_input(int index) {
  // @@protoc_insertion_point(field_mutable:dra.UncoveredAddress.related_input)
  return related_input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedInput >*
UncoveredAddress::mutable_related_input() {
  // @@protoc_insertion_point(field_mutable_list:dra.UncoveredAddress.related_input)
  return &related_input_;
}
inline const ::dra::RelatedInput& UncoveredAddress::related_input(int index) const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.related_input)
  return related_input_.Get(index);
}
inline ::dra::RelatedInput* UncoveredAddress::add_related_input() {
  // @@protoc_insertion_point(field_add:dra.UncoveredAddress.related_input)
  return related_input_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedInput >&
UncoveredAddress::related_input() const {
  // @@protoc_insertion_point(field_list:dra.UncoveredAddress.related_input)
  return related_input_;
}

// repeated .dra.RelatedSyscall related_syscall = 4;
inline int UncoveredAddress::related_syscall_size() const {
  return related_syscall_.size();
}
inline void UncoveredAddress::clear_related_syscall() {
  related_syscall_.Clear();
}
inline ::dra::RelatedSyscall* UncoveredAddress::mutable_related_syscall(int index) {
  // @@protoc_insertion_point(field_mutable:dra.UncoveredAddress.related_syscall)
  return related_syscall_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedSyscall >*
UncoveredAddress::mutable_related_syscall() {
  // @@protoc_insertion_point(field_mutable_list:dra.UncoveredAddress.related_syscall)
  return &related_syscall_;
}
inline const ::dra::RelatedSyscall& UncoveredAddress::related_syscall(int index) const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.related_syscall)
  return related_syscall_.Get(index);
}
inline ::dra::RelatedSyscall* UncoveredAddress::add_related_syscall() {
  // @@protoc_insertion_point(field_add:dra.UncoveredAddress.related_syscall)
  return related_syscall_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::RelatedSyscall >&
UncoveredAddress::related_syscall() const {
  // @@protoc_insertion_point(field_list:dra.UncoveredAddress.related_syscall)
  return related_syscall_;
}

// -------------------------------------------------------------------

// DependencyInput

// string sig = 1;
inline void DependencyInput::clear_sig() {
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DependencyInput::sig() const {
  // @@protoc_insertion_point(field_get:dra.DependencyInput.sig)
  return sig_.GetNoArena();
}
inline void DependencyInput::set_sig(const std::string& value) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dra.DependencyInput.sig)
}
inline void DependencyInput::set_sig(std::string&& value) {
  
  sig_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.DependencyInput.sig)
}
inline void DependencyInput::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.DependencyInput.sig)
}
inline void DependencyInput::set_sig(const char* value, size_t size) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.DependencyInput.sig)
}
inline std::string* DependencyInput::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:dra.DependencyInput.sig)
  return sig_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DependencyInput::release_sig() {
  // @@protoc_insertion_point(field_release:dra.DependencyInput.sig)
  
  return sig_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DependencyInput::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:dra.DependencyInput.sig)
}

// repeated .dra.UncoveredAddress uncovered_address = 2;
inline int DependencyInput::uncovered_address_size() const {
  return uncovered_address_.size();
}
inline void DependencyInput::clear_uncovered_address() {
  uncovered_address_.Clear();
}
inline ::dra::UncoveredAddress* DependencyInput::mutable_uncovered_address(int index) {
  // @@protoc_insertion_point(field_mutable:dra.DependencyInput.uncovered_address)
  return uncovered_address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UncoveredAddress >*
DependencyInput::mutable_uncovered_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.DependencyInput.uncovered_address)
  return &uncovered_address_;
}
inline const ::dra::UncoveredAddress& DependencyInput::uncovered_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.DependencyInput.uncovered_address)
  return uncovered_address_.Get(index);
}
inline ::dra::UncoveredAddress* DependencyInput::add_uncovered_address() {
  // @@protoc_insertion_point(field_add:dra.DependencyInput.uncovered_address)
  return uncovered_address_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UncoveredAddress >&
DependencyInput::uncovered_address() const {
  // @@protoc_insertion_point(field_list:dra.DependencyInput.uncovered_address)
  return uncovered_address_;
}

// -------------------------------------------------------------------

// Call

// string name = 1;
inline void Call::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Call::name() const {
  // @@protoc_insertion_point(field_get:dra.Call.name)
  return name_.GetNoArena();
}
inline void Call::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dra.Call.name)
}
inline void Call::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Call.name)
}
inline void Call::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Call.name)
}
inline void Call::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Call.name)
}
inline std::string* Call::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dra.Call.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Call::release_name() {
  // @@protoc_insertion_point(field_release:dra.Call.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dra.Call.name)
}

// repeated uint32 address = 2;
inline int Call::address_size() const {
  return address_.size();
}
inline void Call::clear_address() {
  address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Call::address(int index) const {
  // @@protoc_insertion_point(field_get:dra.Call.address)
  return address_.Get(index);
}
inline void Call::set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.Call.address)
}
inline void Call::add_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  address_.Add(value);
  // @@protoc_insertion_point(field_add:dra.Call.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Call::address() const {
  // @@protoc_insertion_point(field_list:dra.Call.address)
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Call::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.Call.address)
  return &address_;
}

// -------------------------------------------------------------------

// Input

// string sig = 1;
inline void Input::clear_sig() {
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Input::sig() const {
  // @@protoc_insertion_point(field_get:dra.Input.sig)
  return sig_.GetNoArena();
}
inline void Input::set_sig(const std::string& value) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dra.Input.sig)
}
inline void Input::set_sig(std::string&& value) {
  
  sig_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Input.sig)
}
inline void Input::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Input.sig)
}
inline void Input::set_sig(const char* value, size_t size) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Input.sig)
}
inline std::string* Input::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:dra.Input.sig)
  return sig_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Input::release_sig() {
  // @@protoc_insertion_point(field_release:dra.Input.sig)
  
  return sig_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Input::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:dra.Input.sig)
}

// repeated .dra.Call call = 2;
inline int Input::call_size() const {
  return call_.size();
}
inline void Input::clear_call() {
  call_.Clear();
}
inline ::dra::Call* Input::mutable_call(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Input.call)
  return call_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Call >*
Input::mutable_call() {
  // @@protoc_insertion_point(field_mutable_list:dra.Input.call)
  return &call_;
}
inline const ::dra::Call& Input::call(int index) const {
  // @@protoc_insertion_point(field_get:dra.Input.call)
  return call_.Get(index);
}
inline ::dra::Call* Input::add_call() {
  // @@protoc_insertion_point(field_add:dra.Input.call)
  return call_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Call >&
Input::call() const {
  // @@protoc_insertion_point(field_list:dra.Input.call)
  return call_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dra

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DependencyRPC_2eproto
