syntax = "proto3";

package dra;

// The DependencyRPC service definition.
service DependencyRPC {

    // DRA and syz-manager
    rpc GetVMOffsets (Empty) returns (Empty) {
    }
    rpc SendBasicBlockNumber (Empty) returns (Empty) {
    }
    rpc GetNewInput (Empty) returns (Inputs) {
    }
    rpc SendDependency (Dependency) returns (Empty) {
    }
    rpc GetCondition (Empty) returns (Conditions) {
    }
    rpc SendWriteAddress (WriteAddresses) returns (Empty) {
    }

    //syz-fuzzer and syz-manager
    rpc Connect (Empty) returns (Empty) {
    }
    rpc SendNewInput (Input) returns (Empty) {
    }
    rpc GetTasks (Empty) returns (Tasks) {
    }
    rpc GetBootTasks (Empty) returns (Tasks) {
    }
    rpc ReturnTasks (Tasks) returns (Empty) {
    }
    rpc SendBootInput (Input) returns (Empty) {
    }
    rpc SendUnstableInput (UnstableInput) returns (Empty) {
    }
    rpc SendLog (Empty) returns (Empty) {
    }
    rpc sendStat (Statistic) returns (Empty) {
    }
    rpc GetNeed (Empty) returns (Empty) {
    }
    rpc SendNeedInput (Input) returns (Empty) {
    }
}


message Empty {
    uint32 address = 1;
    string name = 2;
}

message Condition {

    uint64 condition_address = 1;
    uint32 syzkaller_condition_address = 2;
    uint64 uncovered_address = 3;
    uint32 syzkaller_uncovered_address = 4;

    uint32 idx = 5;
    uint64 successor = 6;

    //    map<uint64, uint32> right_branch_address = 7;
    //    map<uint32, uint32> syzkaller_right_branch_address = 8;
    //    map<uint64, uint32> wrong_branch_address = 9;
    //    map<uint32, uint32> syzkaller_wrong_branch_address = 10;
    repeated uint64 right_branch_address = 7;
    repeated uint32 syzkaller_right_branch_address = 8;
    //    repeated uint64 wrong_branch_address = 9;
    //    repeated uint32 syzkaller_wrong_branch_address = 10;

}

message Call {
    uint32 idx = 1;
    map<uint32, uint32> address = 2;
    //    repeated uint32 address = 2;
}

message Inputs {
    // map<string, Input> input = 1;
    repeated Input input = 1;
}

//for syz-fuzzer
message Dependencytask {
    Input input = 1;
    string name = 41;
}

enum taskStatus {
    untested = 0;
    testing = 1;
    unstable = 2;
    tested = 3;
    covered = 4;

    recursive = 10;
    out = 11;
}

message runTimeData {
    uint32 priority = 1;
    uint32 condition_address = 2;
    uint32 address = 4;
    repeated uint32 right_branch_address = 6;

    taskStatus task_status = 10;
    bytes program = 12;
    uint32 idx = 13;
    uint32 rcursive_count = 14;

    bool checkCondition = 21;
    bool checkAddress = 22;
    bool checkRightBranchAddress = 23;
    //    map<uint32, uint32> right_branch_address = 16;
}

message FileOperationsFunction {
    string name = 1;
    string file_operations_name = 2;
    file_operations_kind kind = 3;
    uint64 cmd = 4;

    //    repeated Condition critical_condition = 4;
    //    map<uint32, Condition> critical_condition = 4;
    // it is the data of this syscall
    runTimeData run_time_date = 5;

    //    repeated WriteAddress write_address = 11;
    map<uint32, uint32> write_address = 11;
}

message FileOperations {
    string name = 1;
    //cmd or 0, function
    map<int64, FileOperationsFunction> file_operations_function = 3;
}

enum file_operations_kind {
    default = 0;
    init = 1;
    llseek = 2;
    read = 3;
    write = 4;
    poll = 9;
    unlocked_ioctl = 10;
    mmap = 12;
    open = 14;
    release = 16;
}

message WriteAddress {

    // the address writes to global variable
    uint32 write_address = 2;
    // the address of condition which is related to this global variable
    uint32 condition_address = 3;

    //    map<uint32, Input> write_input = 4;
    //    map<uint32, Syscall> write_syscall = 5;
    //    repeated Input write_input = 4;
    //    repeated Syscall write_syscall = 5;
    // 0 is undef
    // 1 is constant
    uint32 kind = 4;

    // uncovered address,
    map<uint32, writeAddressAttributes> uncovered_address = 23;
    // file_operations name, file_operations_function index bits
    map<string, uint32> file_operations_function = 24;
    // sig, index by bits
    map<string, uint32> input = 25;

    // it is the data of uncovered address
    runTimeData run_time_date = 11;
}

message writeAddressAttributes {
    // the address writes to global variable
    uint32 write_address = 2;
    uint32 repeat = 7;
    uint32 prio = 6;
}

enum UncoveredAddressKind {
    Outside = 0;
    InputRelated = 1;
    DependnecyRelated = 2;
    Other = 3;
}

message UncoveredAddress {

    uint32 condition_address = 1;
    uint32 uncovered_address = 2;
    repeated uint32 right_branch_address = 3;
    uint32 number_arrive_basicblocks = 4;
    UncoveredAddressKind kind = 5;
    uint32 number_dominator_instructions = 6;

    // sig, index by bits
    map<string, uint32> input = 22;
    map<uint32, writeAddressAttributes> write_address = 23;

    runTimeData run_time_date = 8;

}

message Path {
    repeated uint32 address = 1;
}

message UnstableInput {
    Path new_path = 1;
    Path unstable_path = 2;
    int32 idx = 3;

    string sig = 11; // hash value for each input from syzkaller
    bytes program = 12;

}

message Input {
    // for program
    string sig = 11; // hash value for each input from syzkaller
    bytes program = 12;
    map<uint32, Call> call = 13;

    uint32 stable = 14;
    uint32 total = 15;

    // for dependency
    FuzzingStat stat = 21;
    // uncovered address, index by bits
    map<uint32, uint32> uncovered_address = 22;
    // write address, index by bits
    map<uint32, uint32> write_address = 25;

}

message Dependency {

    Input input = 1;
    UncoveredAddress uncovered_address = 2;
    repeated WriteAddress write_address = 3;

}

message Corpus {
    map<string, Input> input = 1;
    map<uint32, UncoveredAddress> uncovered_address = 4;
    map<uint32, UncoveredAddress> covered_address = 2;
    map<uint32, WriteAddress> write_address = 5;
    map<string, FileOperations> file_operations = 6;
    Tasks tasks = 7;
    Tasks high_task = 8;
    Tasks boot_task = 9;
    map<string, Input> new_input = 11;
}

message UsefulInput {
    Input input = 1;
    double time = 2;
    uint64 num = 3;
    repeated uint32 new_address = 4;
}

enum FuzzingStat {
    StatDefault = 0;
    StatGenerate = 1;
    StatFuzz = 2;
    StatCandidate = 3;
    StatTriage = 4;
    StatMinimize = 5;
    StatSmash = 6;
    StatHint = 7;
    StatSeed = 8;
    StatDependency = 9;
    StatDependencyBoot = 10;
}

message Statistic {
    FuzzingStat name = 1;

    uint64 executeNum = 11;
    double time = 12;
    uint64 newTestCaseNum = 13;
    uint64 newAddressNum = 14;
}

message Statistics {
    uint64 signalNum = 1;
    uint32 basic_block_number = 10;
    Coverage coverage = 8;
    map<int32, Statistic> stat = 11;
    repeated UsefulInput useful_input = 12;
}

message TaskRunTimeData {
    string hash = 1;
    bytes program = 2;
    uint32 write_idx = 5;
    uint32 condition_idx = 6;

    bool check_write_address = 10;
    map<uint32, runTimeData> uncovered_address = 21;
    map<uint32, runTimeData> covered_address = 23;
}

message Task {
    string sig = 1;
    uint32 index = 2;
    bytes program = 3;

    // 0 is undef
    // 1 is constant
    uint32 kind = 4;
    int32 priority = 5;
    string hash = 6;
    uint32 count = 7;

    string write_sig = 11;
    uint32 write_index = 12;
    bytes write_program = 13;
    uint32 write_address = 14;


    taskStatus task_status = 24;
    bool check_write_address = 25;
    // uncovered address, priority
    map<uint32, runTimeData> uncovered_address = 21;
    map<uint32, runTimeData> covered_address = 23;

    repeated TaskRunTimeData task_run_time_data = 31;
}

enum TaskKind {
    Normal = 0;
    High = 1;
    Boot = 2;
}


message Tasks {
    string name = 41;
    TaskKind kind = 42;
    map<string, Task> task_map = 1;
    repeated Task task_array = 2;
}

message Time {
    double time = 1;
    int64 num = 2;
    int64 executeNum = 3;
}

message Coverage {
    map<uint32, uint32> coverage = 1;
    repeated Time time = 2;
}

// old

message Conditions {
    //    map<uint64, Condition> condition = 10;
    repeated Condition condition = 10;
}

message WriteAddresses {
    Condition condition = 1;
    //    map<uint32, WriteAddress> write_address = 4;
    repeated WriteAddress write_address = 4;
}