// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DependencyRPC.proto

package dra

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunTimeDataTaskStatus int32

const (
	RunTimeData_untested  RunTimeDataTaskStatus = 0
	RunTimeData_recursive RunTimeDataTaskStatus = 1
	RunTimeData_tested    RunTimeDataTaskStatus = 2
	RunTimeData_out       RunTimeDataTaskStatus = 3
	RunTimeData_cover     RunTimeDataTaskStatus = 4
)

var RunTimeDataTaskStatus_name = map[int32]string{
	0: "untested",
	1: "recursive",
	2: "tested",
	3: "out",
	4: "cover",
}

var RunTimeDataTaskStatus_value = map[string]int32{
	"untested":  0,
	"recursive": 1,
	"tested":    2,
	"out":       3,
	"cover":     4,
}

func (x RunTimeDataTaskStatus) String() string {
	return proto.EnumName(RunTimeDataTaskStatus_name, int32(x))
}

func (RunTimeDataTaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{0, 0}
}

type RunTimeData struct {
	Program                 []byte                `protobuf:"bytes,2,opt,name=program,proto3" json:"program,omitempty"`
	TaskStatus              RunTimeDataTaskStatus `protobuf:"varint,3,opt,name=task_status,json=taskStatus,proto3,enum=dra.RunTimeDataTaskStatus" json:"task_status,omitempty"`
	RcursiveCount           uint32                `protobuf:"varint,4,opt,name=rcursive_count,json=rcursiveCount,proto3" json:"rcursive_count,omitempty"`
	Idx                     uint32                `protobuf:"varint,10,opt,name=idx,proto3" json:"idx,omitempty"`
	CheckCondition          bool                  `protobuf:"varint,11,opt,name=checkCondition,proto3" json:"checkCondition,omitempty"`
	ConditionAddress        uint32                `protobuf:"varint,12,opt,name=condition_address,json=conditionAddress,proto3" json:"condition_address,omitempty"`
	CheckAddress            bool                  `protobuf:"varint,13,opt,name=checkAddress,proto3" json:"checkAddress,omitempty"`
	Address                 uint32                `protobuf:"varint,14,opt,name=address,proto3" json:"address,omitempty"`
	CheckRightBranchAddress bool                  `protobuf:"varint,15,opt,name=checkRightBranchAddress,proto3" json:"checkRightBranchAddress,omitempty"`
	RightBranchAddress      map[uint32]uint32     `protobuf:"bytes,16,rep,name=right_branch_address,json=rightBranchAddress,proto3" json:"right_branch_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}              `json:"-"`
	XXX_unrecognized        []byte                `json:"-"`
	XXX_sizecache           int32                 `json:"-"`
}

func (m *RunTimeData) Reset()         { *m = RunTimeData{} }
func (m *RunTimeData) String() string { return proto.CompactTextString(m) }
func (*RunTimeData) ProtoMessage()    {}
func (*RunTimeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{0}
}

func (m *RunTimeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTimeData.Unmarshal(m, b)
}
func (m *RunTimeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTimeData.Marshal(b, m, deterministic)
}
func (m *RunTimeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTimeData.Merge(m, src)
}
func (m *RunTimeData) XXX_Size() int {
	return xxx_messageInfo_RunTimeData.Size(m)
}
func (m *RunTimeData) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTimeData.DiscardUnknown(m)
}

var xxx_messageInfo_RunTimeData proto.InternalMessageInfo

func (m *RunTimeData) GetProgram() []byte {
	if m != nil {
		return m.Program
	}
	return nil
}

func (m *RunTimeData) GetTaskStatus() RunTimeDataTaskStatus {
	if m != nil {
		return m.TaskStatus
	}
	return RunTimeData_untested
}

func (m *RunTimeData) GetRcursiveCount() uint32 {
	if m != nil {
		return m.RcursiveCount
	}
	return 0
}

func (m *RunTimeData) GetIdx() uint32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *RunTimeData) GetCheckCondition() bool {
	if m != nil {
		return m.CheckCondition
	}
	return false
}

func (m *RunTimeData) GetConditionAddress() uint32 {
	if m != nil {
		return m.ConditionAddress
	}
	return 0
}

func (m *RunTimeData) GetCheckAddress() bool {
	if m != nil {
		return m.CheckAddress
	}
	return false
}

func (m *RunTimeData) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *RunTimeData) GetCheckRightBranchAddress() bool {
	if m != nil {
		return m.CheckRightBranchAddress
	}
	return false
}

func (m *RunTimeData) GetRightBranchAddress() map[uint32]uint32 {
	if m != nil {
		return m.RightBranchAddress
	}
	return nil
}

type Empty struct {
	Address              uint32   `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func (m *Empty) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *Empty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Condition struct {
	ConditionAddress            uint64            `protobuf:"varint,1,opt,name=condition_address,json=conditionAddress,proto3" json:"condition_address,omitempty"`
	SyzkallerConditionAddress   uint32            `protobuf:"varint,2,opt,name=syzkaller_condition_address,json=syzkallerConditionAddress,proto3" json:"syzkaller_condition_address,omitempty"`
	UncoveredAddress            uint64            `protobuf:"varint,3,opt,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty"`
	SyzkallerUncoveredAddress   uint32            `protobuf:"varint,4,opt,name=syzkaller_uncovered_address,json=syzkallerUncoveredAddress,proto3" json:"syzkaller_uncovered_address,omitempty"`
	Idx                         uint32            `protobuf:"varint,5,opt,name=idx,proto3" json:"idx,omitempty"`
	Successor                   uint64            `protobuf:"varint,6,opt,name=successor,proto3" json:"successor,omitempty"`
	RightBranchAddress          map[uint64]uint32 `protobuf:"bytes,7,rep,name=right_branch_address,json=rightBranchAddress,proto3" json:"right_branch_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SyzkallerRightBranchAddress map[uint32]uint32 `protobuf:"bytes,8,rep,name=syzkaller_right_branch_address,json=syzkallerRightBranchAddress,proto3" json:"syzkaller_right_branch_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WrongBranchAddress          map[uint64]uint32 `protobuf:"bytes,9,rep,name=wrong_branch_address,json=wrongBranchAddress,proto3" json:"wrong_branch_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SyzkallerWrongBranchAddress map[uint32]uint32 `protobuf:"bytes,10,rep,name=syzkaller_wrong_branch_address,json=syzkallerWrongBranchAddress,proto3" json:"syzkaller_wrong_branch_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral        struct{}          `json:"-"`
	XXX_unrecognized            []byte            `json:"-"`
	XXX_sizecache               int32             `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{2}
}

func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetConditionAddress() uint64 {
	if m != nil {
		return m.ConditionAddress
	}
	return 0
}

func (m *Condition) GetSyzkallerConditionAddress() uint32 {
	if m != nil {
		return m.SyzkallerConditionAddress
	}
	return 0
}

func (m *Condition) GetUncoveredAddress() uint64 {
	if m != nil {
		return m.UncoveredAddress
	}
	return 0
}

func (m *Condition) GetSyzkallerUncoveredAddress() uint32 {
	if m != nil {
		return m.SyzkallerUncoveredAddress
	}
	return 0
}

func (m *Condition) GetIdx() uint32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *Condition) GetSuccessor() uint64 {
	if m != nil {
		return m.Successor
	}
	return 0
}

func (m *Condition) GetRightBranchAddress() map[uint64]uint32 {
	if m != nil {
		return m.RightBranchAddress
	}
	return nil
}

func (m *Condition) GetSyzkallerRightBranchAddress() map[uint32]uint32 {
	if m != nil {
		return m.SyzkallerRightBranchAddress
	}
	return nil
}

func (m *Condition) GetWrongBranchAddress() map[uint64]uint32 {
	if m != nil {
		return m.WrongBranchAddress
	}
	return nil
}

func (m *Condition) GetSyzkallerWrongBranchAddress() map[uint32]uint32 {
	if m != nil {
		return m.SyzkallerWrongBranchAddress
	}
	return nil
}

type Conditions struct {
	Condition            map[uint64]*Condition `protobuf:"bytes,10,rep,name=condition,proto3" json:"condition,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Conditions) Reset()         { *m = Conditions{} }
func (m *Conditions) String() string { return proto.CompactTextString(m) }
func (*Conditions) ProtoMessage()    {}
func (*Conditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{3}
}

func (m *Conditions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Conditions.Unmarshal(m, b)
}
func (m *Conditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Conditions.Marshal(b, m, deterministic)
}
func (m *Conditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conditions.Merge(m, src)
}
func (m *Conditions) XXX_Size() int {
	return xxx_messageInfo_Conditions.Size(m)
}
func (m *Conditions) XXX_DiscardUnknown() {
	xxx_messageInfo_Conditions.DiscardUnknown(m)
}

var xxx_messageInfo_Conditions proto.InternalMessageInfo

func (m *Conditions) GetCondition() map[uint64]*Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

type Syscall struct {
	Name              string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cmd               uint64                `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	CriticalCondition map[uint32]*Condition `protobuf:"bytes,4,rep,name=critical_condition,json=criticalCondition,proto3" json:"critical_condition,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// it is the data of this syscall
	RunTimeDate          *RunTimeData             `protobuf:"bytes,5,opt,name=run_time_date,json=runTimeDate,proto3" json:"run_time_date,omitempty"`
	WriteAddress         map[uint32]*WriteAddress `protobuf:"bytes,11,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Syscall) Reset()         { *m = Syscall{} }
func (m *Syscall) String() string { return proto.CompactTextString(m) }
func (*Syscall) ProtoMessage()    {}
func (*Syscall) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{4}
}

func (m *Syscall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Syscall.Unmarshal(m, b)
}
func (m *Syscall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Syscall.Marshal(b, m, deterministic)
}
func (m *Syscall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Syscall.Merge(m, src)
}
func (m *Syscall) XXX_Size() int {
	return xxx_messageInfo_Syscall.Size(m)
}
func (m *Syscall) XXX_DiscardUnknown() {
	xxx_messageInfo_Syscall.DiscardUnknown(m)
}

var xxx_messageInfo_Syscall proto.InternalMessageInfo

func (m *Syscall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Syscall) GetCmd() uint64 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *Syscall) GetCriticalCondition() map[uint32]*Condition {
	if m != nil {
		return m.CriticalCondition
	}
	return nil
}

func (m *Syscall) GetRunTimeDate() *RunTimeData {
	if m != nil {
		return m.RunTimeDate
	}
	return nil
}

func (m *Syscall) GetWriteAddress() map[uint32]*WriteAddress {
	if m != nil {
		return m.WriteAddress
	}
	return nil
}

type WriteAddress struct {
	Repeat     uint32 `protobuf:"varint,7,opt,name=repeat,proto3" json:"repeat,omitempty"`
	RealRepeat uint32 `protobuf:"varint,8,opt,name=real_repeat,json=realRepeat,proto3" json:"real_repeat,omitempty"`
	Prio       uint32 `protobuf:"varint,6,opt,name=prio,proto3" json:"prio,omitempty"`
	// the address writes to global variable
	WriteAddress uint32 `protobuf:"varint,2,opt,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty"`
	// the address of condition is related to this global variable
	ConditionAddress uint32              `protobuf:"varint,3,opt,name=condition_address,json=conditionAddress,proto3" json:"condition_address,omitempty"`
	WriteInput       map[string]*Input   `protobuf:"bytes,4,rep,name=write_input,json=writeInput,proto3" json:"write_input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WriteSyscall     map[uint32]*Syscall `protobuf:"bytes,5,rep,name=write_syscall,json=writeSyscall,proto3" json:"write_syscall,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// it is the data of uncovered address
	RunTimeDate          *RunTimeData `protobuf:"bytes,11,opt,name=run_time_date,json=runTimeDate,proto3" json:"run_time_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WriteAddress) Reset()         { *m = WriteAddress{} }
func (m *WriteAddress) String() string { return proto.CompactTextString(m) }
func (*WriteAddress) ProtoMessage()    {}
func (*WriteAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{5}
}

func (m *WriteAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteAddress.Unmarshal(m, b)
}
func (m *WriteAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteAddress.Marshal(b, m, deterministic)
}
func (m *WriteAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteAddress.Merge(m, src)
}
func (m *WriteAddress) XXX_Size() int {
	return xxx_messageInfo_WriteAddress.Size(m)
}
func (m *WriteAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WriteAddress proto.InternalMessageInfo

func (m *WriteAddress) GetRepeat() uint32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

func (m *WriteAddress) GetRealRepeat() uint32 {
	if m != nil {
		return m.RealRepeat
	}
	return 0
}

func (m *WriteAddress) GetPrio() uint32 {
	if m != nil {
		return m.Prio
	}
	return 0
}

func (m *WriteAddress) GetWriteAddress() uint32 {
	if m != nil {
		return m.WriteAddress
	}
	return 0
}

func (m *WriteAddress) GetConditionAddress() uint32 {
	if m != nil {
		return m.ConditionAddress
	}
	return 0
}

func (m *WriteAddress) GetWriteInput() map[string]*Input {
	if m != nil {
		return m.WriteInput
	}
	return nil
}

func (m *WriteAddress) GetWriteSyscall() map[uint32]*Syscall {
	if m != nil {
		return m.WriteSyscall
	}
	return nil
}

func (m *WriteAddress) GetRunTimeDate() *RunTimeData {
	if m != nil {
		return m.RunTimeDate
	}
	return nil
}

type WriteAddresses struct {
	Condition            *Condition               `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	WriteAddress         map[uint32]*WriteAddress `protobuf:"bytes,4,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *WriteAddresses) Reset()         { *m = WriteAddresses{} }
func (m *WriteAddresses) String() string { return proto.CompactTextString(m) }
func (*WriteAddresses) ProtoMessage()    {}
func (*WriteAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{6}
}

func (m *WriteAddresses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteAddresses.Unmarshal(m, b)
}
func (m *WriteAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteAddresses.Marshal(b, m, deterministic)
}
func (m *WriteAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteAddresses.Merge(m, src)
}
func (m *WriteAddresses) XXX_Size() int {
	return xxx_messageInfo_WriteAddresses.Size(m)
}
func (m *WriteAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_WriteAddresses proto.InternalMessageInfo

func (m *WriteAddresses) GetCondition() *Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *WriteAddresses) GetWriteAddress() map[uint32]*WriteAddress {
	if m != nil {
		return m.WriteAddress
	}
	return nil
}

type UncoveredAddress struct {
	ConditionAddress     uint32                   `protobuf:"varint,3,opt,name=condition_address,json=conditionAddress,proto3" json:"condition_address,omitempty"`
	UncoveredAddress     uint32                   `protobuf:"varint,1,opt,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty"`
	RunTimeDate          *RunTimeData             `protobuf:"bytes,5,opt,name=run_time_date,json=runTimeDate,proto3" json:"run_time_date,omitempty"`
	WriteAddress         map[uint32]*WriteAddress `protobuf:"bytes,4,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UncoveredAddress) Reset()         { *m = UncoveredAddress{} }
func (m *UncoveredAddress) String() string { return proto.CompactTextString(m) }
func (*UncoveredAddress) ProtoMessage()    {}
func (*UncoveredAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{7}
}

func (m *UncoveredAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UncoveredAddress.Unmarshal(m, b)
}
func (m *UncoveredAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UncoveredAddress.Marshal(b, m, deterministic)
}
func (m *UncoveredAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UncoveredAddress.Merge(m, src)
}
func (m *UncoveredAddress) XXX_Size() int {
	return xxx_messageInfo_UncoveredAddress.Size(m)
}
func (m *UncoveredAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_UncoveredAddress.DiscardUnknown(m)
}

var xxx_messageInfo_UncoveredAddress proto.InternalMessageInfo

func (m *UncoveredAddress) GetConditionAddress() uint32 {
	if m != nil {
		return m.ConditionAddress
	}
	return 0
}

func (m *UncoveredAddress) GetUncoveredAddress() uint32 {
	if m != nil {
		return m.UncoveredAddress
	}
	return 0
}

func (m *UncoveredAddress) GetRunTimeDate() *RunTimeData {
	if m != nil {
		return m.RunTimeDate
	}
	return nil
}

func (m *UncoveredAddress) GetWriteAddress() map[uint32]*WriteAddress {
	if m != nil {
		return m.WriteAddress
	}
	return nil
}

type Call struct {
	Idx                  uint32            `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Address              map[uint32]uint32 `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Call) Reset()         { *m = Call{} }
func (m *Call) String() string { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()    {}
func (*Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{8}
}

func (m *Call) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Call.Unmarshal(m, b)
}
func (m *Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Call.Marshal(b, m, deterministic)
}
func (m *Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Call.Merge(m, src)
}
func (m *Call) XXX_Size() int {
	return xxx_messageInfo_Call.Size(m)
}
func (m *Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Call proto.InternalMessageInfo

func (m *Call) GetIdx() uint32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *Call) GetAddress() map[uint32]uint32 {
	if m != nil {
		return m.Address
	}
	return nil
}

type Input struct {
	// for input
	Sig     string           `protobuf:"bytes,11,opt,name=sig,proto3" json:"sig,omitempty"`
	Program []byte           `protobuf:"bytes,12,opt,name=program,proto3" json:"program,omitempty"`
	Call    map[uint32]*Call `protobuf:"bytes,13,rep,name=call,proto3" json:"call,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// for dependency
	Dependency       bool                         `protobuf:"varint,21,opt,name=dependency,proto3" json:"dependency,omitempty"`
	UncoveredAddress map[uint32]*UncoveredAddress `protobuf:"bytes,22,rep,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// for write address
	WriteAddress         uint32   `protobuf:"varint,31,opt,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty"`
	Idx                  uint32   `protobuf:"varint,32,opt,name=idx,proto3" json:"idx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{9}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

func (m *Input) GetProgram() []byte {
	if m != nil {
		return m.Program
	}
	return nil
}

func (m *Input) GetCall() map[uint32]*Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *Input) GetDependency() bool {
	if m != nil {
		return m.Dependency
	}
	return false
}

func (m *Input) GetUncoveredAddress() map[uint32]*UncoveredAddress {
	if m != nil {
		return m.UncoveredAddress
	}
	return nil
}

func (m *Input) GetWriteAddress() uint32 {
	if m != nil {
		return m.WriteAddress
	}
	return 0
}

func (m *Input) GetIdx() uint32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

type Inputs struct {
	Input                map[string]*Input `protobuf:"bytes,1,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Inputs) Reset()         { *m = Inputs{} }
func (m *Inputs) String() string { return proto.CompactTextString(m) }
func (*Inputs) ProtoMessage()    {}
func (*Inputs) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{10}
}

func (m *Inputs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Inputs.Unmarshal(m, b)
}
func (m *Inputs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Inputs.Marshal(b, m, deterministic)
}
func (m *Inputs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inputs.Merge(m, src)
}
func (m *Inputs) XXX_Size() int {
	return xxx_messageInfo_Inputs.Size(m)
}
func (m *Inputs) XXX_DiscardUnknown() {
	xxx_messageInfo_Inputs.DiscardUnknown(m)
}

var xxx_messageInfo_Inputs proto.InternalMessageInfo

func (m *Inputs) GetInput() map[string]*Input {
	if m != nil {
		return m.Input
	}
	return nil
}

//for syz-fuzzer
type Task struct {
	Input                *Input   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Name                 string   `protobuf:"bytes,41,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{11}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Corpus struct {
	CorpusDependencyInput map[string]*Input          `protobuf:"bytes,1,rep,name=corpusDependencyInput,proto3" json:"corpusDependencyInput,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CorpusRecursiveInput  map[string]*Input          `protobuf:"bytes,2,rep,name=corpusRecursiveInput,proto3" json:"corpusRecursiveInput,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CorpusErrorInput      map[string]*Input          `protobuf:"bytes,3,rep,name=corpusErrorInput,proto3" json:"corpusErrorInput,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WriteAddress          map[uint64]*WriteAddresses `protobuf:"bytes,4,rep,name=WriteAddress,proto3" json:"WriteAddress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral  struct{}                   `json:"-"`
	XXX_unrecognized      []byte                     `json:"-"`
	XXX_sizecache         int32                      `json:"-"`
}

func (m *Corpus) Reset()         { *m = Corpus{} }
func (m *Corpus) String() string { return proto.CompactTextString(m) }
func (*Corpus) ProtoMessage()    {}
func (*Corpus) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4d5fd3d0a7c985, []int{12}
}

func (m *Corpus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Corpus.Unmarshal(m, b)
}
func (m *Corpus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Corpus.Marshal(b, m, deterministic)
}
func (m *Corpus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Corpus.Merge(m, src)
}
func (m *Corpus) XXX_Size() int {
	return xxx_messageInfo_Corpus.Size(m)
}
func (m *Corpus) XXX_DiscardUnknown() {
	xxx_messageInfo_Corpus.DiscardUnknown(m)
}

var xxx_messageInfo_Corpus proto.InternalMessageInfo

func (m *Corpus) GetCorpusDependencyInput() map[string]*Input {
	if m != nil {
		return m.CorpusDependencyInput
	}
	return nil
}

func (m *Corpus) GetCorpusRecursiveInput() map[string]*Input {
	if m != nil {
		return m.CorpusRecursiveInput
	}
	return nil
}

func (m *Corpus) GetCorpusErrorInput() map[string]*Input {
	if m != nil {
		return m.CorpusErrorInput
	}
	return nil
}

func (m *Corpus) GetWriteAddress() map[uint64]*WriteAddresses {
	if m != nil {
		return m.WriteAddress
	}
	return nil
}

func init() {
	proto.RegisterEnum("dra.RunTimeDataTaskStatus", RunTimeDataTaskStatus_name, RunTimeDataTaskStatus_value)
	proto.RegisterType((*RunTimeData)(nil), "dra.runTimeData")
	proto.RegisterMapType((map[uint32]uint32)(nil), "dra.runTimeData.RightBranchAddressEntry")
	proto.RegisterType((*Empty)(nil), "dra.Empty")
	proto.RegisterType((*Condition)(nil), "dra.Condition")
	proto.RegisterMapType((map[uint64]uint32)(nil), "dra.Condition.RightBranchAddressEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "dra.Condition.SyzkallerRightBranchAddressEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "dra.Condition.SyzkallerWrongBranchAddressEntry")
	proto.RegisterMapType((map[uint64]uint32)(nil), "dra.Condition.WrongBranchAddressEntry")
	proto.RegisterType((*Conditions)(nil), "dra.Conditions")
	proto.RegisterMapType((map[uint64]*Condition)(nil), "dra.Conditions.ConditionEntry")
	proto.RegisterType((*Syscall)(nil), "dra.Syscall")
	proto.RegisterMapType((map[uint32]*Condition)(nil), "dra.Syscall.CriticalConditionEntry")
	proto.RegisterMapType((map[uint32]*WriteAddress)(nil), "dra.Syscall.WriteAddressEntry")
	proto.RegisterType((*WriteAddress)(nil), "dra.WriteAddress")
	proto.RegisterMapType((map[string]*Input)(nil), "dra.WriteAddress.WriteInputEntry")
	proto.RegisterMapType((map[uint32]*Syscall)(nil), "dra.WriteAddress.WriteSyscallEntry")
	proto.RegisterType((*WriteAddresses)(nil), "dra.WriteAddresses")
	proto.RegisterMapType((map[uint32]*WriteAddress)(nil), "dra.WriteAddresses.WriteAddressEntry")
	proto.RegisterType((*UncoveredAddress)(nil), "dra.UncoveredAddress")
	proto.RegisterMapType((map[uint32]*WriteAddress)(nil), "dra.UncoveredAddress.WriteAddressEntry")
	proto.RegisterType((*Call)(nil), "dra.Call")
	proto.RegisterMapType((map[uint32]uint32)(nil), "dra.Call.AddressEntry")
	proto.RegisterType((*Input)(nil), "dra.Input")
	proto.RegisterMapType((map[uint32]*Call)(nil), "dra.Input.CallEntry")
	proto.RegisterMapType((map[uint32]*UncoveredAddress)(nil), "dra.Input.UncoveredAddressEntry")
	proto.RegisterType((*Inputs)(nil), "dra.Inputs")
	proto.RegisterMapType((map[string]*Input)(nil), "dra.Inputs.InputEntry")
	proto.RegisterType((*Task)(nil), "dra.task")
	proto.RegisterType((*Corpus)(nil), "dra.corpus")
	proto.RegisterMapType((map[string]*Input)(nil), "dra.corpus.CorpusDependencyInputEntry")
	proto.RegisterMapType((map[string]*Input)(nil), "dra.corpus.CorpusErrorInputEntry")
	proto.RegisterMapType((map[string]*Input)(nil), "dra.corpus.CorpusRecursiveInputEntry")
	proto.RegisterMapType((map[uint64]*WriteAddresses)(nil), "dra.corpus.WriteAddressEntry")
}

func init() { proto.RegisterFile("DependencyRPC.proto", fileDescriptor_db4d5fd3d0a7c985) }

var fileDescriptor_db4d5fd3d0a7c985 = []byte{
	// 1429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x8e, 0x63, 0x6f, 0x36, 0x7b, 0xf6, 0xa7, 0xce, 0x34, 0x49, 0xdd, 0x2d, 0xb4, 0xcb, 0x96,
	0xb6, 0x5b, 0x15, 0xb6, 0x55, 0xa0, 0x52, 0x55, 0x55, 0x48, 0xed, 0x36, 0x2a, 0x41, 0xfd, 0x41,
	0x4e, 0xa1, 0xa5, 0x42, 0x5a, 0xb9, 0xf6, 0x34, 0xb5, 0xb2, 0x6b, 0xaf, 0xc6, 0xe3, 0x86, 0x45,
	0x5c, 0x73, 0xc3, 0x0b, 0x70, 0x8f, 0x90, 0x78, 0x10, 0x5e, 0x80, 0x4b, 0x6e, 0xb8, 0xe1, 0x45,
	0xd0, 0xcc, 0xf8, 0x67, 0x6c, 0xcf, 0x36, 0xe9, 0x22, 0xc4, 0xdd, 0x78, 0xe6, 0xcc, 0x77, 0xfe,
	0xbe, 0x39, 0x73, 0xc6, 0x70, 0xfa, 0x3e, 0x9e, 0xe1, 0xc0, 0xc3, 0x81, 0x3b, 0xb7, 0xbf, 0x1c,
	0x0d, 0x67, 0x24, 0xa4, 0x21, 0xd2, 0x3d, 0xe2, 0xf4, 0xff, 0x34, 0xa0, 0x49, 0xe2, 0xe0, 0xa9,
	0x3f, 0xc5, 0xf7, 0x1d, 0xea, 0x20, 0x0b, 0xea, 0x33, 0x12, 0x1e, 0x10, 0x67, 0x6a, 0xad, 0xf6,
	0xb4, 0x41, 0xcb, 0x4e, 0x3f, 0xd1, 0x1d, 0x68, 0x52, 0x27, 0x3a, 0x1c, 0x47, 0xd4, 0xa1, 0x71,
	0x64, 0xe9, 0x3d, 0x6d, 0xd0, 0xd9, 0x39, 0x37, 0xf4, 0x88, 0x33, 0x94, 0x00, 0x86, 0x4c, 0x66,
	0x9f, 0x8b, 0xd8, 0x90, 0x8f, 0xd1, 0x25, 0xe8, 0x10, 0x37, 0x26, 0x91, 0xff, 0x06, 0x8f, 0xdd,
	0x30, 0x0e, 0xa8, 0x65, 0xf4, 0xb4, 0x41, 0xdb, 0x6e, 0xa7, 0xb3, 0x23, 0x36, 0x89, 0x4c, 0xd0,
	0x7d, 0xef, 0x3b, 0x0b, 0xf8, 0x1a, 0x1b, 0xa2, 0xcb, 0xd0, 0x71, 0x5f, 0x63, 0xf7, 0x70, 0x14,
	0x06, 0x9e, 0x4f, 0xfd, 0x30, 0xb0, 0x9a, 0x3d, 0x6d, 0xb0, 0x6e, 0x97, 0x66, 0xd1, 0x35, 0xd8,
	0x70, 0xd3, 0x8f, 0xb1, 0xe3, 0x79, 0x04, 0x47, 0x91, 0xd5, 0xe2, 0x38, 0x66, 0xb6, 0x70, 0x57,
	0xcc, 0xa3, 0x3e, 0xb4, 0xf8, 0xf6, 0xe4, 0xdb, 0x6a, 0x73, 0xc8, 0xc2, 0x1c, 0x8b, 0x44, 0x0a,
	0xd3, 0xe1, 0x30, 0xe9, 0x27, 0xba, 0x05, 0x67, 0xb8, 0xa4, 0xed, 0x1f, 0xbc, 0xa6, 0xf7, 0x88,
	0x13, 0xb8, 0xaf, 0x53, 0xa0, 0x53, 0x1c, 0x68, 0xd1, 0x32, 0x7a, 0x01, 0x9b, 0x84, 0xcd, 0x8e,
	0x5f, 0xf2, 0xe9, 0xcc, 0x4e, 0xb3, 0xa7, 0x0f, 0x9a, 0x3b, 0x83, 0x4a, 0x30, 0xab, 0x10, 0xbb,
	0x01, 0x25, 0x73, 0x1b, 0x91, 0xca, 0x42, 0x77, 0x17, 0xce, 0x2c, 0x10, 0x67, 0x51, 0x3d, 0xc4,
	0x73, 0x4b, 0x13, 0x51, 0x3d, 0xc4, 0x73, 0xb4, 0x09, 0xb5, 0x37, 0xce, 0x24, 0xc6, 0x3c, 0xc9,
	0x6d, 0x5b, 0x7c, 0xdc, 0x5e, 0xbd, 0xa5, 0xf5, 0xf7, 0x40, 0x4e, 0x5b, 0x0b, 0xd6, 0xe3, 0x80,
	0xe2, 0x88, 0x62, 0xcf, 0x5c, 0x41, 0x6d, 0x68, 0x10, 0x9c, 0xe4, 0xcb, 0xd4, 0x10, 0xc0, 0x5a,
	0xb2, 0xb4, 0x8a, 0xea, 0xa0, 0x87, 0x31, 0x35, 0x75, 0xd4, 0x80, 0x9a, 0x1b, 0xbe, 0xc1, 0xc4,
	0x34, 0xfa, 0x37, 0xa1, 0xb6, 0x3b, 0x9d, 0xd1, 0xb9, 0x1c, 0x4a, 0xad, 0x18, 0x4a, 0x04, 0x46,
	0xe0, 0x4c, 0x85, 0x19, 0x0d, 0x9b, 0x8f, 0xfb, 0x7f, 0xd7, 0xa1, 0x71, 0x4c, 0x5e, 0x19, 0x8a,
	0xa1, 0xc8, 0xeb, 0x67, 0x70, 0x2e, 0x9a, 0x7f, 0x7f, 0xe8, 0x4c, 0x26, 0x98, 0x8c, 0xab, 0xdb,
	0x84, 0xb3, 0x67, 0x33, 0x91, 0x51, 0x79, 0xff, 0x35, 0xd8, 0x88, 0x03, 0x6e, 0x3e, 0xf6, 0xb2,
	0x5d, 0xba, 0x50, 0x96, 0x2d, 0x28, 0x95, 0x55, 0xb7, 0x19, 0x25, 0x65, 0x5f, 0x95, 0xf7, 0x27,
	0x5c, 0xaf, 0xe5, 0x5c, 0x7f, 0x0f, 0x1a, 0x51, 0xec, 0xba, 0x38, 0x8a, 0x42, 0x62, 0xad, 0x71,
	0xb5, 0xf9, 0x04, 0x7a, 0xbe, 0x80, 0x3c, 0x75, 0x4e, 0x9e, 0xcb, 0x9c, 0x3c, 0x99, 0x47, 0xef,
	0x42, 0x1d, 0x44, 0xe1, 0x7c, 0xee, 0x89, 0x52, 0xc7, 0x3a, 0xd7, 0x71, 0xbd, 0xa4, 0x63, 0x3f,
	0xdd, 0xb4, 0x48, 0x59, 0x1e, 0x20, 0xc5, 0x61, 0x78, 0x0e, 0x9b, 0x47, 0x24, 0x0c, 0x0e, 0xca,
	0xba, 0x1a, 0x4a, 0x7f, 0x9e, 0x31, 0x51, 0x95, 0x3f, 0x47, 0x95, 0x85, 0xa2, 0x3f, 0x4a, 0x1d,
	0xf0, 0x76, 0x7f, 0x16, 0x29, 0xcb, 0xfd, 0xa9, 0x4a, 0x9c, 0xf0, 0x00, 0x1a, 0xc7, 0x1c, 0xc0,
	0xee, 0x63, 0xe8, 0x1d, 0x17, 0xd7, 0x77, 0x39, 0xd0, 0xcc, 0xac, 0x05, 0xee, 0x2c, 0x6d, 0xd6,
	0x09, 0xf0, 0x8e, 0xad, 0x33, 0x3f, 0x6b, 0x00, 0x59, 0xe4, 0x23, 0x74, 0x07, 0x1a, 0xd9, 0x79,
	0x4d, 0xb2, 0x73, 0xbe, 0x98, 0x9d, 0x28, 0x1f, 0x8a, 0x64, 0xe4, 0x1b, 0xba, 0x0f, 0xa1, 0x53,
	0x5c, 0x54, 0xb8, 0xf6, 0xa1, 0x6c, 0x4a, 0x73, 0xa7, 0x53, 0x44, 0x97, 0x4d, 0xfb, 0x4d, 0x87,
	0xfa, 0xfe, 0x3c, 0x72, 0x9d, 0xc9, 0x24, 0x2b, 0x50, 0x5a, 0x5e, 0xa0, 0x18, 0xb6, 0x3b, 0xf5,
	0x38, 0x8e, 0x61, 0xb3, 0x21, 0xb2, 0x01, 0xb9, 0xc4, 0xa7, 0xbe, 0xeb, 0x4c, 0xf2, 0xb2, 0x63,
	0x19, 0xdc, 0x8d, 0x8b, 0x5c, 0x51, 0x82, 0x37, 0x1c, 0x25, 0x62, 0x25, 0x5f, 0x36, 0xdc, 0xf2,
	0x3c, 0xfa, 0x14, 0xda, 0x24, 0x0e, 0xc6, 0xd4, 0x9f, 0xe2, 0xb1, 0xe7, 0x50, 0xcc, 0x0b, 0x45,
	0x73, 0xc7, 0x2c, 0x5f, 0x12, 0xb6, 0x74, 0x7f, 0x63, 0x34, 0x82, 0xf6, 0x11, 0xf1, 0x29, 0xce,
	0x98, 0xde, 0x94, 0x62, 0x99, 0x1a, 0xf1, 0x8c, 0x49, 0x14, 0x88, 0xdd, 0x3a, 0x92, 0xa6, 0xba,
	0x4f, 0x61, 0x5b, 0x6d, 0xa7, 0x22, 0xc3, 0x27, 0x0e, 0x6b, 0xd7, 0x86, 0x8d, 0x8a, 0x62, 0x05,
	0xe0, 0x95, 0x22, 0xe0, 0x06, 0x07, 0x94, 0x37, 0xca, 0xa9, 0xfa, 0xc9, 0x80, 0x96, 0xbc, 0x86,
	0xb6, 0x61, 0x8d, 0xe0, 0x19, 0x76, 0xa8, 0x55, 0xe7, 0x90, 0xc9, 0x17, 0xba, 0x00, 0x4d, 0x82,
	0x9d, 0xc9, 0x38, 0x59, 0x5c, 0xe7, 0x8b, 0xc0, 0xa6, 0x6c, 0x21, 0x80, 0xc0, 0x98, 0x11, 0x3f,
	0xe4, 0x65, 0xb7, 0x6d, 0xf3, 0x31, 0xba, 0x58, 0x0e, 0xa6, 0x60, 0x71, 0x21, 0x58, 0xea, 0x0b,
	0x4a, 0x5f, 0xd0, 0x78, 0xdc, 0x83, 0xa6, 0x40, 0xf4, 0x83, 0x59, 0x4c, 0x13, 0x86, 0x7c, 0x50,
	0x71, 0x51, 0x7c, 0xec, 0x31, 0x19, 0x91, 0x1f, 0x38, 0xca, 0x26, 0xd0, 0xe7, 0xa9, 0x55, 0x91,
	0x48, 0xa7, 0x55, 0x93, 0x78, 0x56, 0x45, 0x49, 0x92, 0x2e, 0xe7, 0x39, 0x25, 0x77, 0x85, 0x62,
	0xcd, 0x13, 0x50, 0xac, 0xbb, 0x07, 0xa7, 0x4a, 0xe6, 0xc9, 0x59, 0x6c, 0x88, 0x2c, 0xf6, 0x8a,
	0x59, 0x04, 0x0e, 0xc9, 0x77, 0xc8, 0x94, 0x78, 0x94, 0x50, 0x42, 0xb6, 0x51, 0x41, 0x89, 0x7e,
	0x11, 0xac, 0x25, 0x93, 0x59, 0x66, 0xc3, 0x5f, 0x1a, 0x74, 0xe4, 0x00, 0xe0, 0x08, 0x7d, 0x24,
	0xd7, 0x15, 0x4d, 0x49, 0xd1, 0x5c, 0x00, 0x7d, 0x51, 0x4e, 0xb8, 0x48, 0xd0, 0xa5, 0x4a, 0x68,
	0x71, 0x74, 0xec, 0x21, 0xfa, 0x2f, 0xe8, 0xfe, 0xfb, 0x2a, 0x98, 0x95, 0x3e, 0xe2, 0x9d, 0x08,
	0xa8, 0xec, 0x70, 0x84, 0x39, 0xd5, 0x0e, 0x67, 0xb9, 0x12, 0xf4, 0x50, 0x1d, 0xc4, 0x2b, 0x7c,
	0x57, 0xd9, 0xfa, 0xff, 0x25, 0x8c, 0x3f, 0x6a, 0x60, 0x8c, 0xd8, 0x01, 0x48, 0x5a, 0x30, 0x2d,
	0x6f, 0xc1, 0x6e, 0xe4, 0xad, 0xea, 0x2a, 0x37, 0x7b, 0x5b, 0xb0, 0x85, 0x95, 0xcd, 0x82, 0x95,
	0xa9, 0x58, 0xf7, 0x36, 0xb4, 0x96, 0xbe, 0x04, 0x7f, 0xd1, 0xa1, 0x26, 0x0e, 0xb5, 0x09, 0x7a,
	0xe4, 0x1f, 0xf0, 0x03, 0xd8, 0xb0, 0xd9, 0x50, 0x7e, 0x89, 0xb5, 0x8a, 0x2f, 0xb1, 0x01, 0x18,
	0xfc, 0xdc, 0xb7, 0xb9, 0x81, 0x9b, 0xf9, 0xd1, 0xe2, 0x66, 0x0a, 0xf3, 0xb8, 0x04, 0x3a, 0x0f,
	0xe0, 0x65, 0x2f, 0x3f, 0x6b, 0x8b, 0x3f, 0x4e, 0xa4, 0x19, 0xf4, 0x48, 0xc5, 0x86, 0x6d, 0x0e,
	0xdb, 0x93, 0x60, 0xcb, 0x49, 0x13, 0x2a, 0xaa, 0x7c, 0xa9, 0xd4, 0xcb, 0x0b, 0x8a, 0x7a, 0x99,
	0xc4, 0xbc, 0x97, 0xc5, 0xbc, 0x7b, 0x0f, 0x1a, 0xa3, 0xb7, 0x9c, 0xfe, 0x0b, 0xc5, 0xd4, 0x36,
	0xb2, 0x84, 0xc8, 0x95, 0xe4, 0x05, 0x6c, 0x29, 0xad, 0x54, 0xe0, 0x5d, 0x2b, 0xe2, 0x6d, 0x29,
	0x79, 0x29, 0x67, 0xe9, 0x07, 0x58, 0xe3, 0x71, 0x60, 0xd5, 0xa4, 0x26, 0x0a, 0xb7, 0x26, 0x71,
	0x43, 0xac, 0x0d, 0xa5, 0x6a, 0x2d, 0x84, 0xba, 0xf7, 0x01, 0xfe, 0x7d, 0x8d, 0xec, 0xdf, 0x01,
	0x83, 0x3d, 0xc8, 0x98, 0x74, 0xaa, 0xbb, 0x22, 0xcd, 0x17, 0xb2, 0x5e, 0xe5, 0xaa, 0xf4, 0x98,
	0xfa, 0xb5, 0x06, 0x6b, 0x6e, 0x48, 0x66, 0x71, 0x84, 0xbe, 0x85, 0x2d, 0x31, 0xca, 0x7f, 0x06,
	0xec, 0x49, 0xce, 0x88, 0x86, 0x5b, 0x48, 0x0c, 0x47, 0x2a, 0x41, 0xe1, 0x9c, 0x1a, 0x04, 0x7d,
	0x03, 0x9b, 0x62, 0xc1, 0x4e, 0x5f, 0x88, 0x02, 0x7c, 0x55, 0xaa, 0xa0, 0x05, 0xf0, 0xa2, 0x9c,
	0xc0, 0x56, 0x42, 0xa0, 0x47, 0x60, 0x8a, 0xf9, 0x5d, 0x42, 0x42, 0x22, 0x60, 0x75, 0xe9, 0xe6,
	0x2c, 0xc0, 0xe6, 0x32, 0x09, 0x4b, 0xcb, 0x5b, 0xd1, 0xdd, 0x62, 0xcb, 0x90, 0x94, 0xa7, 0xf7,
	0x65, 0x28, 0x45, 0x51, 0x7a, 0x56, 0x6c, 0x90, 0xba, 0x8b, 0x23, 0xb4, 0xf4, 0x6d, 0xb8, 0x0f,
	0x67, 0x17, 0x86, 0x66, 0x69, 0xd0, 0x27, 0xb0, 0xa5, 0x0c, 0xcc, 0xd2, 0x80, 0x4f, 0x8f, 0x29,
	0xc8, 0x49, 0xbb, 0x7d, 0xb5, 0x08, 0x76, 0x5a, 0x71, 0x85, 0x4a, 0xa8, 0x3b, 0x7f, 0xe8, 0xd0,
	0x2e, 0xfc, 0xa4, 0x42, 0x03, 0x68, 0x3d, 0xc0, 0xf4, 0xeb, 0xe9, 0x93, 0x57, 0xaf, 0x22, 0x4c,
	0x23, 0x24, 0xcc, 0xe1, 0x3f, 0x14, 0xba, 0xd2, 0xb8, 0xbf, 0x82, 0x06, 0xd0, 0x7c, 0x80, 0xe9,
	0x63, 0x7c, 0x24, 0xf2, 0x2b, 0x0b, 0x36, 0xa5, 0x13, 0xda, 0x5f, 0x41, 0xd7, 0xe1, 0xf4, 0x3e,
	0x0e, 0xbc, 0x32, 0x77, 0x25, 0x4f, 0x4b, 0xd0, 0x1f, 0x73, 0x23, 0xf2, 0xa6, 0x5c, 0xc6, 0x3e,
	0x55, 0x7a, 0x9f, 0xf4, 0x57, 0xd0, 0x4d, 0x30, 0x19, 0x7e, 0xa1, 0x23, 0x55, 0x79, 0x5e, 0xd2,
	0x72, 0x11, 0xea, 0xa3, 0x30, 0x08, 0xb0, 0x4b, 0xdf, 0xea, 0x65, 0x8b, 0x61, 0x97, 0xdc, 0x54,
	0x19, 0x7d, 0x1d, 0xd0, 0x03, 0x4c, 0xd5, 0x4e, 0x2a, 0xc3, 0x72, 0x03, 0xb6, 0x6c, 0x4c, 0x63,
	0x12, 0x94, 0xf7, 0x88, 0x5a, 0xcb, 0xca, 0x4f, 0xd5, 0x62, 0x66, 0xcc, 0xc3, 0xf0, 0x60, 0xb1,
	0xc5, 0x2f, 0xd7, 0xf8, 0x7f, 0xc6, 0x4f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x10, 0x7c, 0x69,
	0xb1, 0x7e, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DependencyRPCClient is the client API for DependencyRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DependencyRPCClient interface {
	// DRA and syz-manager
	GetVmOffsets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetNewInput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Inputs, error)
	SendDependencyInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error)
	GetCondition(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Conditions, error)
	SendWriteAddress(ctx context.Context, in *WriteAddresses, opts ...grpc.CallOption) (*Empty, error)
	//syz-fuzzer and syz-manager
	Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendNewInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error)
	GetDependencyInput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Inputs, error)
	ReturnDependencyInput(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	SendLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type dependencyRPCClient struct {
	cc *grpc.ClientConn
}

func NewDependencyRPCClient(cc *grpc.ClientConn) DependencyRPCClient {
	return &dependencyRPCClient{cc}
}

func (c *dependencyRPCClient) GetVmOffsets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetVmOffsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetNewInput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Inputs, error) {
	out := new(Inputs)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetNewInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendDependencyInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendDependencyInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetCondition(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Conditions, error) {
	out := new(Conditions)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendWriteAddress(ctx context.Context, in *WriteAddresses, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendWriteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendNewInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendNewInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetDependencyInput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Inputs, error) {
	out := new(Inputs)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetDependencyInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) ReturnDependencyInput(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/ReturnDependencyInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DependencyRPCServer is the server API for DependencyRPC service.
type DependencyRPCServer interface {
	// DRA and syz-manager
	GetVmOffsets(context.Context, *Empty) (*Empty, error)
	GetNewInput(context.Context, *Empty) (*Inputs, error)
	SendDependencyInput(context.Context, *Input) (*Empty, error)
	GetCondition(context.Context, *Empty) (*Conditions, error)
	SendWriteAddress(context.Context, *WriteAddresses) (*Empty, error)
	//syz-fuzzer and syz-manager
	Connect(context.Context, *Empty) (*Empty, error)
	SendNewInput(context.Context, *Input) (*Empty, error)
	GetDependencyInput(context.Context, *Empty) (*Inputs, error)
	ReturnDependencyInput(context.Context, *Task) (*Empty, error)
	SendLog(context.Context, *Empty) (*Empty, error)
}

// UnimplementedDependencyRPCServer can be embedded to have forward compatible implementations.
type UnimplementedDependencyRPCServer struct {
}

func (*UnimplementedDependencyRPCServer) GetVmOffsets(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVmOffsets not implemented")
}
func (*UnimplementedDependencyRPCServer) GetNewInput(ctx context.Context, req *Empty) (*Inputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewInput not implemented")
}
func (*UnimplementedDependencyRPCServer) SendDependencyInput(ctx context.Context, req *Input) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDependencyInput not implemented")
}
func (*UnimplementedDependencyRPCServer) GetCondition(ctx context.Context, req *Empty) (*Conditions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCondition not implemented")
}
func (*UnimplementedDependencyRPCServer) SendWriteAddress(ctx context.Context, req *WriteAddresses) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWriteAddress not implemented")
}
func (*UnimplementedDependencyRPCServer) Connect(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedDependencyRPCServer) SendNewInput(ctx context.Context, req *Input) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewInput not implemented")
}
func (*UnimplementedDependencyRPCServer) GetDependencyInput(ctx context.Context, req *Empty) (*Inputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependencyInput not implemented")
}
func (*UnimplementedDependencyRPCServer) ReturnDependencyInput(ctx context.Context, req *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnDependencyInput not implemented")
}
func (*UnimplementedDependencyRPCServer) SendLog(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLog not implemented")
}

func RegisterDependencyRPCServer(s *grpc.Server, srv DependencyRPCServer) {
	s.RegisterService(&_DependencyRPC_serviceDesc, srv)
}

func _DependencyRPC_GetVmOffsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetVmOffsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetVmOffsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetVmOffsets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetNewInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetNewInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetNewInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetNewInput(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendDependencyInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendDependencyInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendDependencyInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendDependencyInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetCondition(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendWriteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendWriteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendWriteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendWriteAddress(ctx, req.(*WriteAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).Connect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendNewInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendNewInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendNewInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendNewInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetDependencyInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetDependencyInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetDependencyInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetDependencyInput(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_ReturnDependencyInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).ReturnDependencyInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/ReturnDependencyInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).ReturnDependencyInput(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendLog(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DependencyRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dra.DependencyRPC",
	HandlerType: (*DependencyRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVmOffsets",
			Handler:    _DependencyRPC_GetVmOffsets_Handler,
		},
		{
			MethodName: "GetNewInput",
			Handler:    _DependencyRPC_GetNewInput_Handler,
		},
		{
			MethodName: "SendDependencyInput",
			Handler:    _DependencyRPC_SendDependencyInput_Handler,
		},
		{
			MethodName: "GetCondition",
			Handler:    _DependencyRPC_GetCondition_Handler,
		},
		{
			MethodName: "SendWriteAddress",
			Handler:    _DependencyRPC_SendWriteAddress_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _DependencyRPC_Connect_Handler,
		},
		{
			MethodName: "SendNewInput",
			Handler:    _DependencyRPC_SendNewInput_Handler,
		},
		{
			MethodName: "GetDependencyInput",
			Handler:    _DependencyRPC_GetDependencyInput_Handler,
		},
		{
			MethodName: "ReturnDependencyInput",
			Handler:    _DependencyRPC_ReturnDependencyInput_Handler,
		},
		{
			MethodName: "SendLog",
			Handler:    _DependencyRPC_SendLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DependencyRPC.proto",
}
