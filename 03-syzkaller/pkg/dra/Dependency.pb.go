// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: Dependency.proto

package dra

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UncoveredAddressKind int32

const (
	UncoveredAddressKind_UncoveredAddressOutside           UncoveredAddressKind = 0
	UncoveredAddressKind_UncoveredAddressInputRelated      UncoveredAddressKind = 1
	UncoveredAddressKind_UncoveredAddressDependencyRelated UncoveredAddressKind = 2
	UncoveredAddressKind_UncoveredAddressOther             UncoveredAddressKind = 3
)

// Enum value maps for UncoveredAddressKind.
var (
	UncoveredAddressKind_name = map[int32]string{
		0: "UncoveredAddressOutside",
		1: "UncoveredAddressInputRelated",
		2: "UncoveredAddressDependencyRelated",
		3: "UncoveredAddressOther",
	}
	UncoveredAddressKind_value = map[string]int32{
		"UncoveredAddressOutside":           0,
		"UncoveredAddressInputRelated":      1,
		"UncoveredAddressDependencyRelated": 2,
		"UncoveredAddressOther":             3,
	}
)

func (x UncoveredAddressKind) Enum() *UncoveredAddressKind {
	p := new(UncoveredAddressKind)
	*p = x
	return p
}

func (x UncoveredAddressKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UncoveredAddressKind) Descriptor() protoreflect.EnumDescriptor {
	return file_Dependency_proto_enumTypes[0].Descriptor()
}

func (UncoveredAddressKind) Type() protoreflect.EnumType {
	return &file_Dependency_proto_enumTypes[0]
}

func (x UncoveredAddressKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UncoveredAddressKind.Descriptor instead.
func (UncoveredAddressKind) EnumDescriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{0}
}

type FileOperationsKind int32

const (
	FileOperationsKind_default        FileOperationsKind = 0
	FileOperationsKind_init           FileOperationsKind = 1
	FileOperationsKind_llseek         FileOperationsKind = 2
	FileOperationsKind_read           FileOperationsKind = 3
	FileOperationsKind_write          FileOperationsKind = 4
	FileOperationsKind_poll           FileOperationsKind = 9
	FileOperationsKind_unlocked_ioctl FileOperationsKind = 10
	FileOperationsKind_mmap           FileOperationsKind = 12
	FileOperationsKind_open           FileOperationsKind = 14
	FileOperationsKind_release        FileOperationsKind = 16
)

// Enum value maps for FileOperationsKind.
var (
	FileOperationsKind_name = map[int32]string{
		0:  "default",
		1:  "init",
		2:  "llseek",
		3:  "read",
		4:  "write",
		9:  "poll",
		10: "unlocked_ioctl",
		12: "mmap",
		14: "open",
		16: "release",
	}
	FileOperationsKind_value = map[string]int32{
		"default":        0,
		"init":           1,
		"llseek":         2,
		"read":           3,
		"write":          4,
		"poll":           9,
		"unlocked_ioctl": 10,
		"mmap":           12,
		"open":           14,
		"release":        16,
	}
)

func (x FileOperationsKind) Enum() *FileOperationsKind {
	p := new(FileOperationsKind)
	*p = x
	return p
}

func (x FileOperationsKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileOperationsKind) Descriptor() protoreflect.EnumDescriptor {
	return file_Dependency_proto_enumTypes[1].Descriptor()
}

func (FileOperationsKind) Type() protoreflect.EnumType {
	return &file_Dependency_proto_enumTypes[1]
}

func (x FileOperationsKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileOperationsKind.Descriptor instead.
func (FileOperationsKind) EnumDescriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{1}
}

type WriteAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the address writes to global variable
	WriteAddress uint32 `protobuf:"varint,2,opt,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty"`
	//    map<uint32, Input> write_input = 4;
	//    map<uint32, Syscall> write_syscall = 5;
	//    repeated Input write_input = 4;
	//    repeated Syscall write_syscall = 5;
	Kind WriteStatementKind `protobuf:"varint,4,opt,name=kind,proto3,enum=dra.WriteStatementKind" json:"kind,omitempty"`
	// uncovered address,
	UncoveredAddress map[uint32]*WriteAddressAttributes `protobuf:"bytes,23,rep,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// file_operations name, file_operations_function index bits
	FileOperationsFunction map[string]uint32 `protobuf:"bytes,24,rep,name=file_operations_function,json=fileOperationsFunction,proto3" json:"file_operations_function,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// sig, index by bits
	Input map[string]uint32 `protobuf:"bytes,25,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// it is the data of uncovered address
	RunTimeDate *RunTimeData `protobuf:"bytes,11,opt,name=run_time_date,json=runTimeDate,proto3" json:"run_time_date,omitempty"`
}

func (x *WriteAddress) Reset() {
	*x = WriteAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAddress) ProtoMessage() {}

func (x *WriteAddress) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAddress.ProtoReflect.Descriptor instead.
func (*WriteAddress) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{0}
}

func (x *WriteAddress) GetWriteAddress() uint32 {
	if x != nil {
		return x.WriteAddress
	}
	return 0
}

func (x *WriteAddress) GetKind() WriteStatementKind {
	if x != nil {
		return x.Kind
	}
	return WriteStatementKind_WriteStatementConstant
}

func (x *WriteAddress) GetUncoveredAddress() map[uint32]*WriteAddressAttributes {
	if x != nil {
		return x.UncoveredAddress
	}
	return nil
}

func (x *WriteAddress) GetFileOperationsFunction() map[string]uint32 {
	if x != nil {
		return x.FileOperationsFunction
	}
	return nil
}

func (x *WriteAddress) GetInput() map[string]uint32 {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WriteAddress) GetRunTimeDate() *RunTimeData {
	if x != nil {
		return x.RunTimeDate
	}
	return nil
}

type WriteAddressAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the address writes to global variable
	WriteAddress uint32 `protobuf:"varint,2,opt,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty"`
	Repeat       uint32 `protobuf:"varint,7,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Prio         uint32 `protobuf:"varint,6,opt,name=prio,proto3" json:"prio,omitempty"`
}

func (x *WriteAddressAttributes) Reset() {
	*x = WriteAddressAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAddressAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAddressAttributes) ProtoMessage() {}

func (x *WriteAddressAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAddressAttributes.ProtoReflect.Descriptor instead.
func (*WriteAddressAttributes) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{1}
}

func (x *WriteAddressAttributes) GetWriteAddress() uint32 {
	if x != nil {
		return x.WriteAddress
	}
	return 0
}

func (x *WriteAddressAttributes) GetRepeat() uint32 {
	if x != nil {
		return x.Repeat
	}
	return 0
}

func (x *WriteAddressAttributes) GetPrio() uint32 {
	if x != nil {
		return x.Prio
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[uint32]TaskStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=dra.TaskStatus"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetStatus() map[uint32]TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UncoveredAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionAddress            uint32               `protobuf:"varint,1,opt,name=condition_address,json=conditionAddress,proto3" json:"condition_address,omitempty"`
	UncoveredAddress            uint32               `protobuf:"varint,2,opt,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty"`
	RightBranchAddress          []uint32             `protobuf:"varint,3,rep,packed,name=right_branch_address,json=rightBranchAddress,proto3" json:"right_branch_address,omitempty"`
	NumberArriveBasicblocks     uint32               `protobuf:"varint,4,opt,name=number_arrive_basicblocks,json=numberArriveBasicblocks,proto3" json:"number_arrive_basicblocks,omitempty"`
	Kind                        UncoveredAddressKind `protobuf:"varint,5,opt,name=kind,proto3,enum=dra.UncoveredAddressKind" json:"kind,omitempty"`
	NumberDominatorInstructions uint32               `protobuf:"varint,6,opt,name=number_dominator_instructions,json=numberDominatorInstructions,proto3" json:"number_dominator_instructions,omitempty"`
	// sig, index by bits
	Input              map[string]uint32                  `protobuf:"bytes,22,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WriteAddress       map[uint32]*WriteAddressAttributes `protobuf:"bytes,23,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count              uint32                             `protobuf:"varint,24,opt,name=count,proto3" json:"count,omitempty"`
	RunTimeDate        *RunTimeData                       `protobuf:"bytes,8,opt,name=run_time_date,json=runTimeDate,proto3" json:"run_time_date,omitempty"`
	InputStatus        map[string]*Status                 `protobuf:"bytes,31,rep,name=input_status,json=inputStatus,proto3" json:"input_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WriteAddressStatus map[uint32]TaskStatus              `protobuf:"bytes,32,rep,name=write_address_status,json=writeAddressStatus,proto3" json:"write_address_status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=dra.TaskStatus"`
	TasksCount         map[int32]uint32                   `protobuf:"bytes,33,rep,name=tasks_count,json=tasksCount,proto3" json:"tasks_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WriteCount         map[int32]uint32                   `protobuf:"bytes,34,rep,name=write_count,json=writeCount,proto3" json:"write_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UncoveredAddress) Reset() {
	*x = UncoveredAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncoveredAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncoveredAddress) ProtoMessage() {}

func (x *UncoveredAddress) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncoveredAddress.ProtoReflect.Descriptor instead.
func (*UncoveredAddress) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{3}
}

func (x *UncoveredAddress) GetConditionAddress() uint32 {
	if x != nil {
		return x.ConditionAddress
	}
	return 0
}

func (x *UncoveredAddress) GetUncoveredAddress() uint32 {
	if x != nil {
		return x.UncoveredAddress
	}
	return 0
}

func (x *UncoveredAddress) GetRightBranchAddress() []uint32 {
	if x != nil {
		return x.RightBranchAddress
	}
	return nil
}

func (x *UncoveredAddress) GetNumberArriveBasicblocks() uint32 {
	if x != nil {
		return x.NumberArriveBasicblocks
	}
	return 0
}

func (x *UncoveredAddress) GetKind() UncoveredAddressKind {
	if x != nil {
		return x.Kind
	}
	return UncoveredAddressKind_UncoveredAddressOutside
}

func (x *UncoveredAddress) GetNumberDominatorInstructions() uint32 {
	if x != nil {
		return x.NumberDominatorInstructions
	}
	return 0
}

func (x *UncoveredAddress) GetInput() map[string]uint32 {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UncoveredAddress) GetWriteAddress() map[uint32]*WriteAddressAttributes {
	if x != nil {
		return x.WriteAddress
	}
	return nil
}

func (x *UncoveredAddress) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UncoveredAddress) GetRunTimeDate() *RunTimeData {
	if x != nil {
		return x.RunTimeDate
	}
	return nil
}

func (x *UncoveredAddress) GetInputStatus() map[string]*Status {
	if x != nil {
		return x.InputStatus
	}
	return nil
}

func (x *UncoveredAddress) GetWriteAddressStatus() map[uint32]TaskStatus {
	if x != nil {
		return x.WriteAddressStatus
	}
	return nil
}

func (x *UncoveredAddress) GetTasksCount() map[int32]uint32 {
	if x != nil {
		return x.TasksCount
	}
	return nil
}

func (x *UncoveredAddress) GetWriteCount() map[int32]uint32 {
	if x != nil {
		return x.WriteCount
	}
	return nil
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input            *Input            `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	UncoveredAddress *UncoveredAddress `protobuf:"bytes,2,opt,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty"`
	WriteAddress     []*WriteAddress   `protobuf:"bytes,3,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{4}
}

func (x *Dependency) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Dependency) GetUncoveredAddress() *UncoveredAddress {
	if x != nil {
		return x.UncoveredAddress
	}
	return nil
}

func (x *Dependency) GetWriteAddress() []*WriteAddress {
	if x != nil {
		return x.WriteAddress
	}
	return nil
}

type FileOperationsFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileOperationsName string             `protobuf:"bytes,2,opt,name=file_operations_name,json=fileOperationsName,proto3" json:"file_operations_name,omitempty"`
	Kind               FileOperationsKind `protobuf:"varint,3,opt,name=kind,proto3,enum=dra.FileOperationsKind" json:"kind,omitempty"`
	Cmd                uint64             `protobuf:"varint,4,opt,name=cmd,proto3" json:"cmd,omitempty"`
	//    repeated Condition critical_condition = 4;
	//    map<uint32, Condition> critical_condition = 4;
	// it is the data of this syscall
	RunTimeDate *RunTimeData `protobuf:"bytes,5,opt,name=run_time_date,json=runTimeDate,proto3" json:"run_time_date,omitempty"`
	//    repeated WriteAddress write_address = 11;
	WriteAddress map[uint32]uint32 `protobuf:"bytes,11,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *FileOperationsFunction) Reset() {
	*x = FileOperationsFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOperationsFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOperationsFunction) ProtoMessage() {}

func (x *FileOperationsFunction) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOperationsFunction.ProtoReflect.Descriptor instead.
func (*FileOperationsFunction) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{5}
}

func (x *FileOperationsFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileOperationsFunction) GetFileOperationsName() string {
	if x != nil {
		return x.FileOperationsName
	}
	return ""
}

func (x *FileOperationsFunction) GetKind() FileOperationsKind {
	if x != nil {
		return x.Kind
	}
	return FileOperationsKind_default
}

func (x *FileOperationsFunction) GetCmd() uint64 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *FileOperationsFunction) GetRunTimeDate() *RunTimeData {
	if x != nil {
		return x.RunTimeDate
	}
	return nil
}

func (x *FileOperationsFunction) GetWriteAddress() map[uint32]uint32 {
	if x != nil {
		return x.WriteAddress
	}
	return nil
}

type FileOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//cmd or 0, function
	FileOperationsFunction map[int64]*FileOperationsFunction `protobuf:"bytes,3,rep,name=file_operations_function,json=fileOperationsFunction,proto3" json:"file_operations_function,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileOperations) Reset() {
	*x = FileOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOperations) ProtoMessage() {}

func (x *FileOperations) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOperations.ProtoReflect.Descriptor instead.
func (*FileOperations) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{6}
}

func (x *FileOperations) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileOperations) GetFileOperationsFunction() map[int64]*FileOperationsFunction {
	if x != nil {
		return x.FileOperationsFunction
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Addr map[string]string `protobuf:"bytes,2,rep,name=addr,proto3" json:"addr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{7}
}

func (x *Address) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Address) GetAddr() map[string]string {
	if x != nil {
		return x.Addr
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionAddress          uint64 `protobuf:"varint,1,opt,name=condition_address,json=conditionAddress,proto3" json:"condition_address,omitempty"`
	SyzkallerConditionAddress uint32 `protobuf:"varint,2,opt,name=syzkaller_condition_address,json=syzkallerConditionAddress,proto3" json:"syzkaller_condition_address,omitempty"`
	UncoveredAddress          uint64 `protobuf:"varint,3,opt,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty"`
	SyzkallerUncoveredAddress uint32 `protobuf:"varint,4,opt,name=syzkaller_uncovered_address,json=syzkallerUncoveredAddress,proto3" json:"syzkaller_uncovered_address,omitempty"`
	Idx                       uint32 `protobuf:"varint,5,opt,name=idx,proto3" json:"idx,omitempty"`
	Successor                 uint64 `protobuf:"varint,6,opt,name=successor,proto3" json:"successor,omitempty"`
	//    map<uint64, uint32> right_branch_address = 7;
	//    map<uint32, uint32> syzkaller_right_branch_address = 8;
	//    map<uint64, uint32> wrong_branch_address = 9;
	//    map<uint32, uint32> syzkaller_wrong_branch_address = 10;
	RightBranchAddress          []uint64 `protobuf:"varint,7,rep,packed,name=right_branch_address,json=rightBranchAddress,proto3" json:"right_branch_address,omitempty"`
	SyzkallerRightBranchAddress []uint32 `protobuf:"varint,8,rep,packed,name=syzkaller_right_branch_address,json=syzkallerRightBranchAddress,proto3" json:"syzkaller_right_branch_address,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{8}
}

func (x *Condition) GetConditionAddress() uint64 {
	if x != nil {
		return x.ConditionAddress
	}
	return 0
}

func (x *Condition) GetSyzkallerConditionAddress() uint32 {
	if x != nil {
		return x.SyzkallerConditionAddress
	}
	return 0
}

func (x *Condition) GetUncoveredAddress() uint64 {
	if x != nil {
		return x.UncoveredAddress
	}
	return 0
}

func (x *Condition) GetSyzkallerUncoveredAddress() uint32 {
	if x != nil {
		return x.SyzkallerUncoveredAddress
	}
	return 0
}

func (x *Condition) GetIdx() uint32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *Condition) GetSuccessor() uint64 {
	if x != nil {
		return x.Successor
	}
	return 0
}

func (x *Condition) GetRightBranchAddress() []uint64 {
	if x != nil {
		return x.RightBranchAddress
	}
	return nil
}

func (x *Condition) GetSyzkallerRightBranchAddress() []uint32 {
	if x != nil {
		return x.SyzkallerRightBranchAddress
	}
	return nil
}

type Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    map<uint64, Condition> condition = 10;
	Condition []*Condition `protobuf:"bytes,10,rep,name=condition,proto3" json:"condition,omitempty"`
}

func (x *Conditions) Reset() {
	*x = Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conditions) ProtoMessage() {}

func (x *Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conditions.ProtoReflect.Descriptor instead.
func (*Conditions) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{9}
}

func (x *Conditions) GetCondition() []*Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type WriteAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	//    map<uint32, WriteAddress> write_address = 4;
	WriteAddress []*WriteAddress `protobuf:"bytes,4,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty"`
}

func (x *WriteAddresses) Reset() {
	*x = WriteAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dependency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAddresses) ProtoMessage() {}

func (x *WriteAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_Dependency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAddresses.ProtoReflect.Descriptor instead.
func (*WriteAddresses) Descriptor() ([]byte, []int) {
	return file_Dependency_proto_rawDescGZIP(), []int{10}
}

func (x *WriteAddresses) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *WriteAddresses) GetWriteAddress() []*WriteAddress {
	if x != nil {
		return x.WriteAddress
	}
	return nil
}

var File_Dependency_proto protoreflect.FileDescriptor

var file_Dependency_proto_rawDesc = []byte{
	0x0a, 0x10, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x64, 0x72, 0x61, 0x1a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf0, 0x04, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x72, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x60, 0x0a, 0x15,
	0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49,
	0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x16, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72,
	0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x22, 0x85,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x0a, 0x0a, 0x10, 0x55, 0x6e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4c,
	0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x75, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0b,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c,
	0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x10,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x17, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xaa, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x42, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xea, 0x02, 0x0a,
	0x16, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x72, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x0e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x69, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x66, 0x0a, 0x1b, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x1a,
	0x37, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x79, 0x7a, 0x6b, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x79, 0x7a, 0x6b, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x79, 0x7a, 0x6b, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x6e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x79, 0x7a, 0x6b, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69,
	0x64, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x79, 0x7a, 0x6b, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x79, 0x7a, 0x6b,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x97, 0x01, 0x0a, 0x14,
	0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x0b,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x6c, 0x73, 0x65, 0x65, 0x6b, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x10, 0x09,
	0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6f, 0x63,
	0x74, 0x6c, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x6d, 0x61, 0x70, 0x10, 0x0c, 0x12, 0x08,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x10, 0x10, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x64, 0x72, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Dependency_proto_rawDescOnce sync.Once
	file_Dependency_proto_rawDescData = file_Dependency_proto_rawDesc
)

func file_Dependency_proto_rawDescGZIP() []byte {
	file_Dependency_proto_rawDescOnce.Do(func() {
		file_Dependency_proto_rawDescData = protoimpl.X.CompressGZIP(file_Dependency_proto_rawDescData)
	})
	return file_Dependency_proto_rawDescData
}

var file_Dependency_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_Dependency_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_Dependency_proto_goTypes = []interface{}{
	(UncoveredAddressKind)(0),      // 0: dra.UncoveredAddressKind
	(FileOperationsKind)(0),        // 1: dra.file_operations_kind
	(*WriteAddress)(nil),           // 2: dra.WriteAddress
	(*WriteAddressAttributes)(nil), // 3: dra.writeAddressAttributes
	(*Status)(nil),                 // 4: dra.Status
	(*UncoveredAddress)(nil),       // 5: dra.UncoveredAddress
	(*Dependency)(nil),             // 6: dra.Dependency
	(*FileOperationsFunction)(nil), // 7: dra.FileOperationsFunction
	(*FileOperations)(nil),         // 8: dra.FileOperations
	(*Address)(nil),                // 9: dra.address
	(*Condition)(nil),              // 10: dra.Condition
	(*Conditions)(nil),             // 11: dra.Conditions
	(*WriteAddresses)(nil),         // 12: dra.WriteAddresses
	nil,                            // 13: dra.WriteAddress.UncoveredAddressEntry
	nil,                            // 14: dra.WriteAddress.FileOperationsFunctionEntry
	nil,                            // 15: dra.WriteAddress.InputEntry
	nil,                            // 16: dra.Status.StatusEntry
	nil,                            // 17: dra.UncoveredAddress.InputEntry
	nil,                            // 18: dra.UncoveredAddress.WriteAddressEntry
	nil,                            // 19: dra.UncoveredAddress.InputStatusEntry
	nil,                            // 20: dra.UncoveredAddress.WriteAddressStatusEntry
	nil,                            // 21: dra.UncoveredAddress.TasksCountEntry
	nil,                            // 22: dra.UncoveredAddress.WriteCountEntry
	nil,                            // 23: dra.FileOperationsFunction.WriteAddressEntry
	nil,                            // 24: dra.FileOperations.FileOperationsFunctionEntry
	nil,                            // 25: dra.address.AddrEntry
	(WriteStatementKind)(0),        // 26: dra.WriteStatementKind
	(*RunTimeData)(nil),            // 27: dra.runTimeData
	(*Input)(nil),                  // 28: dra.Input
	(TaskStatus)(0),                // 29: dra.taskStatus
}
var file_Dependency_proto_depIdxs = []int32{
	26, // 0: dra.WriteAddress.kind:type_name -> dra.WriteStatementKind
	13, // 1: dra.WriteAddress.uncovered_address:type_name -> dra.WriteAddress.UncoveredAddressEntry
	14, // 2: dra.WriteAddress.file_operations_function:type_name -> dra.WriteAddress.FileOperationsFunctionEntry
	15, // 3: dra.WriteAddress.input:type_name -> dra.WriteAddress.InputEntry
	27, // 4: dra.WriteAddress.run_time_date:type_name -> dra.runTimeData
	16, // 5: dra.Status.status:type_name -> dra.Status.StatusEntry
	0,  // 6: dra.UncoveredAddress.kind:type_name -> dra.UncoveredAddressKind
	17, // 7: dra.UncoveredAddress.input:type_name -> dra.UncoveredAddress.InputEntry
	18, // 8: dra.UncoveredAddress.write_address:type_name -> dra.UncoveredAddress.WriteAddressEntry
	27, // 9: dra.UncoveredAddress.run_time_date:type_name -> dra.runTimeData
	19, // 10: dra.UncoveredAddress.input_status:type_name -> dra.UncoveredAddress.InputStatusEntry
	20, // 11: dra.UncoveredAddress.write_address_status:type_name -> dra.UncoveredAddress.WriteAddressStatusEntry
	21, // 12: dra.UncoveredAddress.tasks_count:type_name -> dra.UncoveredAddress.TasksCountEntry
	22, // 13: dra.UncoveredAddress.write_count:type_name -> dra.UncoveredAddress.WriteCountEntry
	28, // 14: dra.Dependency.input:type_name -> dra.Input
	5,  // 15: dra.Dependency.uncovered_address:type_name -> dra.UncoveredAddress
	2,  // 16: dra.Dependency.write_address:type_name -> dra.WriteAddress
	1,  // 17: dra.FileOperationsFunction.kind:type_name -> dra.file_operations_kind
	27, // 18: dra.FileOperationsFunction.run_time_date:type_name -> dra.runTimeData
	23, // 19: dra.FileOperationsFunction.write_address:type_name -> dra.FileOperationsFunction.WriteAddressEntry
	24, // 20: dra.FileOperations.file_operations_function:type_name -> dra.FileOperations.FileOperationsFunctionEntry
	25, // 21: dra.address.addr:type_name -> dra.address.AddrEntry
	10, // 22: dra.Conditions.condition:type_name -> dra.Condition
	10, // 23: dra.WriteAddresses.condition:type_name -> dra.Condition
	2,  // 24: dra.WriteAddresses.write_address:type_name -> dra.WriteAddress
	3,  // 25: dra.WriteAddress.UncoveredAddressEntry.value:type_name -> dra.writeAddressAttributes
	29, // 26: dra.Status.StatusEntry.value:type_name -> dra.taskStatus
	3,  // 27: dra.UncoveredAddress.WriteAddressEntry.value:type_name -> dra.writeAddressAttributes
	4,  // 28: dra.UncoveredAddress.InputStatusEntry.value:type_name -> dra.Status
	29, // 29: dra.UncoveredAddress.WriteAddressStatusEntry.value:type_name -> dra.taskStatus
	7,  // 30: dra.FileOperations.FileOperationsFunctionEntry.value:type_name -> dra.FileOperationsFunction
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_Dependency_proto_init() }
func file_Dependency_proto_init() {
	if File_Dependency_proto != nil {
		return
	}
	file_Input_proto_init()
	file_Task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Dependency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAddressAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncoveredAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOperationsFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Dependency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Dependency_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Dependency_proto_goTypes,
		DependencyIndexes: file_Dependency_proto_depIdxs,
		EnumInfos:         file_Dependency_proto_enumTypes,
		MessageInfos:      file_Dependency_proto_msgTypes,
	}.Build()
	File_Dependency_proto = out.File
	file_Dependency_proto_rawDesc = nil
	file_Dependency_proto_goTypes = nil
	file_Dependency_proto_depIdxs = nil
}
