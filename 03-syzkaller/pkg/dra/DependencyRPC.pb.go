// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.0
// source: DependencyRPC.proto

package dra

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input            map[string]*Input            `protobuf:"bytes,1,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UncoveredAddress map[uint32]*UncoveredAddress `protobuf:"bytes,4,rep,name=uncovered_address,json=uncoveredAddress,proto3" json:"uncovered_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WriteAddress     map[uint32]*WriteAddress     `protobuf:"bytes,5,rep,name=write_address,json=writeAddress,proto3" json:"write_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OtherInput       map[string]*Input            `protobuf:"bytes,11,rep,name=other_input,json=otherInput,proto3" json:"other_input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DataDependency) Reset() {
	*x = DataDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DependencyRPC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDependency) ProtoMessage() {}

func (x *DataDependency) ProtoReflect() protoreflect.Message {
	mi := &file_DependencyRPC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDependency.ProtoReflect.Descriptor instead.
func (*DataDependency) Descriptor() ([]byte, []int) {
	return file_DependencyRPC_proto_rawDescGZIP(), []int{0}
}

func (x *DataDependency) GetInput() map[string]*Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *DataDependency) GetUncoveredAddress() map[uint32]*UncoveredAddress {
	if x != nil {
		return x.UncoveredAddress
	}
	return nil
}

func (x *DataDependency) GetWriteAddress() map[uint32]*WriteAddress {
	if x != nil {
		return x.WriteAddress
	}
	return nil
}

func (x *DataDependency) GetOtherInput() map[string]*Input {
	if x != nil {
		return x.OtherInput
	}
	return nil
}

type DataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoveredAddress map[uint32]*UncoveredAddress `protobuf:"bytes,2,rep,name=covered_address,json=coveredAddress,proto3" json:"covered_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileOperations map[string]*FileOperations   `protobuf:"bytes,6,rep,name=file_operations,json=fileOperations,proto3" json:"file_operations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DataResult) Reset() {
	*x = DataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DependencyRPC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResult) ProtoMessage() {}

func (x *DataResult) ProtoReflect() protoreflect.Message {
	mi := &file_DependencyRPC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResult.ProtoReflect.Descriptor instead.
func (*DataResult) Descriptor() ([]byte, []int) {
	return file_DependencyRPC_proto_rawDescGZIP(), []int{1}
}

func (x *DataResult) GetCoveredAddress() map[uint32]*UncoveredAddress {
	if x != nil {
		return x.CoveredAddress
	}
	return nil
}

func (x *DataResult) GetFileOperations() map[string]*FileOperations {
	if x != nil {
		return x.FileOperations
	}
	return nil
}

type DataRunTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks      *Tasks `protobuf:"bytes,11,opt,name=tasks,proto3" json:"tasks,omitempty"`
	Return     *Tasks `protobuf:"bytes,12,opt,name=return,proto3" json:"return,omitempty"`
	HighTask   *Tasks `protobuf:"bytes,13,opt,name=high_task,json=highTask,proto3" json:"high_task,omitempty"`
	BootTask   *Tasks `protobuf:"bytes,20,opt,name=boot_task,json=bootTask,proto3" json:"boot_task,omitempty"`
	ReturnBoot *Tasks `protobuf:"bytes,21,opt,name=return_boot,json=returnBoot,proto3" json:"return_boot,omitempty"`
}

func (x *DataRunTime) Reset() {
	*x = DataRunTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DependencyRPC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRunTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRunTime) ProtoMessage() {}

func (x *DataRunTime) ProtoReflect() protoreflect.Message {
	mi := &file_DependencyRPC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRunTime.ProtoReflect.Descriptor instead.
func (*DataRunTime) Descriptor() ([]byte, []int) {
	return file_DependencyRPC_proto_rawDescGZIP(), []int{2}
}

func (x *DataRunTime) GetTasks() *Tasks {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *DataRunTime) GetReturn() *Tasks {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *DataRunTime) GetHighTask() *Tasks {
	if x != nil {
		return x.HighTask
	}
	return nil
}

func (x *DataRunTime) GetBootTask() *Tasks {
	if x != nil {
		return x.BootTask
	}
	return nil
}

func (x *DataRunTime) GetReturnBoot() *Tasks {
	if x != nil {
		return x.ReturnBoot
	}
	return nil
}

var File_DependencyRPC_proto protoreflect.FileDescriptor

var file_DependencyRPC_proto_rawDesc = []byte{
	0x0a, 0x13, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x50, 0x43, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x64, 0x72, 0x61, 0x1a, 0x0a, 0x42, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x04, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x75,
	0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x55, 0x6e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x44, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x15, 0x55,
	0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0f, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x72, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x58, 0x0a, 0x13, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x13, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x09, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64,
	0x72, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x08, 0x68, 0x69, 0x67, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x27, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x32, 0xe6, 0x06, 0x0a, 0x0d, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x50, 0x43, 0x12, 0x28, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x56, 0x4d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x64,
	0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x28, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0a,
	0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0e, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0f, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x0a, 0x2e, 0x64,
	0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0a, 0x2e, 0x64, 0x72,
	0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0a, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x28, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x0a, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x29, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x23, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x0a, 0x2e,
	0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x0e, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x23, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x12, 0x0a, 0x2e, 0x64,
	0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e, 0x64, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x64, 0x72, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_DependencyRPC_proto_rawDescOnce sync.Once
	file_DependencyRPC_proto_rawDescData = file_DependencyRPC_proto_rawDesc
)

func file_DependencyRPC_proto_rawDescGZIP() []byte {
	file_DependencyRPC_proto_rawDescOnce.Do(func() {
		file_DependencyRPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_DependencyRPC_proto_rawDescData)
	})
	return file_DependencyRPC_proto_rawDescData
}

var file_DependencyRPC_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_DependencyRPC_proto_goTypes = []interface{}{
	(*DataDependency)(nil),   // 0: dra.DataDependency
	(*DataResult)(nil),       // 1: dra.DataResult
	(*DataRunTime)(nil),      // 2: dra.DataRunTime
	nil,                      // 3: dra.DataDependency.InputEntry
	nil,                      // 4: dra.DataDependency.UncoveredAddressEntry
	nil,                      // 5: dra.DataDependency.WriteAddressEntry
	nil,                      // 6: dra.DataDependency.OtherInputEntry
	nil,                      // 7: dra.DataResult.CoveredAddressEntry
	nil,                      // 8: dra.DataResult.FileOperationsEntry
	(*Tasks)(nil),            // 9: dra.Tasks
	(*Input)(nil),            // 10: dra.Input
	(*UncoveredAddress)(nil), // 11: dra.UncoveredAddress
	(*WriteAddress)(nil),     // 12: dra.WriteAddress
	(*FileOperations)(nil),   // 13: dra.FileOperations
	(*Empty)(nil),            // 14: dra.Empty
	(*Dependency)(nil),       // 15: dra.Dependency
	(*WriteAddresses)(nil),   // 16: dra.WriteAddresses
	(*UnstableInput)(nil),    // 17: dra.UnstableInput
	(*Statistic)(nil),        // 18: dra.Statistic
	(*Inputs)(nil),           // 19: dra.Inputs
	(*Conditions)(nil),       // 20: dra.Conditions
}
var file_DependencyRPC_proto_depIdxs = []int32{
	3,  // 0: dra.DataDependency.input:type_name -> dra.DataDependency.InputEntry
	4,  // 1: dra.DataDependency.uncovered_address:type_name -> dra.DataDependency.UncoveredAddressEntry
	5,  // 2: dra.DataDependency.write_address:type_name -> dra.DataDependency.WriteAddressEntry
	6,  // 3: dra.DataDependency.other_input:type_name -> dra.DataDependency.OtherInputEntry
	7,  // 4: dra.DataResult.covered_address:type_name -> dra.DataResult.CoveredAddressEntry
	8,  // 5: dra.DataResult.file_operations:type_name -> dra.DataResult.FileOperationsEntry
	9,  // 6: dra.DataRunTime.tasks:type_name -> dra.Tasks
	9,  // 7: dra.DataRunTime.return:type_name -> dra.Tasks
	9,  // 8: dra.DataRunTime.high_task:type_name -> dra.Tasks
	9,  // 9: dra.DataRunTime.boot_task:type_name -> dra.Tasks
	9,  // 10: dra.DataRunTime.return_boot:type_name -> dra.Tasks
	10, // 11: dra.DataDependency.InputEntry.value:type_name -> dra.Input
	11, // 12: dra.DataDependency.UncoveredAddressEntry.value:type_name -> dra.UncoveredAddress
	12, // 13: dra.DataDependency.WriteAddressEntry.value:type_name -> dra.WriteAddress
	10, // 14: dra.DataDependency.OtherInputEntry.value:type_name -> dra.Input
	11, // 15: dra.DataResult.CoveredAddressEntry.value:type_name -> dra.UncoveredAddress
	13, // 16: dra.DataResult.FileOperationsEntry.value:type_name -> dra.FileOperations
	14, // 17: dra.DependencyRPC.GetVMOffsets:input_type -> dra.Empty
	14, // 18: dra.DependencyRPC.SendNumberBasicBlock:input_type -> dra.Empty
	14, // 19: dra.DependencyRPC.SendNumberBasicBlockCovered:input_type -> dra.Empty
	14, // 20: dra.DependencyRPC.GetNewInput:input_type -> dra.Empty
	15, // 21: dra.DependencyRPC.SendDependency:input_type -> dra.Dependency
	14, // 22: dra.DependencyRPC.GetCondition:input_type -> dra.Empty
	16, // 23: dra.DependencyRPC.SendWriteAddress:input_type -> dra.WriteAddresses
	14, // 24: dra.DependencyRPC.Connect:input_type -> dra.Empty
	14, // 25: dra.DependencyRPC.GetDataDependency:input_type -> dra.Empty
	10, // 26: dra.DependencyRPC.SendNewInput:input_type -> dra.Input
	14, // 27: dra.DependencyRPC.GetTasks:input_type -> dra.Empty
	14, // 28: dra.DependencyRPC.GetBootTasks:input_type -> dra.Empty
	9,  // 29: dra.DependencyRPC.ReturnTasks:input_type -> dra.Tasks
	10, // 30: dra.DependencyRPC.SendBootInput:input_type -> dra.Input
	17, // 31: dra.DependencyRPC.SendUnstableInput:input_type -> dra.UnstableInput
	14, // 32: dra.DependencyRPC.SendLog:input_type -> dra.Empty
	18, // 33: dra.DependencyRPC.sendStat:input_type -> dra.Statistic
	14, // 34: dra.DependencyRPC.GetNeed:input_type -> dra.Empty
	10, // 35: dra.DependencyRPC.SendNeedInput:input_type -> dra.Input
	14, // 36: dra.DependencyRPC.GetVMOffsets:output_type -> dra.Empty
	14, // 37: dra.DependencyRPC.SendNumberBasicBlock:output_type -> dra.Empty
	14, // 38: dra.DependencyRPC.SendNumberBasicBlockCovered:output_type -> dra.Empty
	19, // 39: dra.DependencyRPC.GetNewInput:output_type -> dra.Inputs
	14, // 40: dra.DependencyRPC.SendDependency:output_type -> dra.Empty
	20, // 41: dra.DependencyRPC.GetCondition:output_type -> dra.Conditions
	14, // 42: dra.DependencyRPC.SendWriteAddress:output_type -> dra.Empty
	14, // 43: dra.DependencyRPC.Connect:output_type -> dra.Empty
	0,  // 44: dra.DependencyRPC.GetDataDependency:output_type -> dra.DataDependency
	14, // 45: dra.DependencyRPC.SendNewInput:output_type -> dra.Empty
	9,  // 46: dra.DependencyRPC.GetTasks:output_type -> dra.Tasks
	9,  // 47: dra.DependencyRPC.GetBootTasks:output_type -> dra.Tasks
	14, // 48: dra.DependencyRPC.ReturnTasks:output_type -> dra.Empty
	14, // 49: dra.DependencyRPC.SendBootInput:output_type -> dra.Empty
	14, // 50: dra.DependencyRPC.SendUnstableInput:output_type -> dra.Empty
	14, // 51: dra.DependencyRPC.SendLog:output_type -> dra.Empty
	14, // 52: dra.DependencyRPC.sendStat:output_type -> dra.Empty
	14, // 53: dra.DependencyRPC.GetNeed:output_type -> dra.Empty
	14, // 54: dra.DependencyRPC.SendNeedInput:output_type -> dra.Empty
	36, // [36:55] is the sub-list for method output_type
	17, // [17:36] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_DependencyRPC_proto_init() }
func file_DependencyRPC_proto_init() {
	if File_DependencyRPC_proto != nil {
		return
	}
	file_Base_proto_init()
	file_Task_proto_init()
	file_Input_proto_init()
	file_Statistic_proto_init()
	file_Dependency_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DependencyRPC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DependencyRPC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DependencyRPC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRunTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DependencyRPC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_DependencyRPC_proto_goTypes,
		DependencyIndexes: file_DependencyRPC_proto_depIdxs,
		MessageInfos:      file_DependencyRPC_proto_msgTypes,
	}.Build()
	File_DependencyRPC_proto = out.File
	file_DependencyRPC_proto_rawDesc = nil
	file_DependencyRPC_proto_goTypes = nil
	file_DependencyRPC_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DependencyRPCClient is the client API for DependencyRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DependencyRPCClient interface {
	// DRA and syz-manager
	GetVMOffsets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendNumberBasicBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendNumberBasicBlockCovered(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetNewInput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Inputs, error)
	SendDependency(ctx context.Context, in *Dependency, opts ...grpc.CallOption) (*Empty, error)
	GetCondition(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Conditions, error)
	SendWriteAddress(ctx context.Context, in *WriteAddresses, opts ...grpc.CallOption) (*Empty, error)
	//syz-fuzzer and syz-manager
	Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetDataDependency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataDependency, error)
	SendNewInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error)
	GetTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error)
	GetBootTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error)
	ReturnTasks(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Empty, error)
	SendBootInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error)
	SendUnstableInput(ctx context.Context, in *UnstableInput, opts ...grpc.CallOption) (*Empty, error)
	SendLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendStat(ctx context.Context, in *Statistic, opts ...grpc.CallOption) (*Empty, error)
	GetNeed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendNeedInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error)
}

type dependencyRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyRPCClient(cc grpc.ClientConnInterface) DependencyRPCClient {
	return &dependencyRPCClient{cc}
}

func (c *dependencyRPCClient) GetVMOffsets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetVMOffsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendNumberBasicBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendNumberBasicBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendNumberBasicBlockCovered(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendNumberBasicBlockCovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetNewInput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Inputs, error) {
	out := new(Inputs)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetNewInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendDependency(ctx context.Context, in *Dependency, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetCondition(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Conditions, error) {
	out := new(Conditions)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendWriteAddress(ctx context.Context, in *WriteAddresses, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendWriteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetDataDependency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataDependency, error) {
	out := new(DataDependency)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetDataDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendNewInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendNewInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetBootTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetBootTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) ReturnTasks(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/ReturnTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendBootInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendBootInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendUnstableInput(ctx context.Context, in *UnstableInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendUnstableInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendStat(ctx context.Context, in *Statistic, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/sendStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) GetNeed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/GetNeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyRPCClient) SendNeedInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dra.DependencyRPC/SendNeedInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DependencyRPCServer is the server API for DependencyRPC service.
type DependencyRPCServer interface {
	// DRA and syz-manager
	GetVMOffsets(context.Context, *Empty) (*Empty, error)
	SendNumberBasicBlock(context.Context, *Empty) (*Empty, error)
	SendNumberBasicBlockCovered(context.Context, *Empty) (*Empty, error)
	GetNewInput(context.Context, *Empty) (*Inputs, error)
	SendDependency(context.Context, *Dependency) (*Empty, error)
	GetCondition(context.Context, *Empty) (*Conditions, error)
	SendWriteAddress(context.Context, *WriteAddresses) (*Empty, error)
	//syz-fuzzer and syz-manager
	Connect(context.Context, *Empty) (*Empty, error)
	GetDataDependency(context.Context, *Empty) (*DataDependency, error)
	SendNewInput(context.Context, *Input) (*Empty, error)
	GetTasks(context.Context, *Empty) (*Tasks, error)
	GetBootTasks(context.Context, *Empty) (*Tasks, error)
	ReturnTasks(context.Context, *Tasks) (*Empty, error)
	SendBootInput(context.Context, *Input) (*Empty, error)
	SendUnstableInput(context.Context, *UnstableInput) (*Empty, error)
	SendLog(context.Context, *Empty) (*Empty, error)
	SendStat(context.Context, *Statistic) (*Empty, error)
	GetNeed(context.Context, *Empty) (*Empty, error)
	SendNeedInput(context.Context, *Input) (*Empty, error)
}

// UnimplementedDependencyRPCServer can be embedded to have forward compatible implementations.
type UnimplementedDependencyRPCServer struct {
}

func (*UnimplementedDependencyRPCServer) GetVMOffsets(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMOffsets not implemented")
}
func (*UnimplementedDependencyRPCServer) SendNumberBasicBlock(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNumberBasicBlock not implemented")
}
func (*UnimplementedDependencyRPCServer) SendNumberBasicBlockCovered(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNumberBasicBlockCovered not implemented")
}
func (*UnimplementedDependencyRPCServer) GetNewInput(context.Context, *Empty) (*Inputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewInput not implemented")
}
func (*UnimplementedDependencyRPCServer) SendDependency(context.Context, *Dependency) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDependency not implemented")
}
func (*UnimplementedDependencyRPCServer) GetCondition(context.Context, *Empty) (*Conditions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCondition not implemented")
}
func (*UnimplementedDependencyRPCServer) SendWriteAddress(context.Context, *WriteAddresses) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWriteAddress not implemented")
}
func (*UnimplementedDependencyRPCServer) Connect(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedDependencyRPCServer) GetDataDependency(context.Context, *Empty) (*DataDependency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataDependency not implemented")
}
func (*UnimplementedDependencyRPCServer) SendNewInput(context.Context, *Input) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewInput not implemented")
}
func (*UnimplementedDependencyRPCServer) GetTasks(context.Context, *Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (*UnimplementedDependencyRPCServer) GetBootTasks(context.Context, *Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootTasks not implemented")
}
func (*UnimplementedDependencyRPCServer) ReturnTasks(context.Context, *Tasks) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnTasks not implemented")
}
func (*UnimplementedDependencyRPCServer) SendBootInput(context.Context, *Input) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBootInput not implemented")
}
func (*UnimplementedDependencyRPCServer) SendUnstableInput(context.Context, *UnstableInput) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUnstableInput not implemented")
}
func (*UnimplementedDependencyRPCServer) SendLog(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLog not implemented")
}
func (*UnimplementedDependencyRPCServer) SendStat(context.Context, *Statistic) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStat not implemented")
}
func (*UnimplementedDependencyRPCServer) GetNeed(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeed not implemented")
}
func (*UnimplementedDependencyRPCServer) SendNeedInput(context.Context, *Input) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNeedInput not implemented")
}

func RegisterDependencyRPCServer(s *grpc.Server, srv DependencyRPCServer) {
	s.RegisterService(&_DependencyRPC_serviceDesc, srv)
}

func _DependencyRPC_GetVMOffsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetVMOffsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetVMOffsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetVMOffsets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendNumberBasicBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendNumberBasicBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendNumberBasicBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendNumberBasicBlock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendNumberBasicBlockCovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendNumberBasicBlockCovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendNumberBasicBlockCovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendNumberBasicBlockCovered(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetNewInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetNewInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetNewInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetNewInput(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dependency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendDependency(ctx, req.(*Dependency))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetCondition(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendWriteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendWriteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendWriteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendWriteAddress(ctx, req.(*WriteAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).Connect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetDataDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetDataDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetDataDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetDataDependency(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendNewInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendNewInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendNewInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendNewInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetTasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetBootTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetBootTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetBootTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetBootTasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_ReturnTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).ReturnTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/ReturnTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).ReturnTasks(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendBootInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendBootInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendBootInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendBootInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendUnstableInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnstableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendUnstableInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendUnstableInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendUnstableInput(ctx, req.(*UnstableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendLog(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statistic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendStat(ctx, req.(*Statistic))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_GetNeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).GetNeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/GetNeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).GetNeed(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyRPC_SendNeedInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyRPCServer).SendNeedInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dra.DependencyRPC/SendNeedInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyRPCServer).SendNeedInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _DependencyRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dra.DependencyRPC",
	HandlerType: (*DependencyRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVMOffsets",
			Handler:    _DependencyRPC_GetVMOffsets_Handler,
		},
		{
			MethodName: "SendNumberBasicBlock",
			Handler:    _DependencyRPC_SendNumberBasicBlock_Handler,
		},
		{
			MethodName: "SendNumberBasicBlockCovered",
			Handler:    _DependencyRPC_SendNumberBasicBlockCovered_Handler,
		},
		{
			MethodName: "GetNewInput",
			Handler:    _DependencyRPC_GetNewInput_Handler,
		},
		{
			MethodName: "SendDependency",
			Handler:    _DependencyRPC_SendDependency_Handler,
		},
		{
			MethodName: "GetCondition",
			Handler:    _DependencyRPC_GetCondition_Handler,
		},
		{
			MethodName: "SendWriteAddress",
			Handler:    _DependencyRPC_SendWriteAddress_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _DependencyRPC_Connect_Handler,
		},
		{
			MethodName: "GetDataDependency",
			Handler:    _DependencyRPC_GetDataDependency_Handler,
		},
		{
			MethodName: "SendNewInput",
			Handler:    _DependencyRPC_SendNewInput_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _DependencyRPC_GetTasks_Handler,
		},
		{
			MethodName: "GetBootTasks",
			Handler:    _DependencyRPC_GetBootTasks_Handler,
		},
		{
			MethodName: "ReturnTasks",
			Handler:    _DependencyRPC_ReturnTasks_Handler,
		},
		{
			MethodName: "SendBootInput",
			Handler:    _DependencyRPC_SendBootInput_Handler,
		},
		{
			MethodName: "SendUnstableInput",
			Handler:    _DependencyRPC_SendUnstableInput_Handler,
		},
		{
			MethodName: "SendLog",
			Handler:    _DependencyRPC_SendLog_Handler,
		},
		{
			MethodName: "sendStat",
			Handler:    _DependencyRPC_SendStat_Handler,
		},
		{
			MethodName: "GetNeed",
			Handler:    _DependencyRPC_GetNeed_Handler,
		},
		{
			MethodName: "SendNeedInput",
			Handler:    _DependencyRPC_SendNeedInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DependencyRPC.proto",
}
