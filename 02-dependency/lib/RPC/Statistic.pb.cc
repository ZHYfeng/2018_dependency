// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Statistic.proto

#include "Statistic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Coverage_Statistic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coverage_CoverageEntry_DoNotUse_Statistic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Input_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Input_Input_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistic_Statistic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistics_StatEntry_DoNotUse_Statistic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_Statistic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsefulInput_Statistic_2eproto;
namespace dra {
class StatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistic> _instance;
} _Statistic_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Time> _instance;
} _Time_default_instance_;
class Coverage_CoverageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coverage_CoverageEntry_DoNotUse> _instance;
} _Coverage_CoverageEntry_DoNotUse_default_instance_;
class CoverageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coverage> _instance;
} _Coverage_default_instance_;
class UsefulInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsefulInput> _instance;
} _UsefulInput_default_instance_;
class Statistics_StatEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics_StatEntry_DoNotUse> _instance;
} _Statistics_StatEntry_DoNotUse_default_instance_;
class StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics> _instance;
} _Statistics_default_instance_;
}  // namespace dra
static void InitDefaultsscc_info_Coverage_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Coverage_default_instance_;
    new (ptr) ::dra::Coverage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Coverage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Coverage_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Coverage_Statistic_2eproto}, {
      &scc_info_Coverage_CoverageEntry_DoNotUse_Statistic_2eproto.base,
      &scc_info_Time_Statistic_2eproto.base,}};

static void InitDefaultsscc_info_Coverage_CoverageEntry_DoNotUse_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Coverage_CoverageEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Coverage_CoverageEntry_DoNotUse();
  }
  ::dra::Coverage_CoverageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coverage_CoverageEntry_DoNotUse_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coverage_CoverageEntry_DoNotUse_Statistic_2eproto}, {}};

static void InitDefaultsscc_info_Statistic_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Statistic_default_instance_;
    new (ptr) ::dra::Statistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Statistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistic_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Statistic_Statistic_2eproto}, {}};

static void InitDefaultsscc_info_Statistics_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Statistics_default_instance_;
    new (ptr) ::dra::Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Statistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Statistics_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Statistics_Statistic_2eproto}, {
      &scc_info_Coverage_Statistic_2eproto.base,
      &scc_info_Statistics_StatEntry_DoNotUse_Statistic_2eproto.base,
      &scc_info_UsefulInput_Statistic_2eproto.base,}};

static void InitDefaultsscc_info_Statistics_StatEntry_DoNotUse_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Statistics_StatEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Statistics_StatEntry_DoNotUse();
  }
  ::dra::Statistics_StatEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistics_StatEntry_DoNotUse_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Statistics_StatEntry_DoNotUse_Statistic_2eproto}, {
      &scc_info_Statistic_Statistic_2eproto.base,}};

static void InitDefaultsscc_info_Time_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Time_default_instance_;
    new (ptr) ::dra::Time();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Time::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Time_Statistic_2eproto}, {}};

static void InitDefaultsscc_info_UsefulInput_Statistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UsefulInput_default_instance_;
    new (ptr) ::dra::UsefulInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::UsefulInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsefulInput_Statistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsefulInput_Statistic_2eproto}, {
      &scc_info_Input_Input_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Statistic_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Statistic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Statistic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Statistic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, name_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, executenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, time_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, newtestcasenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, newaddressnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Time, time_),
  PROTOBUF_FIELD_OFFSET(::dra::Time, num_),
  PROTOBUF_FIELD_OFFSET(::dra::Time, executenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, coverage_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, input_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, time_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, num_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, new_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, signalnum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, basic_block_number_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, coverage_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, stat_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, useful_input_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dra::Statistic)},
  { 10, -1, sizeof(::dra::Time)},
  { 18, 25, sizeof(::dra::Coverage_CoverageEntry_DoNotUse)},
  { 27, -1, sizeof(::dra::Coverage)},
  { 34, -1, sizeof(::dra::UsefulInput)},
  { 43, 50, sizeof(::dra::Statistics_StatEntry_DoNotUse)},
  { 52, -1, sizeof(::dra::Statistics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Coverage_CoverageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Coverage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UsefulInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistics_StatEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistics_default_instance_),
};

const char descriptor_table_protodef_Statistic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Statistic.proto\022\003dra\032\013Input.proto\"|\n\tS"
  "tatistic\022\036\n\004name\030\001 \001(\0162\020.dra.FuzzingStat"
  "\022\022\n\nexecuteNum\030\013 \001(\004\022\014\n\004time\030\014 \001(\001\022\026\n\016ne"
  "wTestCaseNum\030\r \001(\004\022\025\n\rnewAddressNum\030\016 \001("
  "\004\"5\n\004Time\022\014\n\004time\030\001 \001(\001\022\013\n\003num\030\002 \001(\003\022\022\n\n"
  "executeNum\030\003 \001(\003\"\203\001\n\010Coverage\022-\n\010coverag"
  "e\030\001 \003(\0132\033.dra.Coverage.CoverageEntry\022\027\n\004"
  "time\030\002 \003(\0132\t.dra.Time\032/\n\rCoverageEntry\022\013"
  "\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"X\n\013Useful"
  "Input\022\031\n\005input\030\001 \001(\0132\n.dra.Input\022\014\n\004time"
  "\030\002 \001(\001\022\013\n\003num\030\003 \001(\004\022\023\n\013new_address\030\004 \003(\r"
  "\"\352\001\n\nStatistics\022\021\n\tsignalNum\030\001 \001(\004\022\032\n\022ba"
  "sic_block_number\030\n \001(\r\022\037\n\010coverage\030\010 \001(\013"
  "2\r.dra.Coverage\022\'\n\004stat\030\013 \003(\0132\031.dra.Stat"
  "istics.StatEntry\022&\n\014useful_input\030\014 \003(\0132\020"
  ".dra.UsefulInput\032;\n\tStatEntry\022\013\n\003key\030\001 \001"
  "(\005\022\035\n\005value\030\002 \001(\0132\016.dra.Statistic:\0028\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Statistic_2eproto_deps[1] = {
  &::descriptor_table_Input_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Statistic_2eproto_sccs[7] = {
  &scc_info_Coverage_Statistic_2eproto.base,
  &scc_info_Coverage_CoverageEntry_DoNotUse_Statistic_2eproto.base,
  &scc_info_Statistic_Statistic_2eproto.base,
  &scc_info_Statistics_Statistic_2eproto.base,
  &scc_info_Statistics_StatEntry_DoNotUse_Statistic_2eproto.base,
  &scc_info_Time_Statistic_2eproto.base,
  &scc_info_UsefulInput_Statistic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Statistic_2eproto_once;
static bool descriptor_table_Statistic_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Statistic_2eproto = {
  &descriptor_table_Statistic_2eproto_initialized, descriptor_table_protodef_Statistic_2eproto, "Statistic.proto", 685,
  &descriptor_table_Statistic_2eproto_once, descriptor_table_Statistic_2eproto_sccs, descriptor_table_Statistic_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_Statistic_2eproto::offsets,
  file_level_metadata_Statistic_2eproto, 7, file_level_enum_descriptors_Statistic_2eproto, file_level_service_descriptors_Statistic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Statistic_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Statistic_2eproto), true);
namespace dra {

// ===================================================================

void Statistic::InitAsDefaultInstance() {
}
class Statistic::_Internal {
 public:
};

Statistic::Statistic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&newaddressnum_) -
    reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
  // @@protoc_insertion_point(copy_constructor:dra.Statistic)
}

void Statistic::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newaddressnum_) -
      reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:dra.Statistic)
  SharedDtor();
}

void Statistic::SharedDtor() {
}

void Statistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistic& Statistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistic_Statistic_2eproto.base);
  return *internal_default_instance();
}


void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newaddressnum_) -
      reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
  _internal_metadata_.Clear();
}

const char* Statistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.FuzzingStat name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_name(static_cast<::dra::FuzzingStat>(val));
        } else goto handle_unusual;
        continue;
      // uint64 executeNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          executenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 newTestCaseNum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          newtestcasenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 newAddressNum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          newaddressnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.FuzzingStat name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // uint64 executeNum = 11;
  if (this->executenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_executenum(), target);
  }

  // double time = 12;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_time(), target);
  }

  // uint64 newTestCaseNum = 13;
  if (this->newtestcasenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_newtestcasenum(), target);
  }

  // uint64 newAddressNum = 14;
  if (this->newaddressnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_newaddressnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Statistic)
  return target;
}

size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Statistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dra.FuzzingStat name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
  }

  // uint64 executeNum = 11;
  if (this->executenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_executenum());
  }

  // double time = 12;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 newTestCaseNum = 13;
  if (this->newtestcasenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newtestcasenum());
  }

  // uint64 newAddressNum = 14;
  if (this->newaddressnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newaddressnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Statistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Statistic)
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.executenum() != 0) {
    _internal_set_executenum(from._internal_executenum());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.newtestcasenum() != 0) {
    _internal_set_newtestcasenum(from._internal_newtestcasenum());
  }
  if (from.newaddressnum() != 0) {
    _internal_set_newaddressnum(from._internal_newaddressnum());
  }
}

void Statistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(name_, other->name_);
  swap(executenum_, other->executenum_);
  swap(time_, other->time_);
  swap(newtestcasenum_, other->newtestcasenum_);
  swap(newaddressnum_, other->newaddressnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Time::InitAsDefaultInstance() {
}
class Time::_Internal {
 public:
};

Time::Time()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&executenum_) -
    reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
  // @@protoc_insertion_point(copy_constructor:dra.Time)
}

void Time::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&executenum_) -
      reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:dra.Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time& Time::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Time_Statistic_2eproto.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&executenum_) -
      reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
  _internal_metadata_.Clear();
}

const char* Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 executeNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          executenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // int64 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  // int64 executeNum = 3;
  if (this->executenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_executenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Time)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num());
  }

  // int64 executeNum = 3;
  if (this->executenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_executenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Time)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.executenum() != 0) {
    _internal_set_executenum(from._internal_executenum());
  }
}

void Time::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(num_, other->num_);
  swap(executenum_, other->executenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse() {}
Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Coverage_CoverageEntry_DoNotUse::MergeFrom(const Coverage_CoverageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Coverage_CoverageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Coverage_CoverageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Coverage::InitAsDefaultInstance() {
}
class Coverage::_Internal {
 public:
};

Coverage::Coverage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Coverage)
}
Coverage::Coverage(const Coverage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      time_(from.time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coverage_.MergeFrom(from.coverage_);
  // @@protoc_insertion_point(copy_constructor:dra.Coverage)
}

void Coverage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Coverage_Statistic_2eproto.base);
}

Coverage::~Coverage() {
  // @@protoc_insertion_point(destructor:dra.Coverage)
  SharedDtor();
}

void Coverage::SharedDtor() {
}

void Coverage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coverage& Coverage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coverage_Statistic_2eproto.base);
  return *internal_default_instance();
}


void Coverage::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Coverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coverage_.Clear();
  time_.Clear();
  _internal_metadata_.Clear();
}

const char* Coverage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, uint32> coverage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&coverage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dra.Time time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coverage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Coverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> coverage = 1;
  if (!this->_internal_coverage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_coverage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_coverage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_coverage().begin();
          it != this->_internal_coverage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Coverage_CoverageEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_coverage().begin();
          it != this->_internal_coverage().end(); ++it) {
        target = Coverage_CoverageEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .dra.Time time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Coverage)
  return target;
}

size_t Coverage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Coverage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> coverage = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coverage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_coverage().begin();
      it != this->_internal_coverage().end(); ++it) {
    total_size += Coverage_CoverageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.Time time = 2;
  total_size += 1UL * this->_internal_time_size();
  for (const auto& msg : this->time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coverage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Coverage)
  GOOGLE_DCHECK_NE(&from, this);
  const Coverage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coverage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Coverage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Coverage)
    MergeFrom(*source);
  }
}

void Coverage::MergeFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Coverage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coverage_.MergeFrom(from.coverage_);
  time_.MergeFrom(from.time_);
}

void Coverage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Coverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coverage::CopyFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Coverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coverage::IsInitialized() const {
  return true;
}

void Coverage::InternalSwap(Coverage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coverage_.Swap(&other->coverage_);
  time_.InternalSwap(&other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coverage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsefulInput::InitAsDefaultInstance() {
  ::dra::_UsefulInput_default_instance_._instance.get_mutable()->input_ = const_cast< ::dra::Input*>(
      ::dra::Input::internal_default_instance());
}
class UsefulInput::_Internal {
 public:
  static const ::dra::Input& input(const UsefulInput* msg);
};

const ::dra::Input&
UsefulInput::_Internal::input(const UsefulInput* msg) {
  return *msg->input_;
}
void UsefulInput::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
UsefulInput::UsefulInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.UsefulInput)
}
UsefulInput::UsefulInput(const UsefulInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      new_address_(from.new_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:dra.UsefulInput)
}

void UsefulInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsefulInput_Statistic_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&input_)) + sizeof(num_));
}

UsefulInput::~UsefulInput() {
  // @@protoc_insertion_point(destructor:dra.UsefulInput)
  SharedDtor();
}

void UsefulInput::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
}

void UsefulInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsefulInput& UsefulInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsefulInput_Statistic_2eproto.base);
  return *internal_default_instance();
}


void UsefulInput::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UsefulInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&time_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* UsefulInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 new_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_new_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_new_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsefulInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UsefulInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // double time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time(), target);
  }

  // uint64 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num(), target);
  }

  // repeated uint32 new_address = 4;
  {
    int byte_size = _new_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_new_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UsefulInput)
  return target;
}

size_t UsefulInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UsefulInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 new_address = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->new_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _new_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .dra.Input input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // double time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsefulInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.UsefulInput)
  GOOGLE_DCHECK_NE(&from, this);
  const UsefulInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsefulInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.UsefulInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.UsefulInput)
    MergeFrom(*source);
  }
}

void UsefulInput::MergeFrom(const UsefulInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UsefulInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_address_.MergeFrom(from.new_address_);
  if (from.has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void UsefulInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.UsefulInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsefulInput::CopyFrom(const UsefulInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UsefulInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsefulInput::IsInitialized() const {
  return true;
}

void UsefulInput::InternalSwap(UsefulInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_address_.InternalSwap(&other->new_address_);
  swap(input_, other->input_);
  swap(time_, other->time_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsefulInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse() {}
Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Statistics_StatEntry_DoNotUse::MergeFrom(const Statistics_StatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Statistics_StatEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Statistics_StatEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Statistics::InitAsDefaultInstance() {
  ::dra::_Statistics_default_instance_._instance.get_mutable()->coverage_ = const_cast< ::dra::Coverage*>(
      ::dra::Coverage::internal_default_instance());
}
class Statistics::_Internal {
 public:
  static const ::dra::Coverage& coverage(const Statistics* msg);
};

const ::dra::Coverage&
Statistics::_Internal::coverage(const Statistics* msg) {
  return *msg->coverage_;
}
Statistics::Statistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      useful_input_(from.useful_input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_.MergeFrom(from.stat_);
  if (from._internal_has_coverage()) {
    coverage_ = new ::dra::Coverage(*from.coverage_);
  } else {
    coverage_ = nullptr;
  }
  ::memcpy(&signalnum_, &from.signalnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&basic_block_number_) -
    reinterpret_cast<char*>(&signalnum_)) + sizeof(basic_block_number_));
  // @@protoc_insertion_point(copy_constructor:dra.Statistics)
}

void Statistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Statistics_Statistic_2eproto.base);
  ::memset(&coverage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basic_block_number_) -
      reinterpret_cast<char*>(&coverage_)) + sizeof(basic_block_number_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:dra.Statistics)
  SharedDtor();
}

void Statistics::SharedDtor() {
  if (this != internal_default_instance()) delete coverage_;
}

void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistics& Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistics_Statistic_2eproto.base);
  return *internal_default_instance();
}


void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_.Clear();
  useful_input_.Clear();
  if (GetArenaNoVirtual() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
  ::memset(&signalnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basic_block_number_) -
      reinterpret_cast<char*>(&signalnum_)) + sizeof(basic_block_number_));
  _internal_metadata_.Clear();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 signalNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          signalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.Coverage coverage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 basic_block_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          basic_block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .dra.Statistic> stat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stat_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dra.UsefulInput useful_input = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_useful_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 signalNum = 1;
  if (this->signalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalnum(), target);
  }

  // .dra.Coverage coverage = 8;
  if (this->has_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::coverage(this), target, stream);
  }

  // uint32 basic_block_number = 10;
  if (this->basic_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_basic_block_number(), target);
  }

  // map<int32, .dra.Statistic> stat = 11;
  if (!this->_internal_stat().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_stat().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_stat().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
          it = this->_internal_stat().begin();
          it != this->_internal_stat().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Statistics_StatEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
          it = this->_internal_stat().begin();
          it != this->_internal_stat().end(); ++it) {
        target = Statistics_StatEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .dra.UsefulInput useful_input = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_useful_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_useful_input(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .dra.Statistic> stat = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stat_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
      it = this->_internal_stat().begin();
      it != this->_internal_stat().end(); ++it) {
    total_size += Statistics_StatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.UsefulInput useful_input = 12;
  total_size += 1UL * this->_internal_useful_input_size();
  for (const auto& msg : this->useful_input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Coverage coverage = 8;
  if (this->has_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coverage_);
  }

  // uint64 signalNum = 1;
  if (this->signalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_signalnum());
  }

  // uint32 basic_block_number = 10;
  if (this->basic_block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_basic_block_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_.MergeFrom(from.stat_);
  useful_input_.MergeFrom(from.useful_input_);
  if (from.has_coverage()) {
    _internal_mutable_coverage()->::dra::Coverage::MergeFrom(from._internal_coverage());
  }
  if (from.signalnum() != 0) {
    _internal_set_signalnum(from._internal_signalnum());
  }
  if (from.basic_block_number() != 0) {
    _internal_set_basic_block_number(from._internal_basic_block_number());
  }
}

void Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_.Swap(&other->stat_);
  useful_input_.InternalSwap(&other->useful_input_);
  swap(coverage_, other->coverage_);
  swap(signalnum_, other->signalnum_);
  swap(basic_block_number_, other->basic_block_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dra::Statistic* Arena::CreateMaybeMessage< ::dra::Statistic >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Time* Arena::CreateMaybeMessage< ::dra::Time >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Coverage_CoverageEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Coverage_CoverageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Coverage_CoverageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Coverage* Arena::CreateMaybeMessage< ::dra::Coverage >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Coverage >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UsefulInput* Arena::CreateMaybeMessage< ::dra::UsefulInput >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UsefulInput >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistics_StatEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Statistics_StatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Statistics_StatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistics* Arena::CreateMaybeMessage< ::dra::Statistics >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Statistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
