// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Statistic.proto

#include "Statistic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dra {
constexpr Statistic::Statistic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(0)

  , executenum_(uint64_t{0u})
  , time_(0)
  , newtestcasenum_(uint64_t{0u})
  , newaddressnum_(uint64_t{0u}){}
struct StatisticDefaultTypeInternal {
  constexpr StatisticDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticDefaultTypeInternal() {}
  union {
    Statistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticDefaultTypeInternal _Statistic_default_instance_;
constexpr Time::Time(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , num_(int64_t{0})
  , executenum_(int64_t{0}){}
struct TimeDefaultTypeInternal {
  constexpr TimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeDefaultTypeInternal() {}
  union {
    Time _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeDefaultTypeInternal _Time_default_instance_;
constexpr Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Coverage_CoverageEntry_DoNotUseDefaultTypeInternal {
  constexpr Coverage_CoverageEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Coverage_CoverageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Coverage_CoverageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Coverage_CoverageEntry_DoNotUseDefaultTypeInternal _Coverage_CoverageEntry_DoNotUse_default_instance_;
constexpr Coverage::Coverage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coverage_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , time_(){}
struct CoverageDefaultTypeInternal {
  constexpr CoverageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoverageDefaultTypeInternal() {}
  union {
    Coverage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoverageDefaultTypeInternal _Coverage_default_instance_;
constexpr UsefulInput::UsefulInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_address_()
  , _new_address_cached_byte_size_(0)
  , input_(nullptr)
  , time_(0)
  , num_(uint64_t{0u}){}
struct UsefulInputDefaultTypeInternal {
  constexpr UsefulInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsefulInputDefaultTypeInternal() {}
  union {
    UsefulInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsefulInputDefaultTypeInternal _UsefulInput_default_instance_;
constexpr Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Statistics_StatEntry_DoNotUseDefaultTypeInternal {
  constexpr Statistics_StatEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Statistics_StatEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Statistics_StatEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Statistics_StatEntry_DoNotUseDefaultTypeInternal _Statistics_StatEntry_DoNotUse_default_instance_;
constexpr Statistics::Statistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , useful_input_()
  , coverage_(nullptr)
  , signalnum_(uint64_t{0u})
  , number_basic_block_(0u)
  , number_basic_block_real_(0u)
  , number_basic_block_covered_(0u)
  , number_basic_block_uncovered_(0u){}
struct StatisticsDefaultTypeInternal {
  constexpr StatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticsDefaultTypeInternal() {}
  union {
    Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace dra
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Statistic_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Statistic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Statistic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Statistic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, name_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, executenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, time_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, newtestcasenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, newaddressnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Time, time_),
  PROTOBUF_FIELD_OFFSET(::dra::Time, num_),
  PROTOBUF_FIELD_OFFSET(::dra::Time, executenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, coverage_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, input_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, time_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, num_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, new_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, signalnum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, number_basic_block_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, number_basic_block_real_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, number_basic_block_covered_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, number_basic_block_uncovered_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, coverage_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, stat_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, useful_input_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dra::Statistic)},
  { 11, -1, -1, sizeof(::dra::Time)},
  { 20, 28, -1, sizeof(::dra::Coverage_CoverageEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::dra::Coverage)},
  { 38, -1, -1, sizeof(::dra::UsefulInput)},
  { 48, 56, -1, sizeof(::dra::Statistics_StatEntry_DoNotUse)},
  { 58, -1, -1, sizeof(::dra::Statistics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Coverage_CoverageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Coverage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UsefulInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistics_StatEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistics_default_instance_),
};

const char descriptor_table_protodef_Statistic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Statistic.proto\022\003dra\032\013Input.proto\"|\n\tS"
  "tatistic\022\036\n\004name\030\001 \001(\0162\020.dra.FuzzingStat"
  "\022\022\n\nexecuteNum\030\013 \001(\004\022\014\n\004time\030\014 \001(\001\022\026\n\016ne"
  "wTestCaseNum\030\r \001(\004\022\025\n\rnewAddressNum\030\016 \001("
  "\004\"5\n\004Time\022\014\n\004time\030\001 \001(\001\022\013\n\003num\030\002 \001(\003\022\022\n\n"
  "executeNum\030\003 \001(\003\"\203\001\n\010Coverage\022-\n\010coverag"
  "e\030\001 \003(\0132\033.dra.Coverage.CoverageEntry\022\027\n\004"
  "time\030\002 \003(\0132\t.dra.Time\032/\n\rCoverageEntry\022\013"
  "\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"X\n\013Useful"
  "Input\022\031\n\005input\030\001 \001(\0132\n.dra.Input\022\014\n\004time"
  "\030\002 \001(\001\022\013\n\003num\030\003 \001(\004\022\023\n\013new_address\030\004 \003(\r"
  "\"\325\002\n\nStatistics\022\021\n\tsignalNum\030\001 \001(\004\022\032\n\022nu"
  "mber_basic_block\030\003 \001(\r\022\037\n\027number_basic_b"
  "lock_real\030\004 \001(\r\022\"\n\032number_basic_block_co"
  "vered\030\005 \001(\r\022$\n\034number_basic_block_uncove"
  "red\030\006 \001(\r\022\037\n\010coverage\030\010 \001(\0132\r.dra.Covera"
  "ge\022\'\n\004stat\030\013 \003(\0132\031.dra.Statistics.StatEn"
  "try\022&\n\014useful_input\030\014 \003(\0132\020.dra.UsefulIn"
  "put\032;\n\tStatEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030\002"
  " \001(\0132\016.dra.Statistic:\0028\001B\007Z\005.;drab\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Statistic_2eproto_deps[1] = {
  &::descriptor_table_Input_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Statistic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Statistic_2eproto = {
  false, false, 801, descriptor_table_protodef_Statistic_2eproto, "Statistic.proto", 
  &descriptor_table_Statistic_2eproto_once, descriptor_table_Statistic_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_Statistic_2eproto::offsets,
  file_level_metadata_Statistic_2eproto, file_level_enum_descriptors_Statistic_2eproto, file_level_service_descriptors_Statistic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Statistic_2eproto_getter() {
  return &descriptor_table_Statistic_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Statistic_2eproto(&descriptor_table_Statistic_2eproto);
namespace dra {

// ===================================================================

class Statistic::_Internal {
 public:
};

Statistic::Statistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&newaddressnum_) -
    reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
  // @@protoc_insertion_point(copy_constructor:dra.Statistic)
}

void Statistic::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newaddressnum_) -
    reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:dra.Statistic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Statistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Statistic::ArenaDtor(void* object) {
  Statistic* _this = reinterpret_cast< Statistic* >(object);
  (void)_this;
}
void Statistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Statistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newaddressnum_) -
      reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dra.FuzzingStat name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_name(static_cast<::dra::FuzzingStat>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 executeNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          executenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 newTestCaseNum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          newtestcasenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 newAddressNum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          newaddressnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.FuzzingStat name = 1;
  if (this->_internal_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // uint64 executeNum = 11;
  if (this->_internal_executenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_executenum(), target);
  }

  // double time = 12;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_time(), target);
  }

  // uint64 newTestCaseNum = 13;
  if (this->_internal_newtestcasenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_newtestcasenum(), target);
  }

  // uint64 newAddressNum = 14;
  if (this->_internal_newaddressnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_newaddressnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Statistic)
  return target;
}

size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Statistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dra.FuzzingStat name = 1;
  if (this->_internal_name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
  }

  // uint64 executeNum = 11;
  if (this->_internal_executenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_executenum());
  }

  // double time = 12;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 newTestCaseNum = 13;
  if (this->_internal_newtestcasenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_newtestcasenum());
  }

  // uint64 newAddressNum = 14;
  if (this->_internal_newaddressnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_newaddressnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Statistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistic::GetClassData() const { return &_class_data_; }

void Statistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Statistic *>(to)->MergeFrom(
      static_cast<const Statistic &>(from));
}


void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_executenum() != 0) {
    _internal_set_executenum(from._internal_executenum());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_newtestcasenum() != 0) {
    _internal_set_newtestcasenum(from._internal_newtestcasenum());
  }
  if (from._internal_newaddressnum() != 0) {
    _internal_set_newaddressnum(from._internal_newaddressnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistic, newaddressnum_)
      + sizeof(Statistic::newaddressnum_)
      - PROTOBUF_FIELD_OFFSET(Statistic, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[0]);
}

// ===================================================================

class Time::_Internal {
 public:
};

Time::Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&executenum_) -
    reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
  // @@protoc_insertion_point(copy_constructor:dra.Time)
}

void Time::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&executenum_) -
    reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:dra.Time)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Time::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Time::ArenaDtor(void* object) {
  Time* _this = reinterpret_cast< Time* >(object);
  (void)_this;
}
void Time::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&executenum_) -
      reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 executeNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          executenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  // int64 executeNum = 3;
  if (this->_internal_executenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_executenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Time)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  // int64 executeNum = 3;
  if (this->_internal_executenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_executenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Time::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Time::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Time::GetClassData() const { return &_class_data_; }

void Time::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Time *>(to)->MergeFrom(
      static_cast<const Time &>(from));
}


void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Time)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from._internal_executenum() != 0) {
    _internal_set_executenum(from._internal_executenum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Time, executenum_)
      + sizeof(Time::executenum_)
      - PROTOBUF_FIELD_OFFSET(Time, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[1]);
}

// ===================================================================

Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse() {}
Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Coverage_CoverageEntry_DoNotUse::MergeFrom(const Coverage_CoverageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Coverage_CoverageEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[2]);
}

// ===================================================================

class Coverage::_Internal {
 public:
};

Coverage::Coverage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coverage_(arena),
  time_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Coverage)
}
Coverage::Coverage(const Coverage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      time_(from.time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coverage_.MergeFrom(from.coverage_);
  // @@protoc_insertion_point(copy_constructor:dra.Coverage)
}

void Coverage::SharedCtor() {
}

Coverage::~Coverage() {
  // @@protoc_insertion_point(destructor:dra.Coverage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Coverage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coverage::ArenaDtor(void* object) {
  Coverage* _this = reinterpret_cast< Coverage* >(object);
  (void)_this;
  _this->coverage_. ~MapField();
}
inline void Coverage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Coverage::ArenaDtor);
  }
}
void Coverage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coverage::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Coverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coverage_.Clear();
  time_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coverage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, uint32> coverage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&coverage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dra.Time time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coverage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Coverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> coverage = 1;
  if (!this->_internal_coverage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_coverage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_coverage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_coverage().begin();
          it != this->_internal_coverage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Coverage_CoverageEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_coverage().begin();
          it != this->_internal_coverage().end(); ++it) {
        target = Coverage_CoverageEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .dra.Time time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Coverage)
  return target;
}

size_t Coverage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Coverage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> coverage = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coverage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_coverage().begin();
      it != this->_internal_coverage().end(); ++it) {
    total_size += Coverage_CoverageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.Time time = 2;
  total_size += 1UL * this->_internal_time_size();
  for (const auto& msg : this->time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coverage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Coverage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coverage::GetClassData() const { return &_class_data_; }

void Coverage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Coverage *>(to)->MergeFrom(
      static_cast<const Coverage &>(from));
}


void Coverage::MergeFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Coverage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coverage_.MergeFrom(from.coverage_);
  time_.MergeFrom(from.time_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coverage::CopyFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Coverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coverage::IsInitialized() const {
  return true;
}

void Coverage::InternalSwap(Coverage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  coverage_.InternalSwap(&other->coverage_);
  time_.InternalSwap(&other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coverage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[3]);
}

// ===================================================================

class UsefulInput::_Internal {
 public:
  static const ::dra::Input& input(const UsefulInput* msg);
};

const ::dra::Input&
UsefulInput::_Internal::input(const UsefulInput* msg) {
  return *msg->input_;
}
void UsefulInput::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
UsefulInput::UsefulInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  new_address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.UsefulInput)
}
UsefulInput::UsefulInput(const UsefulInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      new_address_(from.new_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:dra.UsefulInput)
}

void UsefulInput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&input_)) + sizeof(num_));
}

UsefulInput::~UsefulInput() {
  // @@protoc_insertion_point(destructor:dra.UsefulInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UsefulInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
}

void UsefulInput::ArenaDtor(void* object) {
  UsefulInput* _this = reinterpret_cast< UsefulInput* >(object);
  (void)_this;
}
void UsefulInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsefulInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsefulInput::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UsefulInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_address_.Clear();
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&time_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsefulInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 new_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_new_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_new_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsefulInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UsefulInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // double time = 2;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time(), target);
  }

  // uint64 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num(), target);
  }

  // repeated uint32 new_address = 4;
  {
    int byte_size = _new_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_new_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UsefulInput)
  return target;
}

size_t UsefulInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UsefulInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 new_address = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->new_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _new_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .dra.Input input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // double time = 2;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsefulInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsefulInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsefulInput::GetClassData() const { return &_class_data_; }

void UsefulInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UsefulInput *>(to)->MergeFrom(
      static_cast<const UsefulInput &>(from));
}


void UsefulInput::MergeFrom(const UsefulInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UsefulInput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_address_.MergeFrom(from.new_address_);
  if (from._internal_has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsefulInput::CopyFrom(const UsefulInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UsefulInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsefulInput::IsInitialized() const {
  return true;
}

void UsefulInput::InternalSwap(UsefulInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  new_address_.InternalSwap(&other->new_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsefulInput, num_)
      + sizeof(UsefulInput::num_)
      - PROTOBUF_FIELD_OFFSET(UsefulInput, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UsefulInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[4]);
}

// ===================================================================

Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse() {}
Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Statistics_StatEntry_DoNotUse::MergeFrom(const Statistics_StatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Statistics_StatEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[5]);
}

// ===================================================================

class Statistics::_Internal {
 public:
  static const ::dra::Coverage& coverage(const Statistics* msg);
};

const ::dra::Coverage&
Statistics::_Internal::coverage(const Statistics* msg) {
  return *msg->coverage_;
}
Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_(arena),
  useful_input_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      useful_input_(from.useful_input_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stat_.MergeFrom(from.stat_);
  if (from._internal_has_coverage()) {
    coverage_ = new ::dra::Coverage(*from.coverage_);
  } else {
    coverage_ = nullptr;
  }
  ::memcpy(&signalnum_, &from.signalnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_basic_block_uncovered_) -
    reinterpret_cast<char*>(&signalnum_)) + sizeof(number_basic_block_uncovered_));
  // @@protoc_insertion_point(copy_constructor:dra.Statistics)
}

void Statistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coverage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_basic_block_uncovered_) -
    reinterpret_cast<char*>(&coverage_)) + sizeof(number_basic_block_uncovered_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:dra.Statistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete coverage_;
}

void Statistics::ArenaDtor(void* object) {
  Statistics* _this = reinterpret_cast< Statistics* >(object);
  (void)_this;
  _this->stat_. ~MapField();
}
inline void Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Statistics::ArenaDtor);
  }
}
void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_.Clear();
  useful_input_.Clear();
  if (GetArenaForAllocation() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
  ::memset(&signalnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_basic_block_uncovered_) -
      reinterpret_cast<char*>(&signalnum_)) + sizeof(number_basic_block_uncovered_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 signalNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          signalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_basic_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_basic_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_basic_block_real = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_basic_block_real_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_basic_block_covered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          number_basic_block_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_basic_block_uncovered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_basic_block_uncovered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.Coverage coverage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_coverage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .dra.Statistic> stat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stat_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dra.UsefulInput useful_input = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_useful_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 signalNum = 1;
  if (this->_internal_signalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalnum(), target);
  }

  // uint32 number_basic_block = 3;
  if (this->_internal_number_basic_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_basic_block(), target);
  }

  // uint32 number_basic_block_real = 4;
  if (this->_internal_number_basic_block_real() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number_basic_block_real(), target);
  }

  // uint32 number_basic_block_covered = 5;
  if (this->_internal_number_basic_block_covered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_number_basic_block_covered(), target);
  }

  // uint32 number_basic_block_uncovered = 6;
  if (this->_internal_number_basic_block_uncovered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_basic_block_uncovered(), target);
  }

  // .dra.Coverage coverage = 8;
  if (this->_internal_has_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::coverage(this), target, stream);
  }

  // map<int32, .dra.Statistic> stat = 11;
  if (!this->_internal_stat().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_stat().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_stat().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
          it = this->_internal_stat().begin();
          it != this->_internal_stat().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Statistics_StatEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
          it = this->_internal_stat().begin();
          it != this->_internal_stat().end(); ++it) {
        target = Statistics_StatEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .dra.UsefulInput useful_input = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_useful_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_useful_input(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .dra.Statistic> stat = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stat_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
      it = this->_internal_stat().begin();
      it != this->_internal_stat().end(); ++it) {
    total_size += Statistics_StatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.UsefulInput useful_input = 12;
  total_size += 1UL * this->_internal_useful_input_size();
  for (const auto& msg : this->useful_input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Coverage coverage = 8;
  if (this->_internal_has_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coverage_);
  }

  // uint64 signalNum = 1;
  if (this->_internal_signalnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_signalnum());
  }

  // uint32 number_basic_block = 3;
  if (this->_internal_number_basic_block() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_basic_block());
  }

  // uint32 number_basic_block_real = 4;
  if (this->_internal_number_basic_block_real() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_basic_block_real());
  }

  // uint32 number_basic_block_covered = 5;
  if (this->_internal_number_basic_block_covered() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_basic_block_covered());
  }

  // uint32 number_basic_block_uncovered = 6;
  if (this->_internal_number_basic_block_uncovered() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_basic_block_uncovered());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistics::GetClassData() const { return &_class_data_; }

void Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Statistics *>(to)->MergeFrom(
      static_cast<const Statistics &>(from));
}


void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_.MergeFrom(from.stat_);
  useful_input_.MergeFrom(from.useful_input_);
  if (from._internal_has_coverage()) {
    _internal_mutable_coverage()->::dra::Coverage::MergeFrom(from._internal_coverage());
  }
  if (from._internal_signalnum() != 0) {
    _internal_set_signalnum(from._internal_signalnum());
  }
  if (from._internal_number_basic_block() != 0) {
    _internal_set_number_basic_block(from._internal_number_basic_block());
  }
  if (from._internal_number_basic_block_real() != 0) {
    _internal_set_number_basic_block_real(from._internal_number_basic_block_real());
  }
  if (from._internal_number_basic_block_covered() != 0) {
    _internal_set_number_basic_block_covered(from._internal_number_basic_block_covered());
  }
  if (from._internal_number_basic_block_uncovered() != 0) {
    _internal_set_number_basic_block_uncovered(from._internal_number_basic_block_uncovered());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_.InternalSwap(&other->stat_);
  useful_input_.InternalSwap(&other->useful_input_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistics, number_basic_block_uncovered_)
      + sizeof(Statistics::number_basic_block_uncovered_)
      - PROTOBUF_FIELD_OFFSET(Statistics, coverage_)>(
          reinterpret_cast<char*>(&coverage_),
          reinterpret_cast<char*>(&other->coverage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Statistic_2eproto_getter, &descriptor_table_Statistic_2eproto_once,
      file_level_metadata_Statistic_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dra::Statistic* Arena::CreateMaybeMessage< ::dra::Statistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Time* Arena::CreateMaybeMessage< ::dra::Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Coverage_CoverageEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Coverage_CoverageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Coverage_CoverageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Coverage* Arena::CreateMaybeMessage< ::dra::Coverage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Coverage >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UsefulInput* Arena::CreateMaybeMessage< ::dra::UsefulInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UsefulInput >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistics_StatEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Statistics_StatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Statistics_StatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistics* Arena::CreateMaybeMessage< ::dra::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Statistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
