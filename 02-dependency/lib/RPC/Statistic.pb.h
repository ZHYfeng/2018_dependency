// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Statistic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Statistic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Statistic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Input.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Statistic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Statistic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Statistic_2eproto;
namespace dra {
class Coverage;
class CoverageDefaultTypeInternal;
extern CoverageDefaultTypeInternal _Coverage_default_instance_;
class Coverage_CoverageEntry_DoNotUse;
class Coverage_CoverageEntry_DoNotUseDefaultTypeInternal;
extern Coverage_CoverageEntry_DoNotUseDefaultTypeInternal _Coverage_CoverageEntry_DoNotUse_default_instance_;
class Statistic;
class StatisticDefaultTypeInternal;
extern StatisticDefaultTypeInternal _Statistic_default_instance_;
class Statistics;
class StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
class Statistics_StatEntry_DoNotUse;
class Statistics_StatEntry_DoNotUseDefaultTypeInternal;
extern Statistics_StatEntry_DoNotUseDefaultTypeInternal _Statistics_StatEntry_DoNotUse_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class UsefulInput;
class UsefulInputDefaultTypeInternal;
extern UsefulInputDefaultTypeInternal _UsefulInput_default_instance_;
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> ::dra::Coverage* Arena::CreateMaybeMessage<::dra::Coverage>(Arena*);
template<> ::dra::Coverage_CoverageEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Coverage_CoverageEntry_DoNotUse>(Arena*);
template<> ::dra::Statistic* Arena::CreateMaybeMessage<::dra::Statistic>(Arena*);
template<> ::dra::Statistics* Arena::CreateMaybeMessage<::dra::Statistics>(Arena*);
template<> ::dra::Statistics_StatEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Statistics_StatEntry_DoNotUse>(Arena*);
template<> ::dra::Time* Arena::CreateMaybeMessage<::dra::Time>(Arena*);
template<> ::dra::UsefulInput* Arena::CreateMaybeMessage<::dra::UsefulInput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dra {

// ===================================================================

class Statistic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Statistic) */ {
 public:
  Statistic();
  virtual ~Statistic();

  Statistic(const Statistic& from);
  Statistic(Statistic&& from) noexcept
    : Statistic() {
    *this = ::std::move(from);
  }

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistic& operator=(Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistic* internal_default_instance() {
    return reinterpret_cast<const Statistic*>(
               &_Statistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Statistic& a, Statistic& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistic* New() const final {
    return CreateMaybeMessage<Statistic>(nullptr);
  }

  Statistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Statistic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExecuteNumFieldNumber = 11,
    kTimeFieldNumber = 12,
    kNewTestCaseNumFieldNumber = 13,
    kNewAddressNumFieldNumber = 14,
  };
  // .dra.FuzzingStat name = 1;
  void clear_name();
  ::dra::FuzzingStat name() const;
  void set_name(::dra::FuzzingStat value);
  private:
  ::dra::FuzzingStat _internal_name() const;
  void _internal_set_name(::dra::FuzzingStat value);
  public:

  // uint64 executeNum = 11;
  void clear_executenum();
  ::PROTOBUF_NAMESPACE_ID::uint64 executenum() const;
  void set_executenum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_executenum() const;
  void _internal_set_executenum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double time = 12;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // uint64 newTestCaseNum = 13;
  void clear_newtestcasenum();
  ::PROTOBUF_NAMESPACE_ID::uint64 newtestcasenum() const;
  void set_newtestcasenum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_newtestcasenum() const;
  void _internal_set_newtestcasenum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 newAddressNum = 14;
  void clear_newaddressnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 newaddressnum() const;
  void set_newaddressnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_newaddressnum() const;
  void _internal_set_newaddressnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Statistic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 executenum_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newtestcasenum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newaddressnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Statistic_2eproto;
};
// -------------------------------------------------------------------

class Time :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(nullptr);
  }

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Time";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNumFieldNumber = 2,
    kExecuteNumFieldNumber = 3,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // int64 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 executeNum = 3;
  void clear_executenum();
  ::PROTOBUF_NAMESPACE_ID::int64 executenum() const;
  void set_executenum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_executenum() const;
  void _internal_set_executenum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Time)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  ::PROTOBUF_NAMESPACE_ID::int64 executenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Statistic_2eproto;
};
// -------------------------------------------------------------------

class Coverage_CoverageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Coverage_CoverageEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Coverage_CoverageEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  Coverage_CoverageEntry_DoNotUse();
  Coverage_CoverageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Coverage_CoverageEntry_DoNotUse& other);
  static const Coverage_CoverageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Coverage_CoverageEntry_DoNotUse*>(&_Coverage_CoverageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Coverage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Coverage) */ {
 public:
  Coverage();
  virtual ~Coverage();

  Coverage(const Coverage& from);
  Coverage(Coverage&& from) noexcept
    : Coverage() {
    *this = ::std::move(from);
  }

  inline Coverage& operator=(const Coverage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coverage& operator=(Coverage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coverage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coverage* internal_default_instance() {
    return reinterpret_cast<const Coverage*>(
               &_Coverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Coverage& a, Coverage& b) {
    a.Swap(&b);
  }
  inline void Swap(Coverage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coverage* New() const final {
    return CreateMaybeMessage<Coverage>(nullptr);
  }

  Coverage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coverage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coverage& from);
  void MergeFrom(const Coverage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coverage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Coverage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCoverageFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // map<uint32, uint32> coverage = 1;
  int coverage_size() const;
  private:
  int _internal_coverage_size() const;
  public:
  void clear_coverage();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_coverage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_coverage();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      coverage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_coverage();

  // repeated .dra.Time time = 2;
  int time_size() const;
  private:
  int _internal_time_size() const;
  public:
  void clear_time();
  ::dra::Time* mutable_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Time >*
      mutable_time();
  private:
  const ::dra::Time& _internal_time(int index) const;
  ::dra::Time* _internal_add_time();
  public:
  const ::dra::Time& time(int index) const;
  ::dra::Time* add_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Time >&
      time() const;

  // @@protoc_insertion_point(class_scope:dra.Coverage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Coverage_CoverageEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > coverage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Time > time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Statistic_2eproto;
};
// -------------------------------------------------------------------

class UsefulInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.UsefulInput) */ {
 public:
  UsefulInput();
  virtual ~UsefulInput();

  UsefulInput(const UsefulInput& from);
  UsefulInput(UsefulInput&& from) noexcept
    : UsefulInput() {
    *this = ::std::move(from);
  }

  inline UsefulInput& operator=(const UsefulInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsefulInput& operator=(UsefulInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsefulInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsefulInput* internal_default_instance() {
    return reinterpret_cast<const UsefulInput*>(
               &_UsefulInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UsefulInput& a, UsefulInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UsefulInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsefulInput* New() const final {
    return CreateMaybeMessage<UsefulInput>(nullptr);
  }

  UsefulInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsefulInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsefulInput& from);
  void MergeFrom(const UsefulInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsefulInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.UsefulInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAddressFieldNumber = 4,
    kInputFieldNumber = 1,
    kTimeFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // repeated uint32 new_address = 4;
  int new_address_size() const;
  private:
  int _internal_new_address_size() const;
  public:
  void clear_new_address();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_address(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_new_address() const;
  void _internal_add_new_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_new_address();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 new_address(int index) const;
  void set_new_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_new_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      new_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_new_address();

  // .dra.Input input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::dra::Input& input() const;
  ::dra::Input* release_input();
  ::dra::Input* mutable_input();
  void set_allocated_input(::dra::Input* input);
  private:
  const ::dra::Input& _internal_input() const;
  ::dra::Input* _internal_mutable_input();
  public:

  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // uint64 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.UsefulInput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > new_address_;
  mutable std::atomic<int> _new_address_cached_byte_size_;
  ::dra::Input* input_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Statistic_2eproto;
};
// -------------------------------------------------------------------

class Statistics_StatEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Statistics_StatEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Statistics_StatEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Statistics_StatEntry_DoNotUse();
  Statistics_StatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Statistics_StatEntry_DoNotUse& other);
  static const Statistics_StatEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Statistics_StatEntry_DoNotUse*>(&_Statistics_StatEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class Statistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Statistics) */ {
 public:
  Statistics();
  virtual ~Statistics();

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistics* New() const final {
    return CreateMaybeMessage<Statistics>(nullptr);
  }

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistics& from);
  void MergeFrom(const Statistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Statistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Statistic_2eproto);
    return ::descriptor_table_Statistic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStatFieldNumber = 11,
    kUsefulInputFieldNumber = 12,
    kCoverageFieldNumber = 8,
    kSignalNumFieldNumber = 1,
    kNumberBasicBlockFieldNumber = 3,
    kNumberBasicBlockRealFieldNumber = 4,
    kNumberBasicBlockCoveredFieldNumber = 5,
    kNumberBasicBlockUncoveredFieldNumber = 6,
  };
  // map<int32, .dra.Statistic> stat = 11;
  int stat_size() const;
  private:
  int _internal_stat_size() const;
  public:
  void clear_stat();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >&
      _internal_stat() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >*
      _internal_mutable_stat();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >&
      stat() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >*
      mutable_stat();

  // repeated .dra.UsefulInput useful_input = 12;
  int useful_input_size() const;
  private:
  int _internal_useful_input_size() const;
  public:
  void clear_useful_input();
  ::dra::UsefulInput* mutable_useful_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UsefulInput >*
      mutable_useful_input();
  private:
  const ::dra::UsefulInput& _internal_useful_input(int index) const;
  ::dra::UsefulInput* _internal_add_useful_input();
  public:
  const ::dra::UsefulInput& useful_input(int index) const;
  ::dra::UsefulInput* add_useful_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UsefulInput >&
      useful_input() const;

  // .dra.Coverage coverage = 8;
  bool has_coverage() const;
  private:
  bool _internal_has_coverage() const;
  public:
  void clear_coverage();
  const ::dra::Coverage& coverage() const;
  ::dra::Coverage* release_coverage();
  ::dra::Coverage* mutable_coverage();
  void set_allocated_coverage(::dra::Coverage* coverage);
  private:
  const ::dra::Coverage& _internal_coverage() const;
  ::dra::Coverage* _internal_mutable_coverage();
  public:

  // uint64 signalNum = 1;
  void clear_signalnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 signalnum() const;
  void set_signalnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signalnum() const;
  void _internal_set_signalnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 number_basic_block = 3;
  void clear_number_basic_block();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block() const;
  void set_number_basic_block(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_basic_block() const;
  void _internal_set_number_basic_block(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_basic_block_real = 4;
  void clear_number_basic_block_real();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_real() const;
  void set_number_basic_block_real(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_basic_block_real() const;
  void _internal_set_number_basic_block_real(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_basic_block_covered = 5;
  void clear_number_basic_block_covered();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_covered() const;
  void set_number_basic_block_covered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_basic_block_covered() const;
  void _internal_set_number_basic_block_covered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_basic_block_uncovered = 6;
  void clear_number_basic_block_uncovered();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_uncovered() const;
  void set_number_basic_block_uncovered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_basic_block_uncovered() const;
  void _internal_set_number_basic_block_uncovered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Statistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Statistics_StatEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > stat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UsefulInput > useful_input_;
  ::dra::Coverage* coverage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signalnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_real_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_covered_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_basic_block_uncovered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Statistic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Statistic

// .dra.FuzzingStat name = 1;
inline void Statistic::clear_name() {
  name_ = 0;
}
inline ::dra::FuzzingStat Statistic::_internal_name() const {
  return static_cast< ::dra::FuzzingStat >(name_);
}
inline ::dra::FuzzingStat Statistic::name() const {
  // @@protoc_insertion_point(field_get:dra.Statistic.name)
  return _internal_name();
}
inline void Statistic::_internal_set_name(::dra::FuzzingStat value) {
  
  name_ = value;
}
inline void Statistic::set_name(::dra::FuzzingStat value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dra.Statistic.name)
}

// uint64 executeNum = 11;
inline void Statistic::clear_executenum() {
  executenum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistic::_internal_executenum() const {
  return executenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistic::executenum() const {
  // @@protoc_insertion_point(field_get:dra.Statistic.executeNum)
  return _internal_executenum();
}
inline void Statistic::_internal_set_executenum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  executenum_ = value;
}
inline void Statistic::set_executenum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_executenum(value);
  // @@protoc_insertion_point(field_set:dra.Statistic.executeNum)
}

// double time = 12;
inline void Statistic::clear_time() {
  time_ = 0;
}
inline double Statistic::_internal_time() const {
  return time_;
}
inline double Statistic::time() const {
  // @@protoc_insertion_point(field_get:dra.Statistic.time)
  return _internal_time();
}
inline void Statistic::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Statistic::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:dra.Statistic.time)
}

// uint64 newTestCaseNum = 13;
inline void Statistic::clear_newtestcasenum() {
  newtestcasenum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistic::_internal_newtestcasenum() const {
  return newtestcasenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistic::newtestcasenum() const {
  // @@protoc_insertion_point(field_get:dra.Statistic.newTestCaseNum)
  return _internal_newtestcasenum();
}
inline void Statistic::_internal_set_newtestcasenum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  newtestcasenum_ = value;
}
inline void Statistic::set_newtestcasenum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_newtestcasenum(value);
  // @@protoc_insertion_point(field_set:dra.Statistic.newTestCaseNum)
}

// uint64 newAddressNum = 14;
inline void Statistic::clear_newaddressnum() {
  newaddressnum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistic::_internal_newaddressnum() const {
  return newaddressnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistic::newaddressnum() const {
  // @@protoc_insertion_point(field_get:dra.Statistic.newAddressNum)
  return _internal_newaddressnum();
}
inline void Statistic::_internal_set_newaddressnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  newaddressnum_ = value;
}
inline void Statistic::set_newaddressnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_newaddressnum(value);
  // @@protoc_insertion_point(field_set:dra.Statistic.newAddressNum)
}

// -------------------------------------------------------------------

// Time

// double time = 1;
inline void Time::clear_time() {
  time_ = 0;
}
inline double Time::_internal_time() const {
  return time_;
}
inline double Time::time() const {
  // @@protoc_insertion_point(field_get:dra.Time.time)
  return _internal_time();
}
inline void Time::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Time::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:dra.Time.time)
}

// int64 num = 2;
inline void Time::clear_num() {
  num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Time::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Time::num() const {
  // @@protoc_insertion_point(field_get:dra.Time.num)
  return _internal_num();
}
inline void Time::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void Time::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:dra.Time.num)
}

// int64 executeNum = 3;
inline void Time::clear_executenum() {
  executenum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Time::_internal_executenum() const {
  return executenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Time::executenum() const {
  // @@protoc_insertion_point(field_get:dra.Time.executeNum)
  return _internal_executenum();
}
inline void Time::_internal_set_executenum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  executenum_ = value;
}
inline void Time::set_executenum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_executenum(value);
  // @@protoc_insertion_point(field_set:dra.Time.executeNum)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Coverage

// map<uint32, uint32> coverage = 1;
inline int Coverage::_internal_coverage_size() const {
  return coverage_.size();
}
inline int Coverage::coverage_size() const {
  return _internal_coverage_size();
}
inline void Coverage::clear_coverage() {
  coverage_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Coverage::_internal_coverage() const {
  return coverage_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Coverage::coverage() const {
  // @@protoc_insertion_point(field_map:dra.Coverage.coverage)
  return _internal_coverage();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Coverage::_internal_mutable_coverage() {
  return coverage_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Coverage::mutable_coverage() {
  // @@protoc_insertion_point(field_mutable_map:dra.Coverage.coverage)
  return _internal_mutable_coverage();
}

// repeated .dra.Time time = 2;
inline int Coverage::_internal_time_size() const {
  return time_.size();
}
inline int Coverage::time_size() const {
  return _internal_time_size();
}
inline void Coverage::clear_time() {
  time_.Clear();
}
inline ::dra::Time* Coverage::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Coverage.time)
  return time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Time >*
Coverage::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:dra.Coverage.time)
  return &time_;
}
inline const ::dra::Time& Coverage::_internal_time(int index) const {
  return time_.Get(index);
}
inline const ::dra::Time& Coverage::time(int index) const {
  // @@protoc_insertion_point(field_get:dra.Coverage.time)
  return _internal_time(index);
}
inline ::dra::Time* Coverage::_internal_add_time() {
  return time_.Add();
}
inline ::dra::Time* Coverage::add_time() {
  // @@protoc_insertion_point(field_add:dra.Coverage.time)
  return _internal_add_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Time >&
Coverage::time() const {
  // @@protoc_insertion_point(field_list:dra.Coverage.time)
  return time_;
}

// -------------------------------------------------------------------

// UsefulInput

// .dra.Input input = 1;
inline bool UsefulInput::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool UsefulInput::has_input() const {
  return _internal_has_input();
}
inline const ::dra::Input& UsefulInput::_internal_input() const {
  const ::dra::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dra::Input*>(
      &::dra::_Input_default_instance_);
}
inline const ::dra::Input& UsefulInput::input() const {
  // @@protoc_insertion_point(field_get:dra.UsefulInput.input)
  return _internal_input();
}
inline ::dra::Input* UsefulInput::release_input() {
  // @@protoc_insertion_point(field_release:dra.UsefulInput.input)
  
  ::dra::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::dra::Input* UsefulInput::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::dra::Input* UsefulInput::mutable_input() {
  // @@protoc_insertion_point(field_mutable:dra.UsefulInput.input)
  return _internal_mutable_input();
}
inline void UsefulInput::set_allocated_input(::dra::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:dra.UsefulInput.input)
}

// double time = 2;
inline void UsefulInput::clear_time() {
  time_ = 0;
}
inline double UsefulInput::_internal_time() const {
  return time_;
}
inline double UsefulInput::time() const {
  // @@protoc_insertion_point(field_get:dra.UsefulInput.time)
  return _internal_time();
}
inline void UsefulInput::_internal_set_time(double value) {
  
  time_ = value;
}
inline void UsefulInput::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:dra.UsefulInput.time)
}

// uint64 num = 3;
inline void UsefulInput::clear_num() {
  num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UsefulInput::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UsefulInput::num() const {
  // @@protoc_insertion_point(field_get:dra.UsefulInput.num)
  return _internal_num();
}
inline void UsefulInput::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_ = value;
}
inline void UsefulInput::set_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:dra.UsefulInput.num)
}

// repeated uint32 new_address = 4;
inline int UsefulInput::_internal_new_address_size() const {
  return new_address_.size();
}
inline int UsefulInput::new_address_size() const {
  return _internal_new_address_size();
}
inline void UsefulInput::clear_new_address() {
  new_address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsefulInput::_internal_new_address(int index) const {
  return new_address_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsefulInput::new_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.UsefulInput.new_address)
  return _internal_new_address(index);
}
inline void UsefulInput::set_new_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  new_address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.UsefulInput.new_address)
}
inline void UsefulInput::_internal_add_new_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  new_address_.Add(value);
}
inline void UsefulInput::add_new_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_new_address(value);
  // @@protoc_insertion_point(field_add:dra.UsefulInput.new_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UsefulInput::_internal_new_address() const {
  return new_address_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UsefulInput::new_address() const {
  // @@protoc_insertion_point(field_list:dra.UsefulInput.new_address)
  return _internal_new_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UsefulInput::_internal_mutable_new_address() {
  return &new_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UsefulInput::mutable_new_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.UsefulInput.new_address)
  return _internal_mutable_new_address();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Statistics

// uint64 signalNum = 1;
inline void Statistics::clear_signalnum() {
  signalnum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_signalnum() const {
  return signalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::signalnum() const {
  // @@protoc_insertion_point(field_get:dra.Statistics.signalNum)
  return _internal_signalnum();
}
inline void Statistics::_internal_set_signalnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  signalnum_ = value;
}
inline void Statistics::set_signalnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signalnum(value);
  // @@protoc_insertion_point(field_set:dra.Statistics.signalNum)
}

// uint32 number_basic_block = 3;
inline void Statistics::clear_number_basic_block() {
  number_basic_block_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_number_basic_block() const {
  return number_basic_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::number_basic_block() const {
  // @@protoc_insertion_point(field_get:dra.Statistics.number_basic_block)
  return _internal_number_basic_block();
}
inline void Statistics::_internal_set_number_basic_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_basic_block_ = value;
}
inline void Statistics::set_number_basic_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_basic_block(value);
  // @@protoc_insertion_point(field_set:dra.Statistics.number_basic_block)
}

// uint32 number_basic_block_real = 4;
inline void Statistics::clear_number_basic_block_real() {
  number_basic_block_real_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_number_basic_block_real() const {
  return number_basic_block_real_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::number_basic_block_real() const {
  // @@protoc_insertion_point(field_get:dra.Statistics.number_basic_block_real)
  return _internal_number_basic_block_real();
}
inline void Statistics::_internal_set_number_basic_block_real(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_basic_block_real_ = value;
}
inline void Statistics::set_number_basic_block_real(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_basic_block_real(value);
  // @@protoc_insertion_point(field_set:dra.Statistics.number_basic_block_real)
}

// uint32 number_basic_block_covered = 5;
inline void Statistics::clear_number_basic_block_covered() {
  number_basic_block_covered_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_number_basic_block_covered() const {
  return number_basic_block_covered_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::number_basic_block_covered() const {
  // @@protoc_insertion_point(field_get:dra.Statistics.number_basic_block_covered)
  return _internal_number_basic_block_covered();
}
inline void Statistics::_internal_set_number_basic_block_covered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_basic_block_covered_ = value;
}
inline void Statistics::set_number_basic_block_covered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_basic_block_covered(value);
  // @@protoc_insertion_point(field_set:dra.Statistics.number_basic_block_covered)
}

// uint32 number_basic_block_uncovered = 6;
inline void Statistics::clear_number_basic_block_uncovered() {
  number_basic_block_uncovered_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_number_basic_block_uncovered() const {
  return number_basic_block_uncovered_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::number_basic_block_uncovered() const {
  // @@protoc_insertion_point(field_get:dra.Statistics.number_basic_block_uncovered)
  return _internal_number_basic_block_uncovered();
}
inline void Statistics::_internal_set_number_basic_block_uncovered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_basic_block_uncovered_ = value;
}
inline void Statistics::set_number_basic_block_uncovered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_basic_block_uncovered(value);
  // @@protoc_insertion_point(field_set:dra.Statistics.number_basic_block_uncovered)
}

// .dra.Coverage coverage = 8;
inline bool Statistics::_internal_has_coverage() const {
  return this != internal_default_instance() && coverage_ != nullptr;
}
inline bool Statistics::has_coverage() const {
  return _internal_has_coverage();
}
inline void Statistics::clear_coverage() {
  if (GetArenaNoVirtual() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
}
inline const ::dra::Coverage& Statistics::_internal_coverage() const {
  const ::dra::Coverage* p = coverage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dra::Coverage*>(
      &::dra::_Coverage_default_instance_);
}
inline const ::dra::Coverage& Statistics::coverage() const {
  // @@protoc_insertion_point(field_get:dra.Statistics.coverage)
  return _internal_coverage();
}
inline ::dra::Coverage* Statistics::release_coverage() {
  // @@protoc_insertion_point(field_release:dra.Statistics.coverage)
  
  ::dra::Coverage* temp = coverage_;
  coverage_ = nullptr;
  return temp;
}
inline ::dra::Coverage* Statistics::_internal_mutable_coverage() {
  
  if (coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::Coverage>(GetArenaNoVirtual());
    coverage_ = p;
  }
  return coverage_;
}
inline ::dra::Coverage* Statistics::mutable_coverage() {
  // @@protoc_insertion_point(field_mutable:dra.Statistics.coverage)
  return _internal_mutable_coverage();
}
inline void Statistics::set_allocated_coverage(::dra::Coverage* coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coverage_;
  }
  if (coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coverage, submessage_arena);
    }
    
  } else {
    
  }
  coverage_ = coverage;
  // @@protoc_insertion_point(field_set_allocated:dra.Statistics.coverage)
}

// map<int32, .dra.Statistic> stat = 11;
inline int Statistics::_internal_stat_size() const {
  return stat_.size();
}
inline int Statistics::stat_size() const {
  return _internal_stat_size();
}
inline void Statistics::clear_stat() {
  stat_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >&
Statistics::_internal_stat() const {
  return stat_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >&
Statistics::stat() const {
  // @@protoc_insertion_point(field_map:dra.Statistics.stat)
  return _internal_stat();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >*
Statistics::_internal_mutable_stat() {
  return stat_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >*
Statistics::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_map:dra.Statistics.stat)
  return _internal_mutable_stat();
}

// repeated .dra.UsefulInput useful_input = 12;
inline int Statistics::_internal_useful_input_size() const {
  return useful_input_.size();
}
inline int Statistics::useful_input_size() const {
  return _internal_useful_input_size();
}
inline void Statistics::clear_useful_input() {
  useful_input_.Clear();
}
inline ::dra::UsefulInput* Statistics::mutable_useful_input(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Statistics.useful_input)
  return useful_input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UsefulInput >*
Statistics::mutable_useful_input() {
  // @@protoc_insertion_point(field_mutable_list:dra.Statistics.useful_input)
  return &useful_input_;
}
inline const ::dra::UsefulInput& Statistics::_internal_useful_input(int index) const {
  return useful_input_.Get(index);
}
inline const ::dra::UsefulInput& Statistics::useful_input(int index) const {
  // @@protoc_insertion_point(field_get:dra.Statistics.useful_input)
  return _internal_useful_input(index);
}
inline ::dra::UsefulInput* Statistics::_internal_add_useful_input() {
  return useful_input_.Add();
}
inline ::dra::UsefulInput* Statistics::add_useful_input() {
  // @@protoc_insertion_point(field_add:dra.Statistics.useful_input)
  return _internal_add_useful_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::UsefulInput >&
Statistics::useful_input() const {
  // @@protoc_insertion_point(field_list:dra.Statistics.useful_input)
  return useful_input_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dra

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Statistic_2eproto
