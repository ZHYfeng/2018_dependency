// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Input_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Input_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Input_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Input_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Input_2eproto;
namespace dra {
class Call;
struct CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Call_AddressEntry_DoNotUse;
struct Call_AddressEntry_DoNotUseDefaultTypeInternal;
extern Call_AddressEntry_DoNotUseDefaultTypeInternal _Call_AddressEntry_DoNotUse_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Input_CallEntry_DoNotUse;
struct Input_CallEntry_DoNotUseDefaultTypeInternal;
extern Input_CallEntry_DoNotUseDefaultTypeInternal _Input_CallEntry_DoNotUse_default_instance_;
class Input_UncoveredAddressEntry_DoNotUse;
struct Input_UncoveredAddressEntry_DoNotUseDefaultTypeInternal;
extern Input_UncoveredAddressEntry_DoNotUseDefaultTypeInternal _Input_UncoveredAddressEntry_DoNotUse_default_instance_;
class Input_WriteAddressEntry_DoNotUse;
struct Input_WriteAddressEntry_DoNotUseDefaultTypeInternal;
extern Input_WriteAddressEntry_DoNotUseDefaultTypeInternal _Input_WriteAddressEntry_DoNotUse_default_instance_;
class Inputs;
struct InputsDefaultTypeInternal;
extern InputsDefaultTypeInternal _Inputs_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Paths;
struct PathsDefaultTypeInternal;
extern PathsDefaultTypeInternal _Paths_default_instance_;
class Paths_PathEntry_DoNotUse;
struct Paths_PathEntry_DoNotUseDefaultTypeInternal;
extern Paths_PathEntry_DoNotUseDefaultTypeInternal _Paths_PathEntry_DoNotUse_default_instance_;
class UnstableInput;
struct UnstableInputDefaultTypeInternal;
extern UnstableInputDefaultTypeInternal _UnstableInput_default_instance_;
class UnstableInput_AddressEntry_DoNotUse;
struct UnstableInput_AddressEntry_DoNotUseDefaultTypeInternal;
extern UnstableInput_AddressEntry_DoNotUseDefaultTypeInternal _UnstableInput_AddressEntry_DoNotUse_default_instance_;
class UnstableInputs;
struct UnstableInputsDefaultTypeInternal;
extern UnstableInputsDefaultTypeInternal _UnstableInputs_default_instance_;
class UnstableInputs_UnstableInputEntry_DoNotUse;
struct UnstableInputs_UnstableInputEntry_DoNotUseDefaultTypeInternal;
extern UnstableInputs_UnstableInputEntry_DoNotUseDefaultTypeInternal _UnstableInputs_UnstableInputEntry_DoNotUse_default_instance_;
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> ::dra::Call* Arena::CreateMaybeMessage<::dra::Call>(Arena*);
template<> ::dra::Call_AddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Call_AddressEntry_DoNotUse>(Arena*);
template<> ::dra::Input* Arena::CreateMaybeMessage<::dra::Input>(Arena*);
template<> ::dra::Input_CallEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Input_CallEntry_DoNotUse>(Arena*);
template<> ::dra::Input_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Input_UncoveredAddressEntry_DoNotUse>(Arena*);
template<> ::dra::Input_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Input_WriteAddressEntry_DoNotUse>(Arena*);
template<> ::dra::Inputs* Arena::CreateMaybeMessage<::dra::Inputs>(Arena*);
template<> ::dra::Path* Arena::CreateMaybeMessage<::dra::Path>(Arena*);
template<> ::dra::Paths* Arena::CreateMaybeMessage<::dra::Paths>(Arena*);
template<> ::dra::Paths_PathEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Paths_PathEntry_DoNotUse>(Arena*);
template<> ::dra::UnstableInput* Arena::CreateMaybeMessage<::dra::UnstableInput>(Arena*);
template<> ::dra::UnstableInput_AddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UnstableInput_AddressEntry_DoNotUse>(Arena*);
template<> ::dra::UnstableInputs* Arena::CreateMaybeMessage<::dra::UnstableInputs>(Arena*);
template<> ::dra::UnstableInputs_UnstableInputEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UnstableInputs_UnstableInputEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dra {

enum FuzzingStat : int {
  StatGenerate = 0,
  StatFuzz = 1,
  StatCandidate = 2,
  StatTriage = 3,
  StatMinimize = 4,
  StatSmash = 5,
  StatHint = 6,
  StatSeed = 7,
  StatDependency = 8,
  StatDependencyBoot = 9,
  StatDefault = -1,
  FuzzingStat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FuzzingStat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FuzzingStat_IsValid(int value);
constexpr FuzzingStat FuzzingStat_MIN = StatDefault;
constexpr FuzzingStat FuzzingStat_MAX = StatDependencyBoot;
constexpr int FuzzingStat_ARRAYSIZE = FuzzingStat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FuzzingStat_descriptor();
template<typename T>
inline const std::string& FuzzingStat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FuzzingStat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FuzzingStat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FuzzingStat_descriptor(), enum_t_value);
}
inline bool FuzzingStat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FuzzingStat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FuzzingStat>(
    FuzzingStat_descriptor(), name, value);
}
// ===================================================================

class Call_AddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Call_AddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Call_AddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Call_AddressEntry_DoNotUse();
  explicit constexpr Call_AddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Call_AddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Call_AddressEntry_DoNotUse& other);
  static const Call_AddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Call_AddressEntry_DoNotUse*>(&_Call_AddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Call final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Call) */ {
 public:
  inline Call() : Call(nullptr) {}
  ~Call() override;
  explicit constexpr Call(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Call(const Call& from);
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  inline Call& operator=(Call&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Call& default_instance() {
    return *internal_default_instance();
  }
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }
  inline void Swap(Call* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Call* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return new Call();
  }

  Call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Call& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Call& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Call";
  }
  protected:
  explicit Call(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdxFieldNumber = 1,
  };
  // map<uint32, uint32> address = 2;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_address();

  // uint32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Call)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Call_AddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// -------------------------------------------------------------------

class Input_CallEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Input_CallEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Input_CallEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Input_CallEntry_DoNotUse();
  explicit constexpr Input_CallEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Input_CallEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Input_CallEntry_DoNotUse& other);
  static const Input_CallEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Input_CallEntry_DoNotUse*>(&_Input_CallEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Input_UncoveredAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Input_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Input_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Input_UncoveredAddressEntry_DoNotUse();
  explicit constexpr Input_UncoveredAddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Input_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Input_UncoveredAddressEntry_DoNotUse& other);
  static const Input_UncoveredAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Input_UncoveredAddressEntry_DoNotUse*>(&_Input_UncoveredAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Input_WriteAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Input_WriteAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Input_WriteAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Input_WriteAddressEntry_DoNotUse();
  explicit constexpr Input_WriteAddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Input_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Input_WriteAddressEntry_DoNotUse& other);
  static const Input_WriteAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Input_WriteAddressEntry_DoNotUse*>(&_Input_WriteAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit constexpr Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return new Input();
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Input& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 13,
    kPathsFieldNumber = 16,
    kUncoveredAddressFieldNumber = 22,
    kWriteAddressFieldNumber = 25,
    kSigFieldNumber = 11,
    kProgramFieldNumber = 12,
    kProgramBeforeMiniFieldNumber = 30,
    kStableFieldNumber = 14,
    kNumberConditionsFieldNumber = 17,
    kNumberConditionsDependencyFieldNumber = 18,
    kStatFieldNumber = 21,
  };
  // map<uint32, .dra.Call> call = 13;
  int call_size() const;
  private:
  int _internal_call_size() const;
  public:
  void clear_call();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >&
      _internal_call() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >*
      _internal_mutable_call();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >&
      call() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >*
      mutable_call();

  // repeated .dra.Paths paths = 16;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::dra::Paths* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >*
      mutable_paths();
  private:
  const ::dra::Paths& _internal_paths(int index) const;
  ::dra::Paths* _internal_add_paths();
  public:
  const ::dra::Paths& paths(int index) const;
  ::dra::Paths* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >&
      paths() const;

  // map<uint32, uint32> uncovered_address = 22;
  int uncovered_address_size() const;
  private:
  int _internal_uncovered_address_size() const;
  public:
  void clear_uncovered_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uncovered_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uncovered_address();

  // map<uint32, uint32> write_address = 25;
  int write_address_size() const;
  private:
  int _internal_write_address_size() const;
  public:
  void clear_write_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_write_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_write_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      write_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_write_address();

  // string sig = 11;
  void clear_sig();
  const std::string& sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sig();
  PROTOBUF_MUST_USE_RESULT std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // bytes program = 12;
  void clear_program();
  const std::string& program() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_program(ArgT0&& arg0, ArgT... args);
  std::string* mutable_program();
  PROTOBUF_MUST_USE_RESULT std::string* release_program();
  void set_allocated_program(std::string* program);
  private:
  const std::string& _internal_program() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // bytes program_before_mini = 30;
  void clear_program_before_mini();
  const std::string& program_before_mini() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_program_before_mini(ArgT0&& arg0, ArgT... args);
  std::string* mutable_program_before_mini();
  PROTOBUF_MUST_USE_RESULT std::string* release_program_before_mini();
  void set_allocated_program_before_mini(std::string* program_before_mini);
  private:
  const std::string& _internal_program_before_mini() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program_before_mini(const std::string& value);
  std::string* _internal_mutable_program_before_mini();
  public:

  // uint32 stable = 14;
  void clear_stable();
  ::PROTOBUF_NAMESPACE_ID::uint32 stable() const;
  void set_stable(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stable() const;
  void _internal_set_stable(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_conditions = 17;
  void clear_number_conditions();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_conditions() const;
  void set_number_conditions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_conditions() const;
  void _internal_set_number_conditions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_conditions_dependency = 18;
  void clear_number_conditions_dependency();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_conditions_dependency() const;
  void set_number_conditions_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_conditions_dependency() const;
  void _internal_set_number_conditions_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .dra.FuzzingStat stat = 21;
  void clear_stat();
  ::dra::FuzzingStat stat() const;
  void set_stat(::dra::FuzzingStat value);
  private:
  ::dra::FuzzingStat _internal_stat() const;
  void _internal_set_stat(::dra::FuzzingStat value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Input_CallEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> call_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths > paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Input_UncoveredAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Input_WriteAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> write_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_before_mini_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_conditions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_conditions_dependency_;
  int stat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// -------------------------------------------------------------------

class Inputs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Inputs) */ {
 public:
  inline Inputs() : Inputs(nullptr) {}
  ~Inputs() override;
  explicit constexpr Inputs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Inputs(const Inputs& from);
  Inputs(Inputs&& from) noexcept
    : Inputs() {
    *this = ::std::move(from);
  }

  inline Inputs& operator=(const Inputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inputs& operator=(Inputs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inputs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Inputs* internal_default_instance() {
    return reinterpret_cast<const Inputs*>(
               &_Inputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Inputs& a, Inputs& b) {
    a.Swap(&b);
  }
  inline void Swap(Inputs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inputs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Inputs* New() const final {
    return new Inputs();
  }

  Inputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Inputs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Inputs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Inputs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inputs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Inputs";
  }
  protected:
  explicit Inputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
  };
  // repeated .dra.Input input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::dra::Input* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Input >*
      mutable_input();
  private:
  const ::dra::Input& _internal_input(int index) const;
  ::dra::Input* _internal_add_input();
  public:
  const ::dra::Input& input(int index) const;
  ::dra::Input* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Input >&
      input() const;

  // @@protoc_insertion_point(class_scope:dra.Inputs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Input > input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit constexpr Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return new Path();
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Path& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // repeated uint32 address = 1;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_address() const;
  void _internal_add_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_address();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 address(int index) const;
  void set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_address();

  // @@protoc_insertion_point(class_scope:dra.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > address_;
  mutable std::atomic<int> _address_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// -------------------------------------------------------------------

class Paths_PathEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Paths_PathEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Paths_PathEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Paths_PathEntry_DoNotUse();
  explicit constexpr Paths_PathEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Paths_PathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Paths_PathEntry_DoNotUse& other);
  static const Paths_PathEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Paths_PathEntry_DoNotUse*>(&_Paths_PathEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Paths final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Paths) */ {
 public:
  inline Paths() : Paths(nullptr) {}
  ~Paths() override;
  explicit constexpr Paths(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Paths(const Paths& from);
  Paths(Paths&& from) noexcept
    : Paths() {
    *this = ::std::move(from);
  }

  inline Paths& operator=(const Paths& from) {
    CopyFrom(from);
    return *this;
  }
  inline Paths& operator=(Paths&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Paths& default_instance() {
    return *internal_default_instance();
  }
  static inline const Paths* internal_default_instance() {
    return reinterpret_cast<const Paths*>(
               &_Paths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Paths& a, Paths& b) {
    a.Swap(&b);
  }
  inline void Swap(Paths* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Paths* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Paths* New() const final {
    return new Paths();
  }

  Paths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Paths>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Paths& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Paths& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paths* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Paths";
  }
  protected:
  explicit Paths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // map<uint32, .dra.Path> path = 1;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >&
      _internal_path() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >*
      _internal_mutable_path();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >&
      path() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:dra.Paths)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Paths_PathEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// -------------------------------------------------------------------

class UnstableInput_AddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UnstableInput_AddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UnstableInput_AddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UnstableInput_AddressEntry_DoNotUse();
  explicit constexpr UnstableInput_AddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UnstableInput_AddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UnstableInput_AddressEntry_DoNotUse& other);
  static const UnstableInput_AddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UnstableInput_AddressEntry_DoNotUse*>(&_UnstableInput_AddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UnstableInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.UnstableInput) */ {
 public:
  inline UnstableInput() : UnstableInput(nullptr) {}
  ~UnstableInput() override;
  explicit constexpr UnstableInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnstableInput(const UnstableInput& from);
  UnstableInput(UnstableInput&& from) noexcept
    : UnstableInput() {
    *this = ::std::move(from);
  }

  inline UnstableInput& operator=(const UnstableInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnstableInput& operator=(UnstableInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnstableInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnstableInput* internal_default_instance() {
    return reinterpret_cast<const UnstableInput*>(
               &_UnstableInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UnstableInput& a, UnstableInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UnstableInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnstableInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnstableInput* New() const final {
    return new UnstableInput();
  }

  UnstableInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnstableInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnstableInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnstableInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnstableInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.UnstableInput";
  }
  protected:
  explicit UnstableInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUnstablePathFieldNumber = 12,
    kAddressFieldNumber = 13,
    kSigFieldNumber = 1,
    kProgramFieldNumber = 2,
  };
  // repeated .dra.Paths unstable_path = 12;
  int unstable_path_size() const;
  private:
  int _internal_unstable_path_size() const;
  public:
  void clear_unstable_path();
  ::dra::Paths* mutable_unstable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >*
      mutable_unstable_path();
  private:
  const ::dra::Paths& _internal_unstable_path(int index) const;
  ::dra::Paths* _internal_add_unstable_path();
  public:
  const ::dra::Paths& unstable_path(int index) const;
  ::dra::Paths* add_unstable_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >&
      unstable_path() const;

  // map<uint32, uint32> address = 13;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_address();

  // string sig = 1;
  void clear_sig();
  const std::string& sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sig();
  PROTOBUF_MUST_USE_RESULT std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // bytes program = 2;
  void clear_program();
  const std::string& program() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_program(ArgT0&& arg0, ArgT... args);
  std::string* mutable_program();
  PROTOBUF_MUST_USE_RESULT std::string* release_program();
  void set_allocated_program(std::string* program);
  private:
  const std::string& _internal_program() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // @@protoc_insertion_point(class_scope:dra.UnstableInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths > unstable_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UnstableInput_AddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// -------------------------------------------------------------------

class UnstableInputs_UnstableInputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UnstableInputs_UnstableInputEntry_DoNotUse, 
    std::string, ::dra::UnstableInput,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UnstableInputs_UnstableInputEntry_DoNotUse, 
    std::string, ::dra::UnstableInput,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UnstableInputs_UnstableInputEntry_DoNotUse();
  explicit constexpr UnstableInputs_UnstableInputEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UnstableInputs_UnstableInputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UnstableInputs_UnstableInputEntry_DoNotUse& other);
  static const UnstableInputs_UnstableInputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UnstableInputs_UnstableInputEntry_DoNotUse*>(&_UnstableInputs_UnstableInputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.UnstableInputs.UnstableInputEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UnstableInputs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.UnstableInputs) */ {
 public:
  inline UnstableInputs() : UnstableInputs(nullptr) {}
  ~UnstableInputs() override;
  explicit constexpr UnstableInputs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnstableInputs(const UnstableInputs& from);
  UnstableInputs(UnstableInputs&& from) noexcept
    : UnstableInputs() {
    *this = ::std::move(from);
  }

  inline UnstableInputs& operator=(const UnstableInputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnstableInputs& operator=(UnstableInputs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnstableInputs& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnstableInputs* internal_default_instance() {
    return reinterpret_cast<const UnstableInputs*>(
               &_UnstableInputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UnstableInputs& a, UnstableInputs& b) {
    a.Swap(&b);
  }
  inline void Swap(UnstableInputs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnstableInputs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnstableInputs* New() const final {
    return new UnstableInputs();
  }

  UnstableInputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnstableInputs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnstableInputs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnstableInputs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnstableInputs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.UnstableInputs";
  }
  protected:
  explicit UnstableInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUnstableInputFieldNumber = 1,
  };
  // map<string, .dra.UnstableInput> unstable_input = 1;
  int unstable_input_size() const;
  private:
  int _internal_unstable_input_size() const;
  public:
  void clear_unstable_input();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >&
      _internal_unstable_input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >*
      _internal_mutable_unstable_input();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >&
      unstable_input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >*
      mutable_unstable_input();

  // @@protoc_insertion_point(class_scope:dra.UnstableInputs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UnstableInputs_UnstableInputEntry_DoNotUse,
      std::string, ::dra::UnstableInput,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> unstable_input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Input_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Call

// uint32 idx = 1;
inline void Call::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Call::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Call::idx() const {
  // @@protoc_insertion_point(field_get:dra.Call.idx)
  return _internal_idx();
}
inline void Call::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void Call::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:dra.Call.idx)
}

// map<uint32, uint32> address = 2;
inline int Call::_internal_address_size() const {
  return address_.size();
}
inline int Call::address_size() const {
  return _internal_address_size();
}
inline void Call::clear_address() {
  address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Call::_internal_address() const {
  return address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Call::address() const {
  // @@protoc_insertion_point(field_map:dra.Call.address)
  return _internal_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Call::_internal_mutable_address() {
  return address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Call::mutable_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.Call.address)
  return _internal_mutable_address();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Input

// string sig = 11;
inline void Input::clear_sig() {
  sig_.ClearToEmpty();
}
inline const std::string& Input::sig() const {
  // @@protoc_insertion_point(field_get:dra.Input.sig)
  return _internal_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Input::set_sig(ArgT0&& arg0, ArgT... args) {
 
 sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.Input.sig)
}
inline std::string* Input::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:dra.Input.sig)
  return _s;
}
inline const std::string& Input::_internal_sig() const {
  return sig_.Get();
}
inline void Input::_internal_set_sig(const std::string& value) {
  
  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Input::_internal_mutable_sig() {
  
  return sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Input::release_sig() {
  // @@protoc_insertion_point(field_release:dra.Input.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Input::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.Input.sig)
}

// bytes program = 12;
inline void Input::clear_program() {
  program_.ClearToEmpty();
}
inline const std::string& Input::program() const {
  // @@protoc_insertion_point(field_get:dra.Input.program)
  return _internal_program();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Input::set_program(ArgT0&& arg0, ArgT... args) {
 
 program_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.Input.program)
}
inline std::string* Input::mutable_program() {
  std::string* _s = _internal_mutable_program();
  // @@protoc_insertion_point(field_mutable:dra.Input.program)
  return _s;
}
inline const std::string& Input::_internal_program() const {
  return program_.Get();
}
inline void Input::_internal_set_program(const std::string& value) {
  
  program_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Input::_internal_mutable_program() {
  
  return program_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Input::release_program() {
  // @@protoc_insertion_point(field_release:dra.Input.program)
  return program_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Input::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    
  } else {
    
  }
  program_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.Input.program)
}

// map<uint32, .dra.Call> call = 13;
inline int Input::_internal_call_size() const {
  return call_.size();
}
inline int Input::call_size() const {
  return _internal_call_size();
}
inline void Input::clear_call() {
  call_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >&
Input::_internal_call() const {
  return call_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >&
Input::call() const {
  // @@protoc_insertion_point(field_map:dra.Input.call)
  return _internal_call();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >*
Input::_internal_mutable_call() {
  return call_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >*
Input::mutable_call() {
  // @@protoc_insertion_point(field_mutable_map:dra.Input.call)
  return _internal_mutable_call();
}

// uint32 stable = 14;
inline void Input::clear_stable() {
  stable_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::_internal_stable() const {
  return stable_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::stable() const {
  // @@protoc_insertion_point(field_get:dra.Input.stable)
  return _internal_stable();
}
inline void Input::_internal_set_stable(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stable_ = value;
}
inline void Input::set_stable(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stable(value);
  // @@protoc_insertion_point(field_set:dra.Input.stable)
}

// repeated .dra.Paths paths = 16;
inline int Input::_internal_paths_size() const {
  return paths_.size();
}
inline int Input::paths_size() const {
  return _internal_paths_size();
}
inline void Input::clear_paths() {
  paths_.Clear();
}
inline ::dra::Paths* Input::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Input.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >*
Input::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:dra.Input.paths)
  return &paths_;
}
inline const ::dra::Paths& Input::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::dra::Paths& Input::paths(int index) const {
  // @@protoc_insertion_point(field_get:dra.Input.paths)
  return _internal_paths(index);
}
inline ::dra::Paths* Input::_internal_add_paths() {
  return paths_.Add();
}
inline ::dra::Paths* Input::add_paths() {
  ::dra::Paths* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:dra.Input.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >&
Input::paths() const {
  // @@protoc_insertion_point(field_list:dra.Input.paths)
  return paths_;
}

// uint32 number_conditions = 17;
inline void Input::clear_number_conditions() {
  number_conditions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::_internal_number_conditions() const {
  return number_conditions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::number_conditions() const {
  // @@protoc_insertion_point(field_get:dra.Input.number_conditions)
  return _internal_number_conditions();
}
inline void Input::_internal_set_number_conditions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_conditions_ = value;
}
inline void Input::set_number_conditions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_conditions(value);
  // @@protoc_insertion_point(field_set:dra.Input.number_conditions)
}

// uint32 number_conditions_dependency = 18;
inline void Input::clear_number_conditions_dependency() {
  number_conditions_dependency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::_internal_number_conditions_dependency() const {
  return number_conditions_dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::number_conditions_dependency() const {
  // @@protoc_insertion_point(field_get:dra.Input.number_conditions_dependency)
  return _internal_number_conditions_dependency();
}
inline void Input::_internal_set_number_conditions_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_conditions_dependency_ = value;
}
inline void Input::set_number_conditions_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_conditions_dependency(value);
  // @@protoc_insertion_point(field_set:dra.Input.number_conditions_dependency)
}

// .dra.FuzzingStat stat = 21;
inline void Input::clear_stat() {
  stat_ = 0;
}
inline ::dra::FuzzingStat Input::_internal_stat() const {
  return static_cast< ::dra::FuzzingStat >(stat_);
}
inline ::dra::FuzzingStat Input::stat() const {
  // @@protoc_insertion_point(field_get:dra.Input.stat)
  return _internal_stat();
}
inline void Input::_internal_set_stat(::dra::FuzzingStat value) {
  
  stat_ = value;
}
inline void Input::set_stat(::dra::FuzzingStat value) {
  _internal_set_stat(value);
  // @@protoc_insertion_point(field_set:dra.Input.stat)
}

// map<uint32, uint32> uncovered_address = 22;
inline int Input::_internal_uncovered_address_size() const {
  return uncovered_address_.size();
}
inline int Input::uncovered_address_size() const {
  return _internal_uncovered_address_size();
}
inline void Input::clear_uncovered_address() {
  uncovered_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Input::_internal_uncovered_address() const {
  return uncovered_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Input::uncovered_address() const {
  // @@protoc_insertion_point(field_map:dra.Input.uncovered_address)
  return _internal_uncovered_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Input::_internal_mutable_uncovered_address() {
  return uncovered_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Input::mutable_uncovered_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.Input.uncovered_address)
  return _internal_mutable_uncovered_address();
}

// map<uint32, uint32> write_address = 25;
inline int Input::_internal_write_address_size() const {
  return write_address_.size();
}
inline int Input::write_address_size() const {
  return _internal_write_address_size();
}
inline void Input::clear_write_address() {
  write_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Input::_internal_write_address() const {
  return write_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Input::write_address() const {
  // @@protoc_insertion_point(field_map:dra.Input.write_address)
  return _internal_write_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Input::_internal_mutable_write_address() {
  return write_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Input::mutable_write_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.Input.write_address)
  return _internal_mutable_write_address();
}

// bytes program_before_mini = 30;
inline void Input::clear_program_before_mini() {
  program_before_mini_.ClearToEmpty();
}
inline const std::string& Input::program_before_mini() const {
  // @@protoc_insertion_point(field_get:dra.Input.program_before_mini)
  return _internal_program_before_mini();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Input::set_program_before_mini(ArgT0&& arg0, ArgT... args) {
 
 program_before_mini_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.Input.program_before_mini)
}
inline std::string* Input::mutable_program_before_mini() {
  std::string* _s = _internal_mutable_program_before_mini();
  // @@protoc_insertion_point(field_mutable:dra.Input.program_before_mini)
  return _s;
}
inline const std::string& Input::_internal_program_before_mini() const {
  return program_before_mini_.Get();
}
inline void Input::_internal_set_program_before_mini(const std::string& value) {
  
  program_before_mini_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Input::_internal_mutable_program_before_mini() {
  
  return program_before_mini_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Input::release_program_before_mini() {
  // @@protoc_insertion_point(field_release:dra.Input.program_before_mini)
  return program_before_mini_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Input::set_allocated_program_before_mini(std::string* program_before_mini) {
  if (program_before_mini != nullptr) {
    
  } else {
    
  }
  program_before_mini_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_before_mini,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.Input.program_before_mini)
}

// -------------------------------------------------------------------

// Inputs

// repeated .dra.Input input = 1;
inline int Inputs::_internal_input_size() const {
  return input_.size();
}
inline int Inputs::input_size() const {
  return _internal_input_size();
}
inline void Inputs::clear_input() {
  input_.Clear();
}
inline ::dra::Input* Inputs::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Inputs.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Input >*
Inputs::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:dra.Inputs.input)
  return &input_;
}
inline const ::dra::Input& Inputs::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::dra::Input& Inputs::input(int index) const {
  // @@protoc_insertion_point(field_get:dra.Inputs.input)
  return _internal_input(index);
}
inline ::dra::Input* Inputs::_internal_add_input() {
  return input_.Add();
}
inline ::dra::Input* Inputs::add_input() {
  ::dra::Input* _add = _internal_add_input();
  // @@protoc_insertion_point(field_add:dra.Inputs.input)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Input >&
Inputs::input() const {
  // @@protoc_insertion_point(field_list:dra.Inputs.input)
  return input_;
}

// -------------------------------------------------------------------

// Path

// repeated uint32 address = 1;
inline int Path::_internal_address_size() const {
  return address_.size();
}
inline int Path::address_size() const {
  return _internal_address_size();
}
inline void Path::clear_address() {
  address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::_internal_address(int index) const {
  return address_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::address(int index) const {
  // @@protoc_insertion_point(field_get:dra.Path.address)
  return _internal_address(index);
}
inline void Path::set_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.Path.address)
}
inline void Path::_internal_add_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  address_.Add(value);
}
inline void Path::add_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_address(value);
  // @@protoc_insertion_point(field_add:dra.Path.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Path::_internal_address() const {
  return address_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Path::address() const {
  // @@protoc_insertion_point(field_list:dra.Path.address)
  return _internal_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Path::_internal_mutable_address() {
  return &address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Path::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.Path.address)
  return _internal_mutable_address();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Paths

// map<uint32, .dra.Path> path = 1;
inline int Paths::_internal_path_size() const {
  return path_.size();
}
inline int Paths::path_size() const {
  return _internal_path_size();
}
inline void Paths::clear_path() {
  path_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >&
Paths::_internal_path() const {
  return path_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >&
Paths::path() const {
  // @@protoc_insertion_point(field_map:dra.Paths.path)
  return _internal_path();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >*
Paths::_internal_mutable_path() {
  return path_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Path >*
Paths::mutable_path() {
  // @@protoc_insertion_point(field_mutable_map:dra.Paths.path)
  return _internal_mutable_path();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UnstableInput

// string sig = 1;
inline void UnstableInput::clear_sig() {
  sig_.ClearToEmpty();
}
inline const std::string& UnstableInput::sig() const {
  // @@protoc_insertion_point(field_get:dra.UnstableInput.sig)
  return _internal_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnstableInput::set_sig(ArgT0&& arg0, ArgT... args) {
 
 sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.UnstableInput.sig)
}
inline std::string* UnstableInput::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:dra.UnstableInput.sig)
  return _s;
}
inline const std::string& UnstableInput::_internal_sig() const {
  return sig_.Get();
}
inline void UnstableInput::_internal_set_sig(const std::string& value) {
  
  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnstableInput::_internal_mutable_sig() {
  
  return sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnstableInput::release_sig() {
  // @@protoc_insertion_point(field_release:dra.UnstableInput.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnstableInput::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.UnstableInput.sig)
}

// bytes program = 2;
inline void UnstableInput::clear_program() {
  program_.ClearToEmpty();
}
inline const std::string& UnstableInput::program() const {
  // @@protoc_insertion_point(field_get:dra.UnstableInput.program)
  return _internal_program();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnstableInput::set_program(ArgT0&& arg0, ArgT... args) {
 
 program_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.UnstableInput.program)
}
inline std::string* UnstableInput::mutable_program() {
  std::string* _s = _internal_mutable_program();
  // @@protoc_insertion_point(field_mutable:dra.UnstableInput.program)
  return _s;
}
inline const std::string& UnstableInput::_internal_program() const {
  return program_.Get();
}
inline void UnstableInput::_internal_set_program(const std::string& value) {
  
  program_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnstableInput::_internal_mutable_program() {
  
  return program_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnstableInput::release_program() {
  // @@protoc_insertion_point(field_release:dra.UnstableInput.program)
  return program_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnstableInput::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    
  } else {
    
  }
  program_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.UnstableInput.program)
}

// repeated .dra.Paths unstable_path = 12;
inline int UnstableInput::_internal_unstable_path_size() const {
  return unstable_path_.size();
}
inline int UnstableInput::unstable_path_size() const {
  return _internal_unstable_path_size();
}
inline void UnstableInput::clear_unstable_path() {
  unstable_path_.Clear();
}
inline ::dra::Paths* UnstableInput::mutable_unstable_path(int index) {
  // @@protoc_insertion_point(field_mutable:dra.UnstableInput.unstable_path)
  return unstable_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >*
UnstableInput::mutable_unstable_path() {
  // @@protoc_insertion_point(field_mutable_list:dra.UnstableInput.unstable_path)
  return &unstable_path_;
}
inline const ::dra::Paths& UnstableInput::_internal_unstable_path(int index) const {
  return unstable_path_.Get(index);
}
inline const ::dra::Paths& UnstableInput::unstable_path(int index) const {
  // @@protoc_insertion_point(field_get:dra.UnstableInput.unstable_path)
  return _internal_unstable_path(index);
}
inline ::dra::Paths* UnstableInput::_internal_add_unstable_path() {
  return unstable_path_.Add();
}
inline ::dra::Paths* UnstableInput::add_unstable_path() {
  ::dra::Paths* _add = _internal_add_unstable_path();
  // @@protoc_insertion_point(field_add:dra.UnstableInput.unstable_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Paths >&
UnstableInput::unstable_path() const {
  // @@protoc_insertion_point(field_list:dra.UnstableInput.unstable_path)
  return unstable_path_;
}

// map<uint32, uint32> address = 13;
inline int UnstableInput::_internal_address_size() const {
  return address_.size();
}
inline int UnstableInput::address_size() const {
  return _internal_address_size();
}
inline void UnstableInput::clear_address() {
  address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnstableInput::_internal_address() const {
  return address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnstableInput::address() const {
  // @@protoc_insertion_point(field_map:dra.UnstableInput.address)
  return _internal_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnstableInput::_internal_mutable_address() {
  return address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnstableInput::mutable_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.UnstableInput.address)
  return _internal_mutable_address();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UnstableInputs

// map<string, .dra.UnstableInput> unstable_input = 1;
inline int UnstableInputs::_internal_unstable_input_size() const {
  return unstable_input_.size();
}
inline int UnstableInputs::unstable_input_size() const {
  return _internal_unstable_input_size();
}
inline void UnstableInputs::clear_unstable_input() {
  unstable_input_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >&
UnstableInputs::_internal_unstable_input() const {
  return unstable_input_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >&
UnstableInputs::unstable_input() const {
  // @@protoc_insertion_point(field_map:dra.UnstableInputs.unstable_input)
  return _internal_unstable_input();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >*
UnstableInputs::_internal_mutable_unstable_input() {
  return unstable_input_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::UnstableInput >*
UnstableInputs::mutable_unstable_input() {
  // @@protoc_insertion_point(field_mutable_map:dra.UnstableInputs.unstable_input)
  return _internal_mutable_unstable_input();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dra

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dra::FuzzingStat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dra::FuzzingStat>() {
  return ::dra::FuzzingStat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Input_2eproto
