// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DependencyRPC.proto

#include "DependencyRPC.pb.h"
#include "DependencyRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dra {

static const char* DependencyRPC_method_names[] = {
  "/dra.DependencyRPC/GetVMOffsets",
  "/dra.DependencyRPC/SendNumberBasicBlock",
  "/dra.DependencyRPC/SendNumberBasicBlockCovered",
  "/dra.DependencyRPC/GetNewInput",
  "/dra.DependencyRPC/SendDependency",
  "/dra.DependencyRPC/GetCondition",
  "/dra.DependencyRPC/SendWriteAddress",
  "/dra.DependencyRPC/Connect",
  "/dra.DependencyRPC/GetDataDependency",
  "/dra.DependencyRPC/SendNewInput",
  "/dra.DependencyRPC/GetTasks",
  "/dra.DependencyRPC/GetBootTasks",
  "/dra.DependencyRPC/ReturnTasks",
  "/dra.DependencyRPC/SendBootInput",
  "/dra.DependencyRPC/SendUnstableInput",
  "/dra.DependencyRPC/SendLog",
  "/dra.DependencyRPC/sendStat",
  "/dra.DependencyRPC/GetNeed",
  "/dra.DependencyRPC/SendNeedInput",
};

std::unique_ptr< DependencyRPC::Stub> DependencyRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DependencyRPC::Stub> stub(new DependencyRPC::Stub(channel, options));
  return stub;
}

DependencyRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVMOffsets_(DependencyRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNumberBasicBlock_(DependencyRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNumberBasicBlockCovered_(DependencyRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewInput_(DependencyRPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDependency_(DependencyRPC_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCondition_(DependencyRPC_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendWriteAddress_(DependencyRPC_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(DependencyRPC_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataDependency_(DependencyRPC_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNewInput_(DependencyRPC_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTasks_(DependencyRPC_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBootTasks_(DependencyRPC_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnTasks_(DependencyRPC_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBootInput_(DependencyRPC_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendUnstableInput_(DependencyRPC_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendLog_(DependencyRPC_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendStat_(DependencyRPC_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNeed_(DependencyRPC_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendNeedInput_(DependencyRPC_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DependencyRPC::Stub::GetVMOffsets(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVMOffsets_, context, request, response);
}

void DependencyRPC::Stub::async::GetVMOffsets(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVMOffsets_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetVMOffsets(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVMOffsets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncGetVMOffsetsRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVMOffsets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncGetVMOffsetsRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVMOffsetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendNumberBasicBlock(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNumberBasicBlock_, context, request, response);
}

void DependencyRPC::Stub::async::SendNumberBasicBlock(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNumberBasicBlock_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendNumberBasicBlock(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNumberBasicBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendNumberBasicBlockRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNumberBasicBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendNumberBasicBlockRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNumberBasicBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendNumberBasicBlockCovered(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNumberBasicBlockCovered_, context, request, response);
}

void DependencyRPC::Stub::async::SendNumberBasicBlockCovered(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNumberBasicBlockCovered_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendNumberBasicBlockCovered(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNumberBasicBlockCovered_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendNumberBasicBlockCoveredRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNumberBasicBlockCovered_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendNumberBasicBlockCoveredRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNumberBasicBlockCoveredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::GetNewInput(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Inputs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Inputs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNewInput_, context, request, response);
}

void DependencyRPC::Stub::async::GetNewInput(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Inputs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Inputs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewInput_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetNewInput(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Inputs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Inputs>* DependencyRPC::Stub::PrepareAsyncGetNewInputRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Inputs, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNewInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Inputs>* DependencyRPC::Stub::AsyncGetNewInputRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNewInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendDependency(::grpc::ClientContext* context, const ::dra::Dependency& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Dependency, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendDependency_, context, request, response);
}

void DependencyRPC::Stub::async::SendDependency(::grpc::ClientContext* context, const ::dra::Dependency* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Dependency, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDependency_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendDependency(::grpc::ClientContext* context, const ::dra::Dependency* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDependency_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendDependencyRaw(::grpc::ClientContext* context, const ::dra::Dependency& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Dependency, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendDependency_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendDependencyRaw(::grpc::ClientContext* context, const ::dra::Dependency& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendDependencyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::GetCondition(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Conditions* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Conditions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCondition_, context, request, response);
}

void DependencyRPC::Stub::async::GetCondition(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Conditions* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Conditions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCondition_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetCondition(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Conditions* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Conditions>* DependencyRPC::Stub::PrepareAsyncGetConditionRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Conditions, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Conditions>* DependencyRPC::Stub::AsyncGetConditionRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendWriteAddress(::grpc::ClientContext* context, const ::dra::WriteAddresses& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::WriteAddresses, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendWriteAddress_, context, request, response);
}

void DependencyRPC::Stub::async::SendWriteAddress(::grpc::ClientContext* context, const ::dra::WriteAddresses* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::WriteAddresses, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendWriteAddress_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendWriteAddress(::grpc::ClientContext* context, const ::dra::WriteAddresses* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendWriteAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendWriteAddressRaw(::grpc::ClientContext* context, const ::dra::WriteAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::WriteAddresses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendWriteAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendWriteAddressRaw(::grpc::ClientContext* context, const ::dra::WriteAddresses& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendWriteAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::Connect(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void DependencyRPC::Stub::async::Connect(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::Connect(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::GetDataDependency(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::DataDependency* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::DataDependency, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDataDependency_, context, request, response);
}

void DependencyRPC::Stub::async::GetDataDependency(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::DataDependency* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::DataDependency, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataDependency_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetDataDependency(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::DataDependency* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataDependency_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::DataDependency>* DependencyRPC::Stub::PrepareAsyncGetDataDependencyRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::DataDependency, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDataDependency_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::DataDependency>* DependencyRPC::Stub::AsyncGetDataDependencyRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDataDependencyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendNewInput(::grpc::ClientContext* context, const ::dra::Input& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNewInput_, context, request, response);
}

void DependencyRPC::Stub::async::SendNewInput(::grpc::ClientContext* context, const ::dra::Input* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNewInput_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendNewInput(::grpc::ClientContext* context, const ::dra::Input* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNewInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendNewInputRaw(::grpc::ClientContext* context, const ::dra::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Input, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNewInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendNewInputRaw(::grpc::ClientContext* context, const ::dra::Input& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNewInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::GetTasks(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Tasks* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTasks_, context, request, response);
}

void DependencyRPC::Stub::async::GetTasks(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Tasks* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTasks_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetTasks(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Tasks* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Tasks>* DependencyRPC::Stub::PrepareAsyncGetTasksRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Tasks, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTasks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Tasks>* DependencyRPC::Stub::AsyncGetTasksRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTasksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::GetBootTasks(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Tasks* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBootTasks_, context, request, response);
}

void DependencyRPC::Stub::async::GetBootTasks(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Tasks* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBootTasks_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetBootTasks(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Tasks* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBootTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Tasks>* DependencyRPC::Stub::PrepareAsyncGetBootTasksRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Tasks, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBootTasks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Tasks>* DependencyRPC::Stub::AsyncGetBootTasksRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBootTasksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::ReturnTasks(::grpc::ClientContext* context, const ::dra::Tasks& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Tasks, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReturnTasks_, context, request, response);
}

void DependencyRPC::Stub::async::ReturnTasks(::grpc::ClientContext* context, const ::dra::Tasks* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Tasks, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReturnTasks_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::ReturnTasks(::grpc::ClientContext* context, const ::dra::Tasks* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReturnTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncReturnTasksRaw(::grpc::ClientContext* context, const ::dra::Tasks& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReturnTasks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncReturnTasksRaw(::grpc::ClientContext* context, const ::dra::Tasks& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReturnTasksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendBootInput(::grpc::ClientContext* context, const ::dra::Input& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBootInput_, context, request, response);
}

void DependencyRPC::Stub::async::SendBootInput(::grpc::ClientContext* context, const ::dra::Input* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBootInput_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendBootInput(::grpc::ClientContext* context, const ::dra::Input* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBootInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendBootInputRaw(::grpc::ClientContext* context, const ::dra::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Input, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBootInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendBootInputRaw(::grpc::ClientContext* context, const ::dra::Input& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBootInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendUnstableInput(::grpc::ClientContext* context, const ::dra::UnstableInput& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::UnstableInput, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendUnstableInput_, context, request, response);
}

void DependencyRPC::Stub::async::SendUnstableInput(::grpc::ClientContext* context, const ::dra::UnstableInput* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::UnstableInput, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendUnstableInput_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendUnstableInput(::grpc::ClientContext* context, const ::dra::UnstableInput* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendUnstableInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendUnstableInputRaw(::grpc::ClientContext* context, const ::dra::UnstableInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::UnstableInput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendUnstableInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendUnstableInputRaw(::grpc::ClientContext* context, const ::dra::UnstableInput& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendUnstableInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendLog(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendLog_, context, request, response);
}

void DependencyRPC::Stub::async::SendLog(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLog_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendLog(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendLogRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendLogRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::sendStat(::grpc::ClientContext* context, const ::dra::Statistic& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Statistic, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendStat_, context, request, response);
}

void DependencyRPC::Stub::async::sendStat(::grpc::ClientContext* context, const ::dra::Statistic* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Statistic, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendStat_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::sendStat(::grpc::ClientContext* context, const ::dra::Statistic* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendStat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncsendStatRaw(::grpc::ClientContext* context, const ::dra::Statistic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Statistic, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendStat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncsendStatRaw(::grpc::ClientContext* context, const ::dra::Statistic& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendStatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::GetNeed(::grpc::ClientContext* context, const ::dra::Empty& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNeed_, context, request, response);
}

void DependencyRPC::Stub::async::GetNeed(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNeed_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::GetNeed(::grpc::ClientContext* context, const ::dra::Empty* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncGetNeedRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncGetNeedRaw(::grpc::ClientContext* context, const ::dra::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DependencyRPC::Stub::SendNeedInput(::grpc::ClientContext* context, const ::dra::Input& request, ::dra::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendNeedInput_, context, request, response);
}

void DependencyRPC::Stub::async::SendNeedInput(::grpc::ClientContext* context, const ::dra::Input* request, ::dra::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNeedInput_, context, request, response, std::move(f));
}

void DependencyRPC::Stub::async::SendNeedInput(::grpc::ClientContext* context, const ::dra::Input* request, ::dra::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendNeedInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::PrepareAsyncSendNeedInputRaw(::grpc::ClientContext* context, const ::dra::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dra::Empty, ::dra::Input, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendNeedInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dra::Empty>* DependencyRPC::Stub::AsyncSendNeedInputRaw(::grpc::ClientContext* context, const ::dra::Input& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendNeedInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

DependencyRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Empty* resp) {
               return service->GetVMOffsets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Empty* resp) {
               return service->SendNumberBasicBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Empty* resp) {
               return service->SendNumberBasicBlockCovered(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Inputs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Inputs* resp) {
               return service->GetNewInput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Dependency, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Dependency* req,
             ::dra::Empty* resp) {
               return service->SendDependency(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Conditions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Conditions* resp) {
               return service->GetCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::WriteAddresses, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::WriteAddresses* req,
             ::dra::Empty* resp) {
               return service->SendWriteAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Empty* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::DataDependency, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::DataDependency* resp) {
               return service->GetDataDependency(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Input* req,
             ::dra::Empty* resp) {
               return service->SendNewInput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Tasks* resp) {
               return service->GetTasks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Tasks, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Tasks* resp) {
               return service->GetBootTasks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Tasks, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Tasks* req,
             ::dra::Empty* resp) {
               return service->ReturnTasks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Input* req,
             ::dra::Empty* resp) {
               return service->SendBootInput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::UnstableInput, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::UnstableInput* req,
             ::dra::Empty* resp) {
               return service->SendUnstableInput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Empty* resp) {
               return service->SendLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Statistic, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Statistic* req,
             ::dra::Empty* resp) {
               return service->sendStat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Empty, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Empty* req,
             ::dra::Empty* resp) {
               return service->GetNeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DependencyRPC_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DependencyRPC::Service, ::dra::Input, ::dra::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DependencyRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dra::Input* req,
             ::dra::Empty* resp) {
               return service->SendNeedInput(ctx, req, resp);
             }, this)));
}

DependencyRPC::Service::~Service() {
}

::grpc::Status DependencyRPC::Service::GetVMOffsets(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendNumberBasicBlock(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendNumberBasicBlockCovered(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::GetNewInput(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Inputs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendDependency(::grpc::ServerContext* context, const ::dra::Dependency* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::GetCondition(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Conditions* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendWriteAddress(::grpc::ServerContext* context, const ::dra::WriteAddresses* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::Connect(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::GetDataDependency(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::DataDependency* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendNewInput(::grpc::ServerContext* context, const ::dra::Input* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::GetTasks(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Tasks* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::GetBootTasks(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Tasks* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::ReturnTasks(::grpc::ServerContext* context, const ::dra::Tasks* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendBootInput(::grpc::ServerContext* context, const ::dra::Input* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendUnstableInput(::grpc::ServerContext* context, const ::dra::UnstableInput* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendLog(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::sendStat(::grpc::ServerContext* context, const ::dra::Statistic* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::GetNeed(::grpc::ServerContext* context, const ::dra::Empty* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DependencyRPC::Service::SendNeedInput(::grpc::ServerContext* context, const ::dra::Input* request, ::dra::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dra

