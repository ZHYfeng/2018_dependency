// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dependency.proto

#include "Dependency.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileOperationsFunction_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Input_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Input_Input_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_StatusEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UncoveredAddress_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_InputEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UncoveredAddress_InputStatusEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_TasksCountEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_WriteCountEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WriteAddress_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_InputEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_address_AddrEntry_DoNotUse_Dependency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_runTimeData_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_writeAddressAttributes_Dependency_2eproto;
namespace dra {
class WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress_UncoveredAddressEntry_DoNotUse> _instance;
} _WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_;
class WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress_FileOperationsFunctionEntry_DoNotUse> _instance;
} _WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_;
class WriteAddress_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress_InputEntry_DoNotUse> _instance;
} _WriteAddress_InputEntry_DoNotUse_default_instance_;
class WriteAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress> _instance;
} _WriteAddress_default_instance_;
class writeAddressAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<writeAddressAttributes> _instance;
} _writeAddressAttributes_default_instance_;
class Status_StatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status_StatusEntry_DoNotUse> _instance;
} _Status_StatusEntry_DoNotUse_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_InputEntry_DoNotUse> _instance;
} _UncoveredAddress_InputEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_WriteAddressEntry_DoNotUse> _instance;
} _UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_;
class UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_InputStatusEntry_DoNotUse> _instance;
} _UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_WriteAddressStatusEntry_DoNotUse> _instance;
} _UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_;
class UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_TasksCountEntry_DoNotUse> _instance;
} _UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_WriteCountEntry_DoNotUse> _instance;
} _UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_;
class UncoveredAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress> _instance;
} _UncoveredAddress_default_instance_;
class DependencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dependency> _instance;
} _Dependency_default_instance_;
class FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperationsFunction_WriteAddressEntry_DoNotUse> _instance;
} _FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_;
class FileOperationsFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperationsFunction> _instance;
} _FileOperationsFunction_default_instance_;
class FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperations_FileOperationsFunctionEntry_DoNotUse> _instance;
} _FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_;
class FileOperationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperations> _instance;
} _FileOperations_default_instance_;
class address_AddrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<address_AddrEntry_DoNotUse> _instance;
} _address_AddrEntry_DoNotUse_default_instance_;
class addressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<address> _instance;
} _address_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class ConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conditions> _instance;
} _Conditions_default_instance_;
class WriteAddressesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddresses> _instance;
} _WriteAddresses_default_instance_;
}  // namespace dra
static void InitDefaultsscc_info_Condition_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Condition_default_instance_;
    new (ptr) ::dra::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Condition_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_Conditions_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Conditions_default_instance_;
    new (ptr) ::dra::Conditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Conditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conditions_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Conditions_Dependency_2eproto}, {
      &scc_info_Condition_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_Dependency_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Dependency_default_instance_;
    new (ptr) ::dra::Dependency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Dependency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Dependency_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Dependency_Dependency_2eproto}, {
      &scc_info_Input_Input_2eproto.base,
      &scc_info_UncoveredAddress_Dependency_2eproto.base,
      &scc_info_WriteAddress_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_FileOperations_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperations_default_instance_;
    new (ptr) ::dra::FileOperations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::FileOperations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileOperations_Dependency_2eproto}, {
      &scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse();
  }
  ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto}, {
      &scc_info_FileOperationsFunction_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_FileOperationsFunction_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperationsFunction_default_instance_;
    new (ptr) ::dra::FileOperationsFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::FileOperationsFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileOperationsFunction_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FileOperationsFunction_Dependency_2eproto}, {
      &scc_info_runTimeData_Task_2eproto.base,
      &scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse();
  }
  ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_Status_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Status_default_instance_;
    new (ptr) ::dra::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Status_Dependency_2eproto}, {
      &scc_info_Status_StatusEntry_DoNotUse_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_Status_StatusEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Status_StatusEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Status_StatusEntry_DoNotUse();
  }
  ::dra::Status_StatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_StatusEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_StatusEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_UncoveredAddress_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_default_instance_;
    new (ptr) ::dra::UncoveredAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::UncoveredAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UncoveredAddress_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_UncoveredAddress_Dependency_2eproto}, {
      &scc_info_UncoveredAddress_InputEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_runTimeData_Task_2eproto.base,
      &scc_info_UncoveredAddress_InputStatusEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_UncoveredAddress_TasksCountEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_UncoveredAddress_WriteCountEntry_DoNotUse_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_UncoveredAddress_InputEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_InputEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_InputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_InputEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UncoveredAddress_InputEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_UncoveredAddress_InputStatusEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_InputStatusEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_InputStatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UncoveredAddress_InputStatusEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UncoveredAddress_InputStatusEntry_DoNotUse_Dependency_2eproto}, {
      &scc_info_Status_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_UncoveredAddress_TasksCountEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_TasksCountEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_TasksCountEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_TasksCountEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UncoveredAddress_TasksCountEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_Dependency_2eproto}, {
      &scc_info_writeAddressAttributes_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_UncoveredAddress_WriteCountEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_WriteCountEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_WriteCountEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_WriteCountEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UncoveredAddress_WriteCountEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_WriteAddress_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_default_instance_;
    new (ptr) ::dra::WriteAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::WriteAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WriteAddress_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WriteAddress_Dependency_2eproto}, {
      &scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_WriteAddress_InputEntry_DoNotUse_Dependency_2eproto.base,
      &scc_info_runTimeData_Task_2eproto.base,}};

static void InitDefaultsscc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse();
  }
  ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_WriteAddress_InputEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::WriteAddress_InputEntry_DoNotUse();
  }
  ::dra::WriteAddress_InputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_InputEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteAddress_InputEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_Dependency_2eproto}, {
      &scc_info_writeAddressAttributes_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_WriteAddresses_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddresses_default_instance_;
    new (ptr) ::dra::WriteAddresses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::WriteAddresses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WriteAddresses_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WriteAddresses_Dependency_2eproto}, {
      &scc_info_Condition_Dependency_2eproto.base,
      &scc_info_WriteAddress_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_address_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_address_default_instance_;
    new (ptr) ::dra::address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_address_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_address_Dependency_2eproto}, {
      &scc_info_address_AddrEntry_DoNotUse_Dependency_2eproto.base,}};

static void InitDefaultsscc_info_address_AddrEntry_DoNotUse_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_address_AddrEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::address_AddrEntry_DoNotUse();
  }
  ::dra::address_AddrEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_address_AddrEntry_DoNotUse_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_address_AddrEntry_DoNotUse_Dependency_2eproto}, {}};

static void InitDefaultsscc_info_writeAddressAttributes_Dependency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_writeAddressAttributes_default_instance_;
    new (ptr) ::dra::writeAddressAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::writeAddressAttributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_writeAddressAttributes_Dependency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_writeAddressAttributes_Dependency_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Dependency_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Dependency_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Dependency_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Dependency_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, file_operations_function_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, input_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, run_time_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, repeat_),
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, prio_),
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Status, status_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, number_arrive_basicblocks_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, number_dominator_instructions_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, input_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, count_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, run_time_date_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, input_status_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_address_status_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, tasks_count_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, input_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, file_operations_name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, cmd_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, run_time_date_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, file_operations_function_),
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::address, name_),
  PROTOBUF_FIELD_OFFSET(::dra::address, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Condition, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, successor_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_right_branch_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Conditions, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, condition_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, write_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse)},
  { 9, 16, sizeof(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse)},
  { 18, 25, sizeof(::dra::WriteAddress_InputEntry_DoNotUse)},
  { 27, -1, sizeof(::dra::WriteAddress)},
  { 39, -1, sizeof(::dra::writeAddressAttributes)},
  { 47, 54, sizeof(::dra::Status_StatusEntry_DoNotUse)},
  { 56, -1, sizeof(::dra::Status)},
  { 62, 69, sizeof(::dra::UncoveredAddress_InputEntry_DoNotUse)},
  { 71, 78, sizeof(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse)},
  { 80, 87, sizeof(::dra::UncoveredAddress_InputStatusEntry_DoNotUse)},
  { 89, 96, sizeof(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse)},
  { 98, 105, sizeof(::dra::UncoveredAddress_TasksCountEntry_DoNotUse)},
  { 107, 114, sizeof(::dra::UncoveredAddress_WriteCountEntry_DoNotUse)},
  { 116, -1, sizeof(::dra::UncoveredAddress)},
  { 135, -1, sizeof(::dra::Dependency)},
  { 143, 150, sizeof(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse)},
  { 152, -1, sizeof(::dra::FileOperationsFunction)},
  { 163, 170, sizeof(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse)},
  { 172, -1, sizeof(::dra::FileOperations)},
  { 179, 186, sizeof(::dra::address_AddrEntry_DoNotUse)},
  { 188, -1, sizeof(::dra::address)},
  { 195, -1, sizeof(::dra::Condition)},
  { 208, -1, sizeof(::dra::Conditions)},
  { 214, -1, sizeof(::dra::WriteAddresses)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_writeAddressAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Status_StatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperationsFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_address_AddrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Conditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddresses_default_instance_),
};

const char descriptor_table_protodef_Dependency_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Dependency.proto\022\003dra\032\013Input.proto\032\nTa"
  "sk.proto\"\374\003\n\014WriteAddress\022\025\n\rwrite_addre"
  "ss\030\002 \001(\r\022\031\n\021condition_address\030\003 \001(\r\022\014\n\004k"
  "ind\030\004 \001(\r\022B\n\021uncovered_address\030\027 \003(\0132\'.d"
  "ra.WriteAddress.UncoveredAddressEntry\022O\n"
  "\030file_operations_function\030\030 \003(\0132-.dra.Wr"
  "iteAddress.FileOperationsFunctionEntry\022+"
  "\n\005input\030\031 \003(\0132\034.dra.WriteAddress.InputEn"
  "try\022\'\n\rrun_time_date\030\013 \001(\0132\020.dra.runTime"
  "Data\032T\n\025UncoveredAddressEntry\022\013\n\003key\030\001 \001"
  "(\r\022*\n\005value\030\002 \001(\0132\033.dra.writeAddressAttr"
  "ibutes:\0028\001\032=\n\033FileOperationsFunctionEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\032,\n\nInp"
  "utEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\""
  "M\n\026writeAddressAttributes\022\025\n\rwrite_addre"
  "ss\030\002 \001(\r\022\016\n\006repeat\030\007 \001(\r\022\014\n\004prio\030\006 \001(\r\"q"
  "\n\006Status\022\'\n\006status\030\001 \003(\0132\027.dra.Status.St"
  "atusEntry\032>\n\013StatusEntry\022\013\n\003key\030\001 \001(\r\022\036\n"
  "\005value\030\002 \001(\0162\017.dra.taskStatus:\0028\001\"\370\007\n\020Un"
  "coveredAddress\022\031\n\021condition_address\030\001 \001("
  "\r\022\031\n\021uncovered_address\030\002 \001(\r\022\034\n\024right_br"
  "anch_address\030\003 \003(\r\022!\n\031number_arrive_basi"
  "cblocks\030\004 \001(\r\022\'\n\004kind\030\005 \001(\0162\031.dra.Uncove"
  "redAddressKind\022%\n\035number_dominator_instr"
  "uctions\030\006 \001(\r\022/\n\005input\030\026 \003(\0132 .dra.Uncov"
  "eredAddress.InputEntry\022>\n\rwrite_address\030"
  "\027 \003(\0132\'.dra.UncoveredAddress.WriteAddres"
  "sEntry\022\r\n\005count\030\030 \001(\r\022\'\n\rrun_time_date\030\010"
  " \001(\0132\020.dra.runTimeData\022<\n\014input_status\030\037"
  " \003(\0132&.dra.UncoveredAddress.InputStatusE"
  "ntry\022K\n\024write_address_status\030  \003(\0132-.dra"
  ".UncoveredAddress.WriteAddressStatusEntr"
  "y\022:\n\013tasks_count\030! \003(\0132%.dra.UncoveredAd"
  "dress.TasksCountEntry\022:\n\013write_count\030\" \003"
  "(\0132%.dra.UncoveredAddress.WriteCountEntr"
  "y\032,\n\nInputEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\r:\0028\001\032P\n\021WriteAddressEntry\022\013\n\003key\030\001 \001("
  "\r\022*\n\005value\030\002 \001(\0132\033.dra.writeAddressAttri"
  "butes:\0028\001\032\?\n\020InputStatusEntry\022\013\n\003key\030\001 \001"
  "(\t\022\032\n\005value\030\002 \001(\0132\013.dra.Status:\0028\001\032J\n\027Wr"
  "iteAddressStatusEntry\022\013\n\003key\030\001 \001(\r\022\036\n\005va"
  "lue\030\002 \001(\0162\017.dra.taskStatus:\0028\001\0321\n\017TasksC"
  "ountEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\r:\0028"
  "\001\0321\n\017WriteCountEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005val"
  "ue\030\002 \001(\r:\0028\001\"\203\001\n\nDependency\022\031\n\005input\030\001 \001"
  "(\0132\n.dra.Input\0220\n\021uncovered_address\030\002 \001("
  "\0132\025.dra.UncoveredAddress\022(\n\rwrite_addres"
  "s\030\003 \003(\0132\021.dra.WriteAddress\"\236\002\n\026FileOpera"
  "tionsFunction\022\014\n\004name\030\001 \001(\t\022\034\n\024file_oper"
  "ations_name\030\002 \001(\t\022\'\n\004kind\030\003 \001(\0162\031.dra.fi"
  "le_operations_kind\022\013\n\003cmd\030\004 \001(\004\022\'\n\rrun_t"
  "ime_date\030\005 \001(\0132\020.dra.runTimeData\022D\n\rwrit"
  "e_address\030\013 \003(\0132-.dra.FileOperationsFunc"
  "tion.WriteAddressEntry\0323\n\021WriteAddressEn"
  "try\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\315\001\n\016"
  "FileOperations\022\014\n\004name\030\001 \001(\t\022Q\n\030file_ope"
  "rations_function\030\003 \003(\0132/.dra.FileOperati"
  "ons.FileOperationsFunctionEntry\032Z\n\033FileO"
  "perationsFunctionEntry\022\013\n\003key\030\001 \001(\003\022*\n\005v"
  "alue\030\002 \001(\0132\033.dra.FileOperationsFunction:"
  "\0028\001\"j\n\007address\022\014\n\004name\030\001 \001(\t\022$\n\004addr\030\002 \003"
  "(\0132\026.dra.address.AddrEntry\032+\n\tAddrEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\361\001\n\tCond"
  "ition\022\031\n\021condition_address\030\001 \001(\004\022#\n\033syzk"
  "aller_condition_address\030\002 \001(\r\022\031\n\021uncover"
  "ed_address\030\003 \001(\004\022#\n\033syzkaller_uncovered_"
  "address\030\004 \001(\r\022\013\n\003idx\030\005 \001(\r\022\021\n\tsuccessor\030"
  "\006 \001(\004\022\034\n\024right_branch_address\030\007 \003(\004\022&\n\036s"
  "yzkaller_right_branch_address\030\010 \003(\r\"/\n\nC"
  "onditions\022!\n\tcondition\030\n \003(\0132\016.dra.Condi"
  "tion\"]\n\016WriteAddresses\022!\n\tcondition\030\001 \001("
  "\0132\016.dra.Condition\022(\n\rwrite_address\030\004 \003(\013"
  "2\021.dra.WriteAddress*W\n\024UncoveredAddressK"
  "ind\022\013\n\007Outside\020\000\022\020\n\014InputRelated\020\001\022\025\n\021De"
  "pendencyRelated\020\002\022\t\n\005Other\020\003*\215\001\n\024file_op"
  "erations_kind\022\013\n\007default\020\000\022\010\n\004init\020\001\022\n\n\006"
  "llseek\020\002\022\010\n\004read\020\003\022\t\n\005write\020\004\022\010\n\004poll\020\t\022"
  "\022\n\016unlocked_ioctl\020\n\022\010\n\004mmap\020\014\022\010\n\004open\020\016\022"
  "\013\n\007release\020\020B\007Z\005.;drab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Dependency_2eproto_deps[2] = {
  &::descriptor_table_Input_2eproto,
  &::descriptor_table_Task_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Dependency_2eproto_sccs[24] = {
  &scc_info_Condition_Dependency_2eproto.base,
  &scc_info_Conditions_Dependency_2eproto.base,
  &scc_info_Dependency_Dependency_2eproto.base,
  &scc_info_FileOperations_Dependency_2eproto.base,
  &scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_FileOperationsFunction_Dependency_2eproto.base,
  &scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_Status_Dependency_2eproto.base,
  &scc_info_Status_StatusEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_InputEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_InputStatusEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_TasksCountEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_UncoveredAddress_WriteCountEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_WriteAddress_Dependency_2eproto.base,
  &scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_WriteAddress_InputEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_WriteAddresses_Dependency_2eproto.base,
  &scc_info_address_Dependency_2eproto.base,
  &scc_info_address_AddrEntry_DoNotUse_Dependency_2eproto.base,
  &scc_info_writeAddressAttributes_Dependency_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Dependency_2eproto_once;
static bool descriptor_table_Dependency_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Dependency_2eproto = {
  &descriptor_table_Dependency_2eproto_initialized, descriptor_table_protodef_Dependency_2eproto, "Dependency.proto", 3149,
  &descriptor_table_Dependency_2eproto_once, descriptor_table_Dependency_2eproto_sccs, descriptor_table_Dependency_2eproto_deps, 24, 2,
  schemas, file_default_instances, TableStruct_Dependency_2eproto::offsets,
  file_level_metadata_Dependency_2eproto, 24, file_level_enum_descriptors_Dependency_2eproto, file_level_service_descriptors_Dependency_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Dependency_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Dependency_2eproto), true);
namespace dra {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UncoveredAddressKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Dependency_2eproto);
  return file_level_enum_descriptors_Dependency_2eproto[0];
}
bool UncoveredAddressKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_operations_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Dependency_2eproto);
  return file_level_enum_descriptors_Dependency_2eproto[1];
}
bool file_operations_kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 10:
    case 12:
    case 14:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse() {}
WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_UncoveredAddressEntry_DoNotUse::MergeFrom(const WriteAddress_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WriteAddress_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse() {}
WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_FileOperationsFunctionEntry_DoNotUse::MergeFrom(const WriteAddress_FileOperationsFunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_FileOperationsFunctionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WriteAddress_FileOperationsFunctionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse() {}
WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_InputEntry_DoNotUse::MergeFrom(const WriteAddress_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WriteAddress_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void WriteAddress::InitAsDefaultInstance() {
  ::dra::_WriteAddress_default_instance_._instance.get_mutable()->run_time_date_ = const_cast< ::dra::runTimeData*>(
      ::dra::runTimeData::internal_default_instance());
}
class WriteAddress::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const WriteAddress* msg);
};

const ::dra::runTimeData&
WriteAddress::_Internal::run_time_date(const WriteAddress* msg) {
  return *msg->run_time_date_;
}
void WriteAddress::clear_run_time_date() {
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
}
WriteAddress::WriteAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.WriteAddress)
}
WriteAddress::WriteAddress(const WriteAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  input_.MergeFrom(from.input_);
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&write_address_, &from.write_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.WriteAddress)
}

void WriteAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteAddress_Dependency_2eproto.base);
  ::memset(&run_time_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

WriteAddress::~WriteAddress() {
  // @@protoc_insertion_point(destructor:dra.WriteAddress)
  SharedDtor();
}

void WriteAddress::SharedDtor() {
  if (this != internal_default_instance()) delete run_time_date_;
}

void WriteAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteAddress& WriteAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteAddress_Dependency_2eproto.base);
  return *internal_default_instance();
}


void WriteAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.WriteAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncovered_address_.Clear();
  file_operations_function_.Clear();
  input_.Clear();
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* WriteAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 condition_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> file_operations_function = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&file_operations_function_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> input = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.WriteAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // uint32 condition_address = 3;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_condition_address(), target);
  }

  // uint32 kind = 4;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kind(), target);
  }

  // .dra.runTimeData run_time_date = 11;
  if (this->has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::run_time_date(this), target, stream);
  }

  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, uint32> file_operations_function = 24;
  if (!this->_internal_file_operations_function().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.WriteAddress.FileOperationsFunctionEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations_function().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations_function().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it) {
        target = WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint32> input = 25;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.WriteAddress.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(25, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = WriteAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(25, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.WriteAddress)
  return target;
}

size_t WriteAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.WriteAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> file_operations_function = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_function_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_file_operations_function().begin();
      it != this->_internal_file_operations_function().end(); ++it) {
    total_size += WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> input = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += WriteAddress_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.runTimeData run_time_date = 11;
  if (this->has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_address());
  }

  // uint32 condition_address = 3;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_address());
  }

  // uint32 kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.WriteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.WriteAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.WriteAddress)
    MergeFrom(*source);
  }
}

void WriteAddress::MergeFrom(const WriteAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.WriteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uncovered_address_.MergeFrom(from.uncovered_address_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  input_.MergeFrom(from.input_);
  if (from.has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from.write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void WriteAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.WriteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteAddress::CopyFrom(const WriteAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.WriteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAddress::IsInitialized() const {
  return true;
}

void WriteAddress::InternalSwap(WriteAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uncovered_address_.Swap(&other->uncovered_address_);
  file_operations_function_.Swap(&other->file_operations_function_);
  input_.Swap(&other->input_);
  swap(run_time_date_, other->run_time_date_);
  swap(write_address_, other->write_address_);
  swap(condition_address_, other->condition_address_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void writeAddressAttributes::InitAsDefaultInstance() {
}
class writeAddressAttributes::_Internal {
 public:
};

writeAddressAttributes::writeAddressAttributes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.writeAddressAttributes)
}
writeAddressAttributes::writeAddressAttributes(const writeAddressAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&write_address_, &from.write_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
  // @@protoc_insertion_point(copy_constructor:dra.writeAddressAttributes)
}

void writeAddressAttributes::SharedCtor() {
  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
}

writeAddressAttributes::~writeAddressAttributes() {
  // @@protoc_insertion_point(destructor:dra.writeAddressAttributes)
  SharedDtor();
}

void writeAddressAttributes::SharedDtor() {
}

void writeAddressAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const writeAddressAttributes& writeAddressAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_writeAddressAttributes_Dependency_2eproto.base);
  return *internal_default_instance();
}


void writeAddressAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.writeAddressAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
  _internal_metadata_.Clear();
}

const char* writeAddressAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 repeat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* writeAddressAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.writeAddressAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // uint32 prio = 6;
  if (this->prio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prio(), target);
  }

  // uint32 repeat = 7;
  if (this->repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.writeAddressAttributes)
  return target;
}

size_t writeAddressAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.writeAddressAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_address());
  }

  // uint32 prio = 6;
  if (this->prio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prio());
  }

  // uint32 repeat = 7;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void writeAddressAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.writeAddressAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const writeAddressAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<writeAddressAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.writeAddressAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.writeAddressAttributes)
    MergeFrom(*source);
  }
}

void writeAddressAttributes::MergeFrom(const writeAddressAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.writeAddressAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from.prio() != 0) {
    _internal_set_prio(from._internal_prio());
  }
  if (from.repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
}

void writeAddressAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.writeAddressAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void writeAddressAttributes::CopyFrom(const writeAddressAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.writeAddressAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool writeAddressAttributes::IsInitialized() const {
  return true;
}

void writeAddressAttributes::InternalSwap(writeAddressAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(write_address_, other->write_address_);
  swap(prio_, other->prio_);
  swap(repeat_, other->repeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata writeAddressAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Status_StatusEntry_DoNotUse::Status_StatusEntry_DoNotUse() {}
Status_StatusEntry_DoNotUse::Status_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Status_StatusEntry_DoNotUse::MergeFrom(const Status_StatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Status_StatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Status_StatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
};

Status::Status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.MergeFrom(from.status_);
  // @@protoc_insertion_point(copy_constructor:dra.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_Dependency_2eproto.base);
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:dra.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_Dependency_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  _internal_metadata_.Clear();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .dra.taskStatus> status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .dra.taskStatus> status = 1;
  if (!this->_internal_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Status_StatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it) {
        target = Status_StatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.taskStatus> status = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
      it = this->_internal_status().begin();
      it != this->_internal_status().end(); ++it) {
    total_size += Status_StatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse() {}
UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_InputEntry_DoNotUse::MergeFrom(const UncoveredAddress_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse() {}
UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteAddressEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_WriteAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UncoveredAddress_InputStatusEntry_DoNotUse::UncoveredAddress_InputStatusEntry_DoNotUse() {}
UncoveredAddress_InputStatusEntry_DoNotUse::UncoveredAddress_InputStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_InputStatusEntry_DoNotUse::MergeFrom(const UncoveredAddress_InputStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_InputStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_InputStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UncoveredAddress_WriteAddressStatusEntry_DoNotUse::UncoveredAddress_WriteAddressStatusEntry_DoNotUse() {}
UncoveredAddress_WriteAddressStatusEntry_DoNotUse::UncoveredAddress_WriteAddressStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteAddressStatusEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteAddressStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteAddressStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_WriteAddressStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UncoveredAddress_TasksCountEntry_DoNotUse::UncoveredAddress_TasksCountEntry_DoNotUse() {}
UncoveredAddress_TasksCountEntry_DoNotUse::UncoveredAddress_TasksCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_TasksCountEntry_DoNotUse::MergeFrom(const UncoveredAddress_TasksCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_TasksCountEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_TasksCountEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UncoveredAddress_WriteCountEntry_DoNotUse::UncoveredAddress_WriteCountEntry_DoNotUse() {}
UncoveredAddress_WriteCountEntry_DoNotUse::UncoveredAddress_WriteCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteCountEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteCountEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_WriteCountEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void UncoveredAddress::InitAsDefaultInstance() {
  ::dra::_UncoveredAddress_default_instance_._instance.get_mutable()->run_time_date_ = const_cast< ::dra::runTimeData*>(
      ::dra::runTimeData::internal_default_instance());
}
class UncoveredAddress::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const UncoveredAddress* msg);
};

const ::dra::runTimeData&
UncoveredAddress::_Internal::run_time_date(const UncoveredAddress* msg) {
  return *msg->run_time_date_;
}
void UncoveredAddress::clear_run_time_date() {
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
}
UncoveredAddress::UncoveredAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.UncoveredAddress)
}
UncoveredAddress::UncoveredAddress(const UncoveredAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      right_branch_address_(from.right_branch_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  write_address_.MergeFrom(from.write_address_);
  input_status_.MergeFrom(from.input_status_);
  write_address_status_.MergeFrom(from.write_address_status_);
  tasks_count_.MergeFrom(from.tasks_count_);
  write_count_.MergeFrom(from.write_count_);
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&condition_address_, &from.condition_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dra.UncoveredAddress)
}

void UncoveredAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UncoveredAddress_Dependency_2eproto.base);
  ::memset(&run_time_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&run_time_date_)) + sizeof(count_));
}

UncoveredAddress::~UncoveredAddress() {
  // @@protoc_insertion_point(destructor:dra.UncoveredAddress)
  SharedDtor();
}

void UncoveredAddress::SharedDtor() {
  if (this != internal_default_instance()) delete run_time_date_;
}

void UncoveredAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UncoveredAddress& UncoveredAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UncoveredAddress_Dependency_2eproto.base);
  return *internal_default_instance();
}


void UncoveredAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UncoveredAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  input_.Clear();
  write_address_.Clear();
  input_status_.Clear();
  write_address_status_.Clear();
  tasks_count_.Clear();
  write_count_.Clear();
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* UncoveredAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 condition_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uncovered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 right_branch_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_arrive_basicblocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_arrive_basicblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.UncoveredAddressKind kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::UncoveredAddressKind>(val));
        } else goto handle_unusual;
        continue;
      // uint32 number_dominator_instructions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_dominator_instructions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, uint32> input = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.writeAddressAttributes> write_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .dra.Status> input_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.taskStatus> write_address_status = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_address_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, uint32> tasks_count = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&tasks_count_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, uint32> write_count = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_count_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UncoveredAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UncoveredAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 condition_address = 1;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_address(), target);
  }

  // uint32 uncovered_address = 2;
  if (this->uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uncovered_address(), target);
  }

  // repeated uint32 right_branch_address = 3;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_right_branch_address(), byte_size, target);
    }
  }

  // uint32 number_arrive_basicblocks = 4;
  if (this->number_arrive_basicblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number_arrive_basicblocks(), target);
  }

  // .dra.UncoveredAddressKind kind = 5;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_kind(), target);
  }

  // uint32 number_dominator_instructions = 6;
  if (this->number_dominator_instructions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_dominator_instructions(), target);
  }

  // .dra.runTimeData run_time_date = 8;
  if (this->has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::run_time_date(this), target, stream);
  }

  // map<string, uint32> input = 22;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.UncoveredAddress.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = UncoveredAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // uint32 count = 24;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_count(), target);
  }

  // map<string, .dra.Status> input_status = 31;
  if (!this->_internal_input_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.UncoveredAddress.InputStatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_iterator
          it = this->_internal_input_status().begin();
          it != this->_internal_input_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_InputStatusEntry_DoNotUse::Funcs::InternalSerialize(31, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_iterator
          it = this->_internal_input_status().begin();
          it != this->_internal_input_status().end(); ++it) {
        target = UncoveredAddress_InputStatusEntry_DoNotUse::Funcs::InternalSerialize(31, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .dra.taskStatus> write_address_status = 32;
  if (!this->_internal_write_address_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_write_address_status().begin();
          it != this->_internal_write_address_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteAddressStatusEntry_DoNotUse::Funcs::InternalSerialize(32, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_write_address_status().begin();
          it != this->_internal_write_address_status().end(); ++it) {
        target = UncoveredAddress_WriteAddressStatusEntry_DoNotUse::Funcs::InternalSerialize(32, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, uint32> tasks_count = 33;
  if (!this->_internal_tasks_count().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tasks_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tasks_count().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_tasks_count().begin();
          it != this->_internal_tasks_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_TasksCountEntry_DoNotUse::Funcs::InternalSerialize(33, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_tasks_count().begin();
          it != this->_internal_tasks_count().end(); ++it) {
        target = UncoveredAddress_TasksCountEntry_DoNotUse::Funcs::InternalSerialize(33, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, uint32> write_count = 34;
  if (!this->_internal_write_count().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_count().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_count().begin();
          it != this->_internal_write_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteCountEntry_DoNotUse::Funcs::InternalSerialize(34, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_count().begin();
          it != this->_internal_write_count().end(); ++it) {
        target = UncoveredAddress_WriteCountEntry_DoNotUse::Funcs::InternalSerialize(34, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UncoveredAddress)
  return target;
}

size_t UncoveredAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UncoveredAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 right_branch_address = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, uint32> input = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += UncoveredAddress_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .dra.Status> input_status = 31;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_iterator
      it = this->_internal_input_status().begin();
      it != this->_internal_input_status().end(); ++it) {
    total_size += UncoveredAddress_InputStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.taskStatus> write_address_status = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
      it = this->_internal_write_address_status().begin();
      it != this->_internal_write_address_status().end(); ++it) {
    total_size += UncoveredAddress_WriteAddressStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, uint32> tasks_count = 33;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_count_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_tasks_count().begin();
      it != this->_internal_tasks_count().end(); ++it) {
    total_size += UncoveredAddress_TasksCountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, uint32> write_count = 34;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_count_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_write_count().begin();
      it != this->_internal_write_count().end(); ++it) {
    total_size += UncoveredAddress_WriteCountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.runTimeData run_time_date = 8;
  if (this->has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint32 condition_address = 1;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_address());
  }

  // uint32 uncovered_address = 2;
  if (this->uncovered_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uncovered_address());
  }

  // uint32 number_arrive_basicblocks = 4;
  if (this->number_arrive_basicblocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_arrive_basicblocks());
  }

  // .dra.UncoveredAddressKind kind = 5;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // uint32 number_dominator_instructions = 6;
  if (this->number_dominator_instructions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_dominator_instructions());
  }

  // uint32 count = 24;
  if (this->count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UncoveredAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.UncoveredAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const UncoveredAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UncoveredAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.UncoveredAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.UncoveredAddress)
    MergeFrom(*source);
  }
}

void UncoveredAddress::MergeFrom(const UncoveredAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UncoveredAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  input_.MergeFrom(from.input_);
  write_address_.MergeFrom(from.write_address_);
  input_status_.MergeFrom(from.input_status_);
  write_address_status_.MergeFrom(from.write_address_status_);
  tasks_count_.MergeFrom(from.tasks_count_);
  write_count_.MergeFrom(from.write_count_);
  if (from.has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.uncovered_address() != 0) {
    _internal_set_uncovered_address(from._internal_uncovered_address());
  }
  if (from.number_arrive_basicblocks() != 0) {
    _internal_set_number_arrive_basicblocks(from._internal_number_arrive_basicblocks());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.number_dominator_instructions() != 0) {
    _internal_set_number_dominator_instructions(from._internal_number_dominator_instructions());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UncoveredAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.UncoveredAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UncoveredAddress::CopyFrom(const UncoveredAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UncoveredAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UncoveredAddress::IsInitialized() const {
  return true;
}

void UncoveredAddress::InternalSwap(UncoveredAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  input_.Swap(&other->input_);
  write_address_.Swap(&other->write_address_);
  input_status_.Swap(&other->input_status_);
  write_address_status_.Swap(&other->write_address_status_);
  tasks_count_.Swap(&other->tasks_count_);
  write_count_.Swap(&other->write_count_);
  swap(run_time_date_, other->run_time_date_);
  swap(condition_address_, other->condition_address_);
  swap(uncovered_address_, other->uncovered_address_);
  swap(number_arrive_basicblocks_, other->number_arrive_basicblocks_);
  swap(kind_, other->kind_);
  swap(number_dominator_instructions_, other->number_dominator_instructions_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dependency::InitAsDefaultInstance() {
  ::dra::_Dependency_default_instance_._instance.get_mutable()->input_ = const_cast< ::dra::Input*>(
      ::dra::Input::internal_default_instance());
  ::dra::_Dependency_default_instance_._instance.get_mutable()->uncovered_address_ = const_cast< ::dra::UncoveredAddress*>(
      ::dra::UncoveredAddress::internal_default_instance());
}
class Dependency::_Internal {
 public:
  static const ::dra::Input& input(const Dependency* msg);
  static const ::dra::UncoveredAddress& uncovered_address(const Dependency* msg);
};

const ::dra::Input&
Dependency::_Internal::input(const Dependency* msg) {
  return *msg->input_;
}
const ::dra::UncoveredAddress&
Dependency::_Internal::uncovered_address(const Dependency* msg) {
  return *msg->uncovered_address_;
}
void Dependency::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
Dependency::Dependency()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Dependency)
}
Dependency::Dependency(const Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      write_address_(from.write_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_uncovered_address()) {
    uncovered_address_ = new ::dra::UncoveredAddress(*from.uncovered_address_);
  } else {
    uncovered_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.Dependency)
}

void Dependency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dependency_Dependency_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncovered_address_) -
      reinterpret_cast<char*>(&input_)) + sizeof(uncovered_address_));
}

Dependency::~Dependency() {
  // @@protoc_insertion_point(destructor:dra.Dependency)
  SharedDtor();
}

void Dependency::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete uncovered_address_;
}

void Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dependency& Dependency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dependency_Dependency_2eproto.base);
  return *internal_default_instance();
}


void Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Dependency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uncovered_address_ != nullptr) {
    delete uncovered_address_;
  }
  uncovered_address_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.UncoveredAddress uncovered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncovered_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dra.WriteAddress write_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dependency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Dependency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // .dra.UncoveredAddress uncovered_address = 2;
  if (this->has_uncovered_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uncovered_address(this), target, stream);
  }

  // repeated .dra.WriteAddress write_address = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_write_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Dependency)
  return target;
}

size_t Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Dependency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.WriteAddress write_address = 3;
  total_size += 1UL * this->_internal_write_address_size();
  for (const auto& msg : this->write_address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Input input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .dra.UncoveredAddress uncovered_address = 2;
  if (this->has_uncovered_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncovered_address_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dependency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  const Dependency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dependency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Dependency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Dependency)
    MergeFrom(*source);
  }
}

void Dependency::MergeFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from.has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
  if (from.has_uncovered_address()) {
    _internal_mutable_uncovered_address()->::dra::UncoveredAddress::MergeFrom(from._internal_uncovered_address());
  }
}

void Dependency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dependency::CopyFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dependency::IsInitialized() const {
  return true;
}

void Dependency::InternalSwap(Dependency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  swap(input_, other->input_);
  swap(uncovered_address_, other->uncovered_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dependency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse() {}
FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileOperationsFunction_WriteAddressEntry_DoNotUse::MergeFrom(const FileOperationsFunction_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FileOperationsFunction_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FileOperationsFunction_WriteAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FileOperationsFunction::InitAsDefaultInstance() {
  ::dra::_FileOperationsFunction_default_instance_._instance.get_mutable()->run_time_date_ = const_cast< ::dra::runTimeData*>(
      ::dra::runTimeData::internal_default_instance());
}
class FileOperationsFunction::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const FileOperationsFunction* msg);
};

const ::dra::runTimeData&
FileOperationsFunction::_Internal::run_time_date(const FileOperationsFunction* msg) {
  return *msg->run_time_date_;
}
void FileOperationsFunction::clear_run_time_date() {
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
}
FileOperationsFunction::FileOperationsFunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.FileOperationsFunction)
}
FileOperationsFunction::FileOperationsFunction(const FileOperationsFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  write_address_.MergeFrom(from.write_address_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_operations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_operations_name().empty()) {
    file_operations_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_operations_name_);
  }
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.FileOperationsFunction)
}

void FileOperationsFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileOperationsFunction_Dependency_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&run_time_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

FileOperationsFunction::~FileOperationsFunction() {
  // @@protoc_insertion_point(destructor:dra.FileOperationsFunction)
  SharedDtor();
}

void FileOperationsFunction::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete run_time_date_;
}

void FileOperationsFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileOperationsFunction& FileOperationsFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileOperationsFunction_Dependency_2eproto.base);
  return *internal_default_instance();
}


void FileOperationsFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.FileOperationsFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* FileOperationsFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperationsFunction.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_operations_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_operations_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperationsFunction.file_operations_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.file_operations_kind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::file_operations_kind>(val));
        } else goto handle_unusual;
        continue;
      // uint64 cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> write_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileOperationsFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.FileOperationsFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperationsFunction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string file_operations_name = 2;
  if (this->file_operations_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_operations_name().data(), static_cast<int>(this->_internal_file_operations_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperationsFunction.file_operations_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_operations_name(), target);
  }

  // .dra.file_operations_kind kind = 3;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  // uint64 cmd = 4;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_cmd(), target);
  }

  // .dra.runTimeData run_time_date = 5;
  if (this->has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::run_time_date(this), target, stream);
  }

  // map<uint32, uint32> write_address = 11;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.FileOperationsFunction)
  return target;
}

size_t FileOperationsFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.FileOperationsFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> write_address = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file_operations_name = 2;
  if (this->file_operations_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_operations_name());
  }

  // .dra.runTimeData run_time_date = 5;
  if (this->has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint64 cmd = 4;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cmd());
  }

  // .dra.file_operations_kind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileOperationsFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.FileOperationsFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const FileOperationsFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileOperationsFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.FileOperationsFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.FileOperationsFunction)
    MergeFrom(*source);
  }
}

void FileOperationsFunction::MergeFrom(const FileOperationsFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.FileOperationsFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.file_operations_name().size() > 0) {

    file_operations_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_operations_name_);
  }
  if (from.has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void FileOperationsFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.FileOperationsFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOperationsFunction::CopyFrom(const FileOperationsFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.FileOperationsFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperationsFunction::IsInitialized() const {
  return true;
}

void FileOperationsFunction::InternalSwap(FileOperationsFunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  write_address_.Swap(&other->write_address_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_operations_name_.Swap(&other->file_operations_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(run_time_date_, other->run_time_date_);
  swap(cmd_, other->cmd_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileOperationsFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse() {}
FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileOperations_FileOperationsFunctionEntry_DoNotUse::MergeFrom(const FileOperations_FileOperationsFunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FileOperations_FileOperationsFunctionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FileOperations_FileOperationsFunctionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FileOperations::InitAsDefaultInstance() {
}
class FileOperations::_Internal {
 public:
};

FileOperations::FileOperations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.FileOperations)
}
FileOperations::FileOperations(const FileOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:dra.FileOperations)
}

void FileOperations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileOperations_Dependency_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileOperations::~FileOperations() {
  // @@protoc_insertion_point(destructor:dra.FileOperations)
  SharedDtor();
}

void FileOperations::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileOperations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileOperations& FileOperations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileOperations_Dependency_2eproto.base);
  return *internal_default_instance();
}


void FileOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.FileOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_operations_function_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FileOperations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperations.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&file_operations_function_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileOperations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.FileOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperations.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  if (!this->_internal_file_operations_function().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations_function().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations_function().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it) {
        target = FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.FileOperations)
  return target;
}

size_t FileOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.FileOperations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_function_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
      it = this->_internal_file_operations_function().begin();
      it != this->_internal_file_operations_function().end(); ++it) {
    total_size += FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileOperations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.FileOperations)
  GOOGLE_DCHECK_NE(&from, this);
  const FileOperations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileOperations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.FileOperations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.FileOperations)
    MergeFrom(*source);
  }
}

void FileOperations::MergeFrom(const FileOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.FileOperations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_operations_function_.MergeFrom(from.file_operations_function_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FileOperations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.FileOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOperations::CopyFrom(const FileOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.FileOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperations::IsInitialized() const {
  return true;
}

void FileOperations::InternalSwap(FileOperations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_operations_function_.Swap(&other->file_operations_function_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileOperations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

address_AddrEntry_DoNotUse::address_AddrEntry_DoNotUse() {}
address_AddrEntry_DoNotUse::address_AddrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void address_AddrEntry_DoNotUse::MergeFrom(const address_AddrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata address_AddrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void address_AddrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void address::InitAsDefaultInstance() {
}
class address::_Internal {
 public:
};

address::address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.address)
}
address::address(const address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.MergeFrom(from.addr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:dra.address)
}

void address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_address_Dependency_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

address::~address() {
  // @@protoc_insertion_point(destructor:dra.address)
  SharedDtor();
}

void address::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const address& address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_address_Dependency_2eproto.base);
  return *internal_default_instance();
}


void address::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.address.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.address.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> addr = 2;
  if (!this->_internal_addr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.address.AddrEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.address.AddrEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addr().begin();
          it != this->_internal_addr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = address_AddrEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addr().begin();
          it != this->_internal_addr().end(); ++it) {
        target = address_AddrEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.address)
  return target;
}

size_t address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> addr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_addr().begin();
      it != this->_internal_addr().end(); ++it) {
    total_size += address_AddrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.address)
  GOOGLE_DCHECK_NE(&from, this);
  const address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.address)
    MergeFrom(*source);
  }
}

void address::MergeFrom(const address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addr_.MergeFrom(from.addr_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void address::CopyFrom(const address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool address::IsInitialized() const {
  return true;
}

void address::InternalSwap(address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addr_.Swap(&other->addr_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
}
class Condition::_Internal {
 public:
};

Condition::Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      right_branch_address_(from.right_branch_address_),
      syzkaller_right_branch_address_(from.syzkaller_right_branch_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&condition_address_, &from.condition_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:dra.Condition)
}

void Condition::SharedCtor() {
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:dra.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_Dependency_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  syzkaller_right_branch_address_.Clear();
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
  _internal_metadata_.Clear();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 condition_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 syzkaller_condition_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          syzkaller_condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uncovered_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 syzkaller_uncovered_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          syzkaller_uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 successor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          successor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 right_branch_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 syzkaller_right_branch_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_syzkaller_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 condition_address = 1;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_condition_address(), target);
  }

  // uint32 syzkaller_condition_address = 2;
  if (this->syzkaller_condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_syzkaller_condition_address(), target);
  }

  // uint64 uncovered_address = 3;
  if (this->uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uncovered_address(), target);
  }

  // uint32 syzkaller_uncovered_address = 4;
  if (this->syzkaller_uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_syzkaller_uncovered_address(), target);
  }

  // uint32 idx = 5;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_idx(), target);
  }

  // uint64 successor = 6;
  if (this->successor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_successor(), target);
  }

  // repeated uint64 right_branch_address = 7;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_right_branch_address(), byte_size, target);
    }
  }

  // repeated uint32 syzkaller_right_branch_address = 8;
  {
    int byte_size = _syzkaller_right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_syzkaller_right_branch_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 right_branch_address = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 syzkaller_right_branch_address = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->syzkaller_right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _syzkaller_right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 condition_address = 1;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_condition_address());
  }

  // uint64 uncovered_address = 3;
  if (this->uncovered_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uncovered_address());
  }

  // uint32 syzkaller_condition_address = 2;
  if (this->syzkaller_condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_syzkaller_condition_address());
  }

  // uint32 syzkaller_uncovered_address = 4;
  if (this->syzkaller_uncovered_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_syzkaller_uncovered_address());
  }

  // uint64 successor = 6;
  if (this->successor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_successor());
  }

  // uint32 idx = 5;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  syzkaller_right_branch_address_.MergeFrom(from.syzkaller_right_branch_address_);
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.uncovered_address() != 0) {
    _internal_set_uncovered_address(from._internal_uncovered_address());
  }
  if (from.syzkaller_condition_address() != 0) {
    _internal_set_syzkaller_condition_address(from._internal_syzkaller_condition_address());
  }
  if (from.syzkaller_uncovered_address() != 0) {
    _internal_set_syzkaller_uncovered_address(from._internal_syzkaller_uncovered_address());
  }
  if (from.successor() != 0) {
    _internal_set_successor(from._internal_successor());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  syzkaller_right_branch_address_.InternalSwap(&other->syzkaller_right_branch_address_);
  swap(condition_address_, other->condition_address_);
  swap(uncovered_address_, other->uncovered_address_);
  swap(syzkaller_condition_address_, other->syzkaller_condition_address_);
  swap(syzkaller_uncovered_address_, other->syzkaller_uncovered_address_);
  swap(successor_, other->successor_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conditions::InitAsDefaultInstance() {
}
class Conditions::_Internal {
 public:
};

Conditions::Conditions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Conditions)
}
Conditions::Conditions(const Conditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      condition_(from.condition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dra.Conditions)
}

void Conditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conditions_Dependency_2eproto.base);
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:dra.Conditions)
  SharedDtor();
}

void Conditions::SharedDtor() {
}

void Conditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conditions& Conditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conditions_Dependency_2eproto.base);
  return *internal_default_instance();
}


void Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  condition_.Clear();
  _internal_metadata_.Clear();
}

const char* Conditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dra.Condition condition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dra.Condition condition = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_condition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Conditions)
  return target;
}

size_t Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Conditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.Condition condition = 10;
  total_size += 1UL * this->_internal_condition_size();
  for (const auto& msg : this->condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Conditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Conditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Conditions)
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  condition_.MergeFrom(from.condition_);
}

void Conditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  return true;
}

void Conditions::InternalSwap(Conditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  condition_.InternalSwap(&other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteAddresses::InitAsDefaultInstance() {
  ::dra::_WriteAddresses_default_instance_._instance.get_mutable()->condition_ = const_cast< ::dra::Condition*>(
      ::dra::Condition::internal_default_instance());
}
class WriteAddresses::_Internal {
 public:
  static const ::dra::Condition& condition(const WriteAddresses* msg);
};

const ::dra::Condition&
WriteAddresses::_Internal::condition(const WriteAddresses* msg) {
  return *msg->condition_;
}
WriteAddresses::WriteAddresses()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.WriteAddresses)
}
WriteAddresses::WriteAddresses(const WriteAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      write_address_(from.write_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::dra::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.WriteAddresses)
}

void WriteAddresses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteAddresses_Dependency_2eproto.base);
  condition_ = nullptr;
}

WriteAddresses::~WriteAddresses() {
  // @@protoc_insertion_point(destructor:dra.WriteAddresses)
  SharedDtor();
}

void WriteAddresses::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
}

void WriteAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteAddresses& WriteAddresses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteAddresses_Dependency_2eproto.base);
  return *internal_default_instance();
}


void WriteAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.WriteAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear();
}

const char* WriteAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dra.WriteAddress write_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteAddresses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.WriteAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Condition condition = 1;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // repeated .dra.WriteAddress write_address = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_write_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.WriteAddresses)
  return target;
}

size_t WriteAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.WriteAddresses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.WriteAddress write_address = 4;
  total_size += 1UL * this->_internal_write_address_size();
  for (const auto& msg : this->write_address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Condition condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteAddresses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.WriteAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteAddresses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteAddresses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.WriteAddresses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.WriteAddresses)
    MergeFrom(*source);
  }
}

void WriteAddresses::MergeFrom(const WriteAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.WriteAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from.has_condition()) {
    _internal_mutable_condition()->::dra::Condition::MergeFrom(from._internal_condition());
  }
}

void WriteAddresses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.WriteAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteAddresses::CopyFrom(const WriteAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.WriteAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAddresses::IsInitialized() const {
  return true;
}

void WriteAddresses::InternalSwap(WriteAddresses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteAddresses::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress* Arena::CreateMaybeMessage< ::dra::WriteAddress >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::writeAddressAttributes* Arena::CreateMaybeMessage< ::dra::writeAddressAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::dra::writeAddressAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Status_StatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Status_StatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Status_StatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Status* Arena::CreateMaybeMessage< ::dra::Status >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_InputStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_InputStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_InputStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_TasksCountEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_TasksCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_TasksCountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteCountEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_WriteCountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress* Arena::CreateMaybeMessage< ::dra::UncoveredAddress >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Dependency* Arena::CreateMaybeMessage< ::dra::Dependency >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperationsFunction* Arena::CreateMaybeMessage< ::dra::FileOperationsFunction >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperationsFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperations* Arena::CreateMaybeMessage< ::dra::FileOperations >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::address_AddrEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::address_AddrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::address_AddrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::address* Arena::CreateMaybeMessage< ::dra::address >(Arena* arena) {
  return Arena::CreateInternal< ::dra::address >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Condition* Arena::CreateMaybeMessage< ::dra::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Conditions* Arena::CreateMaybeMessage< ::dra::Conditions >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Conditions >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddresses* Arena::CreateMaybeMessage< ::dra::WriteAddresses >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddresses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
