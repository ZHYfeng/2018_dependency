// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dependency.proto

#include "Dependency.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dra {
constexpr WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
  constexpr WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WriteAddress_UncoveredAddressEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal _WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_;
constexpr WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal {
  constexpr WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WriteAddress_FileOperationsFunctionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal _WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_;
constexpr WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WriteAddress_InputEntry_DoNotUseDefaultTypeInternal {
  constexpr WriteAddress_InputEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteAddress_InputEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WriteAddress_InputEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteAddress_InputEntry_DoNotUseDefaultTypeInternal _WriteAddress_InputEntry_DoNotUse_default_instance_;
constexpr WriteAddress::WriteAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uncovered_address_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , file_operations_function_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , input_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , run_time_date_(nullptr)
  , write_address_(0u)
  , kind_(0)
{}
struct WriteAddressDefaultTypeInternal {
  constexpr WriteAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteAddressDefaultTypeInternal() {}
  union {
    WriteAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteAddressDefaultTypeInternal _WriteAddress_default_instance_;
constexpr writeAddressAttributes::writeAddressAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_address_(0u)
  , prio_(0u)
  , repeat_(0u){}
struct writeAddressAttributesDefaultTypeInternal {
  constexpr writeAddressAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~writeAddressAttributesDefaultTypeInternal() {}
  union {
    writeAddressAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT writeAddressAttributesDefaultTypeInternal _writeAddressAttributes_default_instance_;
constexpr Status_StatusEntry_DoNotUse::Status_StatusEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Status_StatusEntry_DoNotUseDefaultTypeInternal {
  constexpr Status_StatusEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Status_StatusEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Status_StatusEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Status_StatusEntry_DoNotUseDefaultTypeInternal _Status_StatusEntry_DoNotUse_default_instance_;
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
constexpr UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal {
  constexpr UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UncoveredAddress_InputEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_InputEntry_DoNotUse_default_instance_;
constexpr UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal {
  constexpr UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UncoveredAddress_WriteAddressEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_;
constexpr UncoveredAddress_InputStatusEntry_DoNotUse::UncoveredAddress_InputStatusEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal {
  constexpr UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UncoveredAddress_InputStatusEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_;
constexpr UncoveredAddress_WriteAddressStatusEntry_DoNotUse::UncoveredAddress_WriteAddressStatusEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal {
  constexpr UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UncoveredAddress_WriteAddressStatusEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_;
constexpr UncoveredAddress_TasksCountEntry_DoNotUse::UncoveredAddress_TasksCountEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal {
  constexpr UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UncoveredAddress_TasksCountEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_;
constexpr UncoveredAddress_WriteCountEntry_DoNotUse::UncoveredAddress_WriteCountEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal {
  constexpr UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UncoveredAddress_WriteCountEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_;
constexpr UncoveredAddress::UncoveredAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : right_branch_address_()
  , _right_branch_address_cached_byte_size_(0)
  , input_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , write_address_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , input_status_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , write_address_status_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tasks_count_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , write_count_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , run_time_date_(nullptr)
  , condition_address_(0u)
  , uncovered_address_(0u)
  , number_arrive_basicblocks_(0u)
  , kind_(0)

  , number_dominator_instructions_(0u)
  , count_(0u){}
struct UncoveredAddressDefaultTypeInternal {
  constexpr UncoveredAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UncoveredAddressDefaultTypeInternal() {}
  union {
    UncoveredAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UncoveredAddressDefaultTypeInternal _UncoveredAddress_default_instance_;
constexpr Dependency::Dependency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_address_()
  , input_(nullptr)
  , uncovered_address_(nullptr){}
struct DependencyDefaultTypeInternal {
  constexpr DependencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DependencyDefaultTypeInternal() {}
  union {
    Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DependencyDefaultTypeInternal _Dependency_default_instance_;
constexpr FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal {
  constexpr FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FileOperationsFunction_WriteAddressEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal _FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_;
constexpr FileOperationsFunction::FileOperationsFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_address_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_operations_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , run_time_date_(nullptr)
  , cmd_(uint64_t{0u})
  , kind_(0)
{}
struct FileOperationsFunctionDefaultTypeInternal {
  constexpr FileOperationsFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileOperationsFunctionDefaultTypeInternal() {}
  union {
    FileOperationsFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileOperationsFunctionDefaultTypeInternal _FileOperationsFunction_default_instance_;
constexpr FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal {
  constexpr FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FileOperations_FileOperationsFunctionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal _FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_;
constexpr FileOperations::FileOperations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_operations_function_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FileOperationsDefaultTypeInternal {
  constexpr FileOperationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileOperationsDefaultTypeInternal() {}
  union {
    FileOperations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileOperationsDefaultTypeInternal _FileOperations_default_instance_;
constexpr address_AddrEntry_DoNotUse::address_AddrEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct address_AddrEntry_DoNotUseDefaultTypeInternal {
  constexpr address_AddrEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~address_AddrEntry_DoNotUseDefaultTypeInternal() {}
  union {
    address_AddrEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT address_AddrEntry_DoNotUseDefaultTypeInternal _address_AddrEntry_DoNotUse_default_instance_;
constexpr address::address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct addressDefaultTypeInternal {
  constexpr addressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addressDefaultTypeInternal() {}
  union {
    address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addressDefaultTypeInternal _address_default_instance_;
constexpr Condition::Condition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : right_branch_address_()
  , _right_branch_address_cached_byte_size_(0)
  , syzkaller_right_branch_address_()
  , _syzkaller_right_branch_address_cached_byte_size_(0)
  , condition_address_(uint64_t{0u})
  , uncovered_address_(uint64_t{0u})
  , syzkaller_condition_address_(0u)
  , syzkaller_uncovered_address_(0u)
  , successor_(uint64_t{0u})
  , idx_(0u){}
struct ConditionDefaultTypeInternal {
  constexpr ConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConditionDefaultTypeInternal _Condition_default_instance_;
constexpr Conditions::Conditions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : condition_(){}
struct ConditionsDefaultTypeInternal {
  constexpr ConditionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConditionsDefaultTypeInternal() {}
  union {
    Conditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConditionsDefaultTypeInternal _Conditions_default_instance_;
constexpr WriteAddresses::WriteAddresses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_address_()
  , condition_(nullptr){}
struct WriteAddressesDefaultTypeInternal {
  constexpr WriteAddressesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteAddressesDefaultTypeInternal() {}
  union {
    WriteAddresses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteAddressesDefaultTypeInternal _WriteAddresses_default_instance_;
}  // namespace dra
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Dependency_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Dependency_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Dependency_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Dependency_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, file_operations_function_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, input_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, run_time_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, repeat_),
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, prio_),
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Status_StatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Status, status_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputStatusEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_TasksCountEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteCountEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, number_arrive_basicblocks_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, number_dominator_instructions_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, input_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, count_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, run_time_date_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, input_status_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_address_status_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, tasks_count_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, input_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, file_operations_name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, cmd_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, run_time_date_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, file_operations_function_),
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::address_AddrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::address, name_),
  PROTOBUF_FIELD_OFFSET(::dra::address, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Condition, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, successor_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_right_branch_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::Conditions, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, condition_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, write_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::dra::WriteAddress_InputEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::dra::WriteAddress)},
  { 42, -1, -1, sizeof(::dra::writeAddressAttributes)},
  { 51, 59, -1, sizeof(::dra::Status_StatusEntry_DoNotUse)},
  { 61, -1, -1, sizeof(::dra::Status)},
  { 68, 76, -1, sizeof(::dra::UncoveredAddress_InputEntry_DoNotUse)},
  { 78, 86, -1, sizeof(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse)},
  { 88, 96, -1, sizeof(::dra::UncoveredAddress_InputStatusEntry_DoNotUse)},
  { 98, 106, -1, sizeof(::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse)},
  { 108, 116, -1, sizeof(::dra::UncoveredAddress_TasksCountEntry_DoNotUse)},
  { 118, 126, -1, sizeof(::dra::UncoveredAddress_WriteCountEntry_DoNotUse)},
  { 128, -1, -1, sizeof(::dra::UncoveredAddress)},
  { 148, -1, -1, sizeof(::dra::Dependency)},
  { 157, 165, -1, sizeof(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse)},
  { 167, -1, -1, sizeof(::dra::FileOperationsFunction)},
  { 179, 187, -1, sizeof(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse)},
  { 189, -1, -1, sizeof(::dra::FileOperations)},
  { 197, 205, -1, sizeof(::dra::address_AddrEntry_DoNotUse)},
  { 207, -1, -1, sizeof(::dra::address)},
  { 215, -1, -1, sizeof(::dra::Condition)},
  { 229, -1, -1, sizeof(::dra::Conditions)},
  { 236, -1, -1, sizeof(::dra::WriteAddresses)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_writeAddressAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Status_StatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperationsFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_address_AddrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Conditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddresses_default_instance_),
};

const char descriptor_table_protodef_Dependency_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Dependency.proto\022\003dra\032\013Input.proto\032\nTa"
  "sk.proto\"\372\003\n\014WriteAddress\022\025\n\rwrite_addre"
  "ss\030\002 \001(\r\022%\n\004kind\030\004 \001(\0162\027.dra.WriteStatem"
  "entKind\022B\n\021uncovered_address\030\027 \003(\0132\'.dra"
  ".WriteAddress.UncoveredAddressEntry\022O\n\030f"
  "ile_operations_function\030\030 \003(\0132-.dra.Writ"
  "eAddress.FileOperationsFunctionEntry\022+\n\005"
  "input\030\031 \003(\0132\034.dra.WriteAddress.InputEntr"
  "y\022\'\n\rrun_time_date\030\013 \001(\0132\020.dra.runTimeDa"
  "ta\032T\n\025UncoveredAddressEntry\022\013\n\003key\030\001 \001(\r"
  "\022*\n\005value\030\002 \001(\0132\033.dra.writeAddressAttrib"
  "utes:\0028\001\032=\n\033FileOperationsFunctionEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\032,\n\nInput"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\"M\n"
  "\026writeAddressAttributes\022\025\n\rwrite_address"
  "\030\002 \001(\r\022\016\n\006repeat\030\007 \001(\r\022\014\n\004prio\030\006 \001(\r\"q\n\006"
  "Status\022\'\n\006status\030\001 \003(\0132\027.dra.Status.Stat"
  "usEntry\032>\n\013StatusEntry\022\013\n\003key\030\001 \001(\r\022\036\n\005v"
  "alue\030\002 \001(\0162\017.dra.taskStatus:\0028\001\"\370\007\n\020Unco"
  "veredAddress\022\031\n\021condition_address\030\001 \001(\r\022"
  "\031\n\021uncovered_address\030\002 \001(\r\022\034\n\024right_bran"
  "ch_address\030\003 \003(\r\022!\n\031number_arrive_basicb"
  "locks\030\004 \001(\r\022\'\n\004kind\030\005 \001(\0162\031.dra.Uncovere"
  "dAddressKind\022%\n\035number_dominator_instruc"
  "tions\030\006 \001(\r\022/\n\005input\030\026 \003(\0132 .dra.Uncover"
  "edAddress.InputEntry\022>\n\rwrite_address\030\027 "
  "\003(\0132\'.dra.UncoveredAddress.WriteAddressE"
  "ntry\022\r\n\005count\030\030 \001(\r\022\'\n\rrun_time_date\030\010 \001"
  "(\0132\020.dra.runTimeData\022<\n\014input_status\030\037 \003"
  "(\0132&.dra.UncoveredAddress.InputStatusEnt"
  "ry\022K\n\024write_address_status\030  \003(\0132-.dra.U"
  "ncoveredAddress.WriteAddressStatusEntry\022"
  ":\n\013tasks_count\030! \003(\0132%.dra.UncoveredAddr"
  "ess.TasksCountEntry\022:\n\013write_count\030\" \003(\013"
  "2%.dra.UncoveredAddress.WriteCountEntry\032"
  ",\n\nInputEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\r:\0028\001\032P\n\021WriteAddressEntry\022\013\n\003key\030\001 \001(\r\022"
  "*\n\005value\030\002 \001(\0132\033.dra.writeAddressAttribu"
  "tes:\0028\001\032\?\n\020InputStatusEntry\022\013\n\003key\030\001 \001(\t"
  "\022\032\n\005value\030\002 \001(\0132\013.dra.Status:\0028\001\032J\n\027Writ"
  "eAddressStatusEntry\022\013\n\003key\030\001 \001(\r\022\036\n\005valu"
  "e\030\002 \001(\0162\017.dra.taskStatus:\0028\001\0321\n\017TasksCou"
  "ntEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\r:\0028\001\032"
  "1\n\017WriteCountEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
  "\030\002 \001(\r:\0028\001\"\203\001\n\nDependency\022\031\n\005input\030\001 \001(\013"
  "2\n.dra.Input\0220\n\021uncovered_address\030\002 \001(\0132"
  "\025.dra.UncoveredAddress\022(\n\rwrite_address\030"
  "\003 \003(\0132\021.dra.WriteAddress\"\236\002\n\026FileOperati"
  "onsFunction\022\014\n\004name\030\001 \001(\t\022\034\n\024file_operat"
  "ions_name\030\002 \001(\t\022\'\n\004kind\030\003 \001(\0162\031.dra.file"
  "_operations_kind\022\013\n\003cmd\030\004 \001(\004\022\'\n\rrun_tim"
  "e_date\030\005 \001(\0132\020.dra.runTimeData\022D\n\rwrite_"
  "address\030\013 \003(\0132-.dra.FileOperationsFuncti"
  "on.WriteAddressEntry\0323\n\021WriteAddressEntr"
  "y\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\315\001\n\016Fi"
  "leOperations\022\014\n\004name\030\001 \001(\t\022Q\n\030file_opera"
  "tions_function\030\003 \003(\0132/.dra.FileOperation"
  "s.FileOperationsFunctionEntry\032Z\n\033FileOpe"
  "rationsFunctionEntry\022\013\n\003key\030\001 \001(\003\022*\n\005val"
  "ue\030\002 \001(\0132\033.dra.FileOperationsFunction:\0028"
  "\001\"j\n\007address\022\014\n\004name\030\001 \001(\t\022$\n\004addr\030\002 \003(\013"
  "2\026.dra.address.AddrEntry\032+\n\tAddrEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\361\001\n\tCondit"
  "ion\022\031\n\021condition_address\030\001 \001(\004\022#\n\033syzkal"
  "ler_condition_address\030\002 \001(\r\022\031\n\021uncovered"
  "_address\030\003 \001(\004\022#\n\033syzkaller_uncovered_ad"
  "dress\030\004 \001(\r\022\013\n\003idx\030\005 \001(\r\022\021\n\tsuccessor\030\006 "
  "\001(\004\022\034\n\024right_branch_address\030\007 \003(\004\022&\n\036syz"
  "kaller_right_branch_address\030\010 \003(\r\"/\n\nCon"
  "ditions\022!\n\tcondition\030\n \003(\0132\016.dra.Conditi"
  "on\"]\n\016WriteAddresses\022!\n\tcondition\030\001 \001(\0132"
  "\016.dra.Condition\022(\n\rwrite_address\030\004 \003(\0132\021"
  ".dra.WriteAddress*\227\001\n\024UncoveredAddressKi"
  "nd\022\033\n\027UncoveredAddressOutside\020\000\022 \n\034Uncov"
  "eredAddressInputRelated\020\001\022%\n!UncoveredAd"
  "dressDependencyRelated\020\002\022\031\n\025UncoveredAdd"
  "ressOther\020\003*\215\001\n\024file_operations_kind\022\013\n\007"
  "default\020\000\022\010\n\004init\020\001\022\n\n\006llseek\020\002\022\010\n\004read\020"
  "\003\022\t\n\005write\020\004\022\010\n\004poll\020\t\022\022\n\016unlocked_ioctl"
  "\020\n\022\010\n\004mmap\020\014\022\010\n\004open\020\016\022\013\n\007release\020\020B\007Z\005."
  ";drab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Dependency_2eproto_deps[2] = {
  &::descriptor_table_Input_2eproto,
  &::descriptor_table_Task_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Dependency_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Dependency_2eproto = {
  false, false, 3212, descriptor_table_protodef_Dependency_2eproto, "Dependency.proto", 
  &descriptor_table_Dependency_2eproto_once, descriptor_table_Dependency_2eproto_deps, 2, 24,
  schemas, file_default_instances, TableStruct_Dependency_2eproto::offsets,
  file_level_metadata_Dependency_2eproto, file_level_enum_descriptors_Dependency_2eproto, file_level_service_descriptors_Dependency_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Dependency_2eproto_getter() {
  return &descriptor_table_Dependency_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Dependency_2eproto(&descriptor_table_Dependency_2eproto);
namespace dra {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UncoveredAddressKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Dependency_2eproto);
  return file_level_enum_descriptors_Dependency_2eproto[0];
}
bool UncoveredAddressKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_operations_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Dependency_2eproto);
  return file_level_enum_descriptors_Dependency_2eproto[1];
}
bool file_operations_kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 10:
    case 12:
    case 14:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse() {}
WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_UncoveredAddressEntry_DoNotUse::MergeFrom(const WriteAddress_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[0]);
}

// ===================================================================

WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse() {}
WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_FileOperationsFunctionEntry_DoNotUse::MergeFrom(const WriteAddress_FileOperationsFunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_FileOperationsFunctionEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[1]);
}

// ===================================================================

WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse() {}
WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_InputEntry_DoNotUse::MergeFrom(const WriteAddress_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_InputEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[2]);
}

// ===================================================================

class WriteAddress::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const WriteAddress* msg);
};

const ::dra::runTimeData&
WriteAddress::_Internal::run_time_date(const WriteAddress* msg) {
  return *msg->run_time_date_;
}
void WriteAddress::clear_run_time_date() {
  if (GetArenaForAllocation() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
}
WriteAddress::WriteAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uncovered_address_(arena),
  file_operations_function_(arena),
  input_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.WriteAddress)
}
WriteAddress::WriteAddress(const WriteAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  input_.MergeFrom(from.input_);
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&write_address_, &from.write_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.WriteAddress)
}

void WriteAddress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_time_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

WriteAddress::~WriteAddress() {
  // @@protoc_insertion_point(destructor:dra.WriteAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_time_date_;
}

void WriteAddress::ArenaDtor(void* object) {
  WriteAddress* _this = reinterpret_cast< WriteAddress* >(object);
  (void)_this;
  _this->uncovered_address_. ~MapField();
  _this->file_operations_function_. ~MapField();
  _this->input_. ~MapField();
}
inline void WriteAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &WriteAddress::ArenaDtor);
  }
}
void WriteAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.WriteAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncovered_address_.Clear();
  file_operations_function_.Clear();
  input_.Clear();
  if (GetArenaForAllocation() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.WriteStatementKind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::WriteStatementKind>(val));
        } else
          goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> file_operations_function = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&file_operations_function_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> input = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.WriteAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->_internal_write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // .dra.WriteStatementKind kind = 4;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_kind(), target);
  }

  // .dra.runTimeData run_time_date = 11;
  if (this->_internal_has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::run_time_date(this), target, stream);
  }

  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, uint32> file_operations_function = 24;
  if (!this->_internal_file_operations_function().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.WriteAddress.FileOperationsFunctionEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations_function().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations_function().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it) {
        target = WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint32> input = 25;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.WriteAddress.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(25, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = WriteAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(25, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.WriteAddress)
  return target;
}

size_t WriteAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.WriteAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> file_operations_function = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_function_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_file_operations_function().begin();
      it != this->_internal_file_operations_function().end(); ++it) {
    total_size += WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> input = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += WriteAddress_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.runTimeData run_time_date = 11;
  if (this->_internal_has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint32 write_address = 2;
  if (this->_internal_write_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_write_address());
  }

  // .dra.WriteStatementKind kind = 4;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteAddress::GetClassData() const { return &_class_data_; }

void WriteAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteAddress *>(to)->MergeFrom(
      static_cast<const WriteAddress &>(from));
}


void WriteAddress::MergeFrom(const WriteAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.WriteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uncovered_address_.MergeFrom(from.uncovered_address_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  input_.MergeFrom(from.input_);
  if (from._internal_has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from._internal_write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteAddress::CopyFrom(const WriteAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.WriteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAddress::IsInitialized() const {
  return true;
}

void WriteAddress::InternalSwap(WriteAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uncovered_address_.InternalSwap(&other->uncovered_address_);
  file_operations_function_.InternalSwap(&other->file_operations_function_);
  input_.InternalSwap(&other->input_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteAddress, kind_)
      + sizeof(WriteAddress::kind_)
      - PROTOBUF_FIELD_OFFSET(WriteAddress, run_time_date_)>(
          reinterpret_cast<char*>(&run_time_date_),
          reinterpret_cast<char*>(&other->run_time_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[3]);
}

// ===================================================================

class writeAddressAttributes::_Internal {
 public:
};

writeAddressAttributes::writeAddressAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.writeAddressAttributes)
}
writeAddressAttributes::writeAddressAttributes(const writeAddressAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&write_address_, &from.write_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
  // @@protoc_insertion_point(copy_constructor:dra.writeAddressAttributes)
}

void writeAddressAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&write_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
}

writeAddressAttributes::~writeAddressAttributes() {
  // @@protoc_insertion_point(destructor:dra.writeAddressAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void writeAddressAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void writeAddressAttributes::ArenaDtor(void* object) {
  writeAddressAttributes* _this = reinterpret_cast< writeAddressAttributes* >(object);
  (void)_this;
}
void writeAddressAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void writeAddressAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void writeAddressAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.writeAddressAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* writeAddressAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 repeat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* writeAddressAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.writeAddressAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->_internal_write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // uint32 prio = 6;
  if (this->_internal_prio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prio(), target);
  }

  // uint32 repeat = 7;
  if (this->_internal_repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.writeAddressAttributes)
  return target;
}

size_t writeAddressAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.writeAddressAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->_internal_write_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_write_address());
  }

  // uint32 prio = 6;
  if (this->_internal_prio() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prio());
  }

  // uint32 repeat = 7;
  if (this->_internal_repeat() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_repeat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData writeAddressAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    writeAddressAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*writeAddressAttributes::GetClassData() const { return &_class_data_; }

void writeAddressAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<writeAddressAttributes *>(to)->MergeFrom(
      static_cast<const writeAddressAttributes &>(from));
}


void writeAddressAttributes::MergeFrom(const writeAddressAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.writeAddressAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from._internal_prio() != 0) {
    _internal_set_prio(from._internal_prio());
  }
  if (from._internal_repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void writeAddressAttributes::CopyFrom(const writeAddressAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.writeAddressAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool writeAddressAttributes::IsInitialized() const {
  return true;
}

void writeAddressAttributes::InternalSwap(writeAddressAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(writeAddressAttributes, repeat_)
      + sizeof(writeAddressAttributes::repeat_)
      - PROTOBUF_FIELD_OFFSET(writeAddressAttributes, write_address_)>(
          reinterpret_cast<char*>(&write_address_),
          reinterpret_cast<char*>(&other->write_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata writeAddressAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[4]);
}

// ===================================================================

Status_StatusEntry_DoNotUse::Status_StatusEntry_DoNotUse() {}
Status_StatusEntry_DoNotUse::Status_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Status_StatusEntry_DoNotUse::MergeFrom(const Status_StatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Status_StatusEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[5]);
}

// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  status_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.MergeFrom(from.status_);
  // @@protoc_insertion_point(copy_constructor:dra.Status)
}

void Status::SharedCtor() {
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:dra.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
  _this->status_. ~MapField();
}
inline void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Status::ArenaDtor);
  }
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .dra.taskStatus> status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .dra.taskStatus> status = 1;
  if (!this->_internal_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Status_StatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it) {
        target = Status_StatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.taskStatus> status = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
      it = this->_internal_status().begin();
      it != this->_internal_status().end(); ++it) {
    total_size += Status_StatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }

void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Status *>(to)->MergeFrom(
      static_cast<const Status &>(from));
}


void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Status)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[6]);
}

// ===================================================================

UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse() {}
UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_InputEntry_DoNotUse::MergeFrom(const UncoveredAddress_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_InputEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[7]);
}

// ===================================================================

UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse() {}
UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteAddressEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[8]);
}

// ===================================================================

UncoveredAddress_InputStatusEntry_DoNotUse::UncoveredAddress_InputStatusEntry_DoNotUse() {}
UncoveredAddress_InputStatusEntry_DoNotUse::UncoveredAddress_InputStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_InputStatusEntry_DoNotUse::MergeFrom(const UncoveredAddress_InputStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_InputStatusEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[9]);
}

// ===================================================================

UncoveredAddress_WriteAddressStatusEntry_DoNotUse::UncoveredAddress_WriteAddressStatusEntry_DoNotUse() {}
UncoveredAddress_WriteAddressStatusEntry_DoNotUse::UncoveredAddress_WriteAddressStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteAddressStatusEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteAddressStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteAddressStatusEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[10]);
}

// ===================================================================

UncoveredAddress_TasksCountEntry_DoNotUse::UncoveredAddress_TasksCountEntry_DoNotUse() {}
UncoveredAddress_TasksCountEntry_DoNotUse::UncoveredAddress_TasksCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_TasksCountEntry_DoNotUse::MergeFrom(const UncoveredAddress_TasksCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_TasksCountEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[11]);
}

// ===================================================================

UncoveredAddress_WriteCountEntry_DoNotUse::UncoveredAddress_WriteCountEntry_DoNotUse() {}
UncoveredAddress_WriteCountEntry_DoNotUse::UncoveredAddress_WriteCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteCountEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteCountEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[12]);
}

// ===================================================================

class UncoveredAddress::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const UncoveredAddress* msg);
};

const ::dra::runTimeData&
UncoveredAddress::_Internal::run_time_date(const UncoveredAddress* msg) {
  return *msg->run_time_date_;
}
void UncoveredAddress::clear_run_time_date() {
  if (GetArenaForAllocation() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
}
UncoveredAddress::UncoveredAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  right_branch_address_(arena),
  input_(arena),
  write_address_(arena),
  input_status_(arena),
  write_address_status_(arena),
  tasks_count_(arena),
  write_count_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.UncoveredAddress)
}
UncoveredAddress::UncoveredAddress(const UncoveredAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      right_branch_address_(from.right_branch_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  write_address_.MergeFrom(from.write_address_);
  input_status_.MergeFrom(from.input_status_);
  write_address_status_.MergeFrom(from.write_address_status_);
  tasks_count_.MergeFrom(from.tasks_count_);
  write_count_.MergeFrom(from.write_count_);
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&condition_address_, &from.condition_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dra.UncoveredAddress)
}

void UncoveredAddress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_time_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&run_time_date_)) + sizeof(count_));
}

UncoveredAddress::~UncoveredAddress() {
  // @@protoc_insertion_point(destructor:dra.UncoveredAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UncoveredAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_time_date_;
}

void UncoveredAddress::ArenaDtor(void* object) {
  UncoveredAddress* _this = reinterpret_cast< UncoveredAddress* >(object);
  (void)_this;
  _this->input_. ~MapField();
  _this->write_address_. ~MapField();
  _this->input_status_. ~MapField();
  _this->write_address_status_. ~MapField();
  _this->tasks_count_. ~MapField();
  _this->write_count_. ~MapField();
}
inline void UncoveredAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &UncoveredAddress::ArenaDtor);
  }
}
void UncoveredAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UncoveredAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UncoveredAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  input_.Clear();
  write_address_.Clear();
  input_status_.Clear();
  write_address_status_.Clear();
  tasks_count_.Clear();
  write_count_.Clear();
  if (GetArenaForAllocation() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UncoveredAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 condition_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uncovered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 right_branch_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_arrive_basicblocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_arrive_basicblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.UncoveredAddressKind kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::UncoveredAddressKind>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 number_dominator_instructions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_dominator_instructions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> input = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .dra.writeAddressAttributes> write_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .dra.Status> input_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .dra.taskStatus> write_address_status = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_address_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint32> tasks_count = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&tasks_count_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint32> write_count = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_count_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UncoveredAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UncoveredAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 condition_address = 1;
  if (this->_internal_condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_address(), target);
  }

  // uint32 uncovered_address = 2;
  if (this->_internal_uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uncovered_address(), target);
  }

  // repeated uint32 right_branch_address = 3;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_right_branch_address(), byte_size, target);
    }
  }

  // uint32 number_arrive_basicblocks = 4;
  if (this->_internal_number_arrive_basicblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number_arrive_basicblocks(), target);
  }

  // .dra.UncoveredAddressKind kind = 5;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_kind(), target);
  }

  // uint32 number_dominator_instructions = 6;
  if (this->_internal_number_dominator_instructions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_dominator_instructions(), target);
  }

  // .dra.runTimeData run_time_date = 8;
  if (this->_internal_has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::run_time_date(this), target, stream);
  }

  // map<string, uint32> input = 22;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.UncoveredAddress.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = UncoveredAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // uint32 count = 24;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_count(), target);
  }

  // map<string, .dra.Status> input_status = 31;
  if (!this->_internal_input_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.UncoveredAddress.InputStatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_iterator
          it = this->_internal_input_status().begin();
          it != this->_internal_input_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_InputStatusEntry_DoNotUse::Funcs::InternalSerialize(31, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_iterator
          it = this->_internal_input_status().begin();
          it != this->_internal_input_status().end(); ++it) {
        target = UncoveredAddress_InputStatusEntry_DoNotUse::Funcs::InternalSerialize(31, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .dra.taskStatus> write_address_status = 32;
  if (!this->_internal_write_address_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_write_address_status().begin();
          it != this->_internal_write_address_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteAddressStatusEntry_DoNotUse::Funcs::InternalSerialize(32, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
          it = this->_internal_write_address_status().begin();
          it != this->_internal_write_address_status().end(); ++it) {
        target = UncoveredAddress_WriteAddressStatusEntry_DoNotUse::Funcs::InternalSerialize(32, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, uint32> tasks_count = 33;
  if (!this->_internal_tasks_count().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tasks_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tasks_count().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_tasks_count().begin();
          it != this->_internal_tasks_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_TasksCountEntry_DoNotUse::Funcs::InternalSerialize(33, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_tasks_count().begin();
          it != this->_internal_tasks_count().end(); ++it) {
        target = UncoveredAddress_TasksCountEntry_DoNotUse::Funcs::InternalSerialize(33, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, uint32> write_count = 34;
  if (!this->_internal_write_count().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_count().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_count().begin();
          it != this->_internal_write_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteCountEntry_DoNotUse::Funcs::InternalSerialize(34, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_count().begin();
          it != this->_internal_write_count().end(); ++it) {
        target = UncoveredAddress_WriteCountEntry_DoNotUse::Funcs::InternalSerialize(34, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UncoveredAddress)
  return target;
}

size_t UncoveredAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UncoveredAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 right_branch_address = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, uint32> input = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += UncoveredAddress_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .dra.Status> input_status = 31;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >::const_iterator
      it = this->_internal_input_status().begin();
      it != this->_internal_input_status().end(); ++it) {
    total_size += UncoveredAddress_InputStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.taskStatus> write_address_status = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >::const_iterator
      it = this->_internal_write_address_status().begin();
      it != this->_internal_write_address_status().end(); ++it) {
    total_size += UncoveredAddress_WriteAddressStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, uint32> tasks_count = 33;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_count_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_tasks_count().begin();
      it != this->_internal_tasks_count().end(); ++it) {
    total_size += UncoveredAddress_TasksCountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, uint32> write_count = 34;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_count_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_write_count().begin();
      it != this->_internal_write_count().end(); ++it) {
    total_size += UncoveredAddress_WriteCountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.runTimeData run_time_date = 8;
  if (this->_internal_has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint32 condition_address = 1;
  if (this->_internal_condition_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_condition_address());
  }

  // uint32 uncovered_address = 2;
  if (this->_internal_uncovered_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uncovered_address());
  }

  // uint32 number_arrive_basicblocks = 4;
  if (this->_internal_number_arrive_basicblocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_arrive_basicblocks());
  }

  // .dra.UncoveredAddressKind kind = 5;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // uint32 number_dominator_instructions = 6;
  if (this->_internal_number_dominator_instructions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_dominator_instructions());
  }

  // uint32 count = 24;
  if (this->_internal_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UncoveredAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UncoveredAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UncoveredAddress::GetClassData() const { return &_class_data_; }

void UncoveredAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UncoveredAddress *>(to)->MergeFrom(
      static_cast<const UncoveredAddress &>(from));
}


void UncoveredAddress::MergeFrom(const UncoveredAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UncoveredAddress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  input_.MergeFrom(from.input_);
  write_address_.MergeFrom(from.write_address_);
  input_status_.MergeFrom(from.input_status_);
  write_address_status_.MergeFrom(from.write_address_status_);
  tasks_count_.MergeFrom(from.tasks_count_);
  write_count_.MergeFrom(from.write_count_);
  if (from._internal_has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from._internal_condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from._internal_uncovered_address() != 0) {
    _internal_set_uncovered_address(from._internal_uncovered_address());
  }
  if (from._internal_number_arrive_basicblocks() != 0) {
    _internal_set_number_arrive_basicblocks(from._internal_number_arrive_basicblocks());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from._internal_number_dominator_instructions() != 0) {
    _internal_set_number_dominator_instructions(from._internal_number_dominator_instructions());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UncoveredAddress::CopyFrom(const UncoveredAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UncoveredAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UncoveredAddress::IsInitialized() const {
  return true;
}

void UncoveredAddress::InternalSwap(UncoveredAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  input_.InternalSwap(&other->input_);
  write_address_.InternalSwap(&other->write_address_);
  input_status_.InternalSwap(&other->input_status_);
  write_address_status_.InternalSwap(&other->write_address_status_);
  tasks_count_.InternalSwap(&other->tasks_count_);
  write_count_.InternalSwap(&other->write_count_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UncoveredAddress, count_)
      + sizeof(UncoveredAddress::count_)
      - PROTOBUF_FIELD_OFFSET(UncoveredAddress, run_time_date_)>(
          reinterpret_cast<char*>(&run_time_date_),
          reinterpret_cast<char*>(&other->run_time_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[13]);
}

// ===================================================================

class Dependency::_Internal {
 public:
  static const ::dra::Input& input(const Dependency* msg);
  static const ::dra::UncoveredAddress& uncovered_address(const Dependency* msg);
};

const ::dra::Input&
Dependency::_Internal::input(const Dependency* msg) {
  return *msg->input_;
}
const ::dra::UncoveredAddress&
Dependency::_Internal::uncovered_address(const Dependency* msg) {
  return *msg->uncovered_address_;
}
void Dependency::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
Dependency::Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  write_address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Dependency)
}
Dependency::Dependency(const Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      write_address_(from.write_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_uncovered_address()) {
    uncovered_address_ = new ::dra::UncoveredAddress(*from.uncovered_address_);
  } else {
    uncovered_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.Dependency)
}

void Dependency::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uncovered_address_) -
    reinterpret_cast<char*>(&input_)) + sizeof(uncovered_address_));
}

Dependency::~Dependency() {
  // @@protoc_insertion_point(destructor:dra.Dependency)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete uncovered_address_;
}

void Dependency::ArenaDtor(void* object) {
  Dependency* _this = reinterpret_cast< Dependency* >(object);
  (void)_this;
}
void Dependency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Dependency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uncovered_address_ != nullptr) {
    delete uncovered_address_;
  }
  uncovered_address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.UncoveredAddress uncovered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncovered_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dra.WriteAddress write_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dependency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Dependency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // .dra.UncoveredAddress uncovered_address = 2;
  if (this->_internal_has_uncovered_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uncovered_address(this), target, stream);
  }

  // repeated .dra.WriteAddress write_address = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_write_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Dependency)
  return target;
}

size_t Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Dependency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.WriteAddress write_address = 3;
  total_size += 1UL * this->_internal_write_address_size();
  for (const auto& msg : this->write_address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Input input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .dra.UncoveredAddress uncovered_address = 2;
  if (this->_internal_has_uncovered_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncovered_address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dependency::GetClassData() const { return &_class_data_; }

void Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dependency *>(to)->MergeFrom(
      static_cast<const Dependency &>(from));
}


void Dependency::MergeFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from._internal_has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_has_uncovered_address()) {
    _internal_mutable_uncovered_address()->::dra::UncoveredAddress::MergeFrom(from._internal_uncovered_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dependency::CopyFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dependency::IsInitialized() const {
  return true;
}

void Dependency::InternalSwap(Dependency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dependency, uncovered_address_)
      + sizeof(Dependency::uncovered_address_)
      - PROTOBUF_FIELD_OFFSET(Dependency, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dependency::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[14]);
}

// ===================================================================

FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse() {}
FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileOperationsFunction_WriteAddressEntry_DoNotUse::MergeFrom(const FileOperationsFunction_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FileOperationsFunction_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[15]);
}

// ===================================================================

class FileOperationsFunction::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const FileOperationsFunction* msg);
};

const ::dra::runTimeData&
FileOperationsFunction::_Internal::run_time_date(const FileOperationsFunction* msg) {
  return *msg->run_time_date_;
}
void FileOperationsFunction::clear_run_time_date() {
  if (GetArenaForAllocation() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
}
FileOperationsFunction::FileOperationsFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  write_address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.FileOperationsFunction)
}
FileOperationsFunction::FileOperationsFunction(const FileOperationsFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  write_address_.MergeFrom(from.write_address_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  file_operations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_operations_name().empty()) {
    file_operations_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_operations_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.FileOperationsFunction)
}

void FileOperationsFunction::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_operations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_time_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

FileOperationsFunction::~FileOperationsFunction() {
  // @@protoc_insertion_point(destructor:dra.FileOperationsFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileOperationsFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete run_time_date_;
}

void FileOperationsFunction::ArenaDtor(void* object) {
  FileOperationsFunction* _this = reinterpret_cast< FileOperationsFunction* >(object);
  (void)_this;
  _this->write_address_. ~MapField();
}
inline void FileOperationsFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FileOperationsFunction::ArenaDtor);
  }
}
void FileOperationsFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileOperationsFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.FileOperationsFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  name_.ClearToEmpty();
  file_operations_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileOperationsFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperationsFunction.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_operations_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_operations_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperationsFunction.file_operations_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.file_operations_kind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::file_operations_kind>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> write_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileOperationsFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.FileOperationsFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperationsFunction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string file_operations_name = 2;
  if (!this->_internal_file_operations_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_operations_name().data(), static_cast<int>(this->_internal_file_operations_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperationsFunction.file_operations_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_operations_name(), target);
  }

  // .dra.file_operations_kind kind = 3;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  // uint64 cmd = 4;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_cmd(), target);
  }

  // .dra.runTimeData run_time_date = 5;
  if (this->_internal_has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::run_time_date(this), target, stream);
  }

  // map<uint32, uint32> write_address = 11;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.FileOperationsFunction)
  return target;
}

size_t FileOperationsFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.FileOperationsFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> write_address = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file_operations_name = 2;
  if (!this->_internal_file_operations_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_operations_name());
  }

  // .dra.runTimeData run_time_date = 5;
  if (this->_internal_has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint64 cmd = 4;
  if (this->_internal_cmd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd());
  }

  // .dra.file_operations_kind kind = 3;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileOperationsFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileOperationsFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileOperationsFunction::GetClassData() const { return &_class_data_; }

void FileOperationsFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileOperationsFunction *>(to)->MergeFrom(
      static_cast<const FileOperationsFunction &>(from));
}


void FileOperationsFunction::MergeFrom(const FileOperationsFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.FileOperationsFunction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_file_operations_name().empty()) {
    _internal_set_file_operations_name(from._internal_file_operations_name());
  }
  if (from._internal_has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from._internal_cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileOperationsFunction::CopyFrom(const FileOperationsFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.FileOperationsFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperationsFunction::IsInitialized() const {
  return true;
}

void FileOperationsFunction::InternalSwap(FileOperationsFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_operations_name_, lhs_arena,
      &other->file_operations_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileOperationsFunction, kind_)
      + sizeof(FileOperationsFunction::kind_)
      - PROTOBUF_FIELD_OFFSET(FileOperationsFunction, run_time_date_)>(
          reinterpret_cast<char*>(&run_time_date_),
          reinterpret_cast<char*>(&other->run_time_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileOperationsFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[16]);
}

// ===================================================================

FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse() {}
FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileOperations_FileOperationsFunctionEntry_DoNotUse::MergeFrom(const FileOperations_FileOperationsFunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FileOperations_FileOperationsFunctionEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[17]);
}

// ===================================================================

class FileOperations::_Internal {
 public:
};

FileOperations::FileOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_operations_function_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.FileOperations)
}
FileOperations::FileOperations(const FileOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dra.FileOperations)
}

void FileOperations::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileOperations::~FileOperations() {
  // @@protoc_insertion_point(destructor:dra.FileOperations)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileOperations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileOperations::ArenaDtor(void* object) {
  FileOperations* _this = reinterpret_cast< FileOperations* >(object);
  (void)_this;
  _this->file_operations_function_. ~MapField();
}
inline void FileOperations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FileOperations::ArenaDtor);
  }
}
void FileOperations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.FileOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_operations_function_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileOperations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperations.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&file_operations_function_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileOperations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.FileOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperations.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  if (!this->_internal_file_operations_function().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations_function().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations_function().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it) {
        target = FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.FileOperations)
  return target;
}

size_t FileOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.FileOperations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_function_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
      it = this->_internal_file_operations_function().begin();
      it != this->_internal_file_operations_function().end(); ++it) {
    total_size += FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileOperations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileOperations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileOperations::GetClassData() const { return &_class_data_; }

void FileOperations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileOperations *>(to)->MergeFrom(
      static_cast<const FileOperations &>(from));
}


void FileOperations::MergeFrom(const FileOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.FileOperations)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_operations_function_.MergeFrom(from.file_operations_function_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileOperations::CopyFrom(const FileOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.FileOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperations::IsInitialized() const {
  return true;
}

void FileOperations::InternalSwap(FileOperations* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_operations_function_.InternalSwap(&other->file_operations_function_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileOperations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[18]);
}

// ===================================================================

address_AddrEntry_DoNotUse::address_AddrEntry_DoNotUse() {}
address_AddrEntry_DoNotUse::address_AddrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void address_AddrEntry_DoNotUse::MergeFrom(const address_AddrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata address_AddrEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[19]);
}

// ===================================================================

class address::_Internal {
 public:
};

address::address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addr_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.address)
}
address::address(const address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.MergeFrom(from.addr_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dra.address)
}

void address::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

address::~address() {
  // @@protoc_insertion_point(destructor:dra.address)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void address::ArenaDtor(void* object) {
  address* _this = reinterpret_cast< address* >(object);
  (void)_this;
  _this->addr_. ~MapField();
}
inline void address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &address::ArenaDtor);
  }
}
void address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void address::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.address.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.address.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> addr = 2;
  if (!this->_internal_addr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.address.AddrEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.address.AddrEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addr().begin();
          it != this->_internal_addr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = address_AddrEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addr().begin();
          it != this->_internal_addr().end(); ++it) {
        target = address_AddrEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.address)
  return target;
}

size_t address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> addr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_addr().begin();
      it != this->_internal_addr().end(); ++it) {
    total_size += address_AddrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*address::GetClassData() const { return &_class_data_; }

void address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<address *>(to)->MergeFrom(
      static_cast<const address &>(from));
}


void address::MergeFrom(const address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.address)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addr_.MergeFrom(from.addr_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void address::CopyFrom(const address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool address::IsInitialized() const {
  return true;
}

void address::InternalSwap(address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addr_.InternalSwap(&other->addr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata address::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[20]);
}

// ===================================================================

class Condition::_Internal {
 public:
};

Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  right_branch_address_(arena),
  syzkaller_right_branch_address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      right_branch_address_(from.right_branch_address_),
      syzkaller_right_branch_address_(from.syzkaller_right_branch_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&condition_address_, &from.condition_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:dra.Condition)
}

void Condition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&condition_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:dra.Condition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Condition::ArenaDtor(void* object) {
  Condition* _this = reinterpret_cast< Condition* >(object);
  (void)_this;
}
void Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  syzkaller_right_branch_address_.Clear();
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 condition_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 syzkaller_condition_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          syzkaller_condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uncovered_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 syzkaller_uncovered_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          syzkaller_uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 successor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          successor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 right_branch_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 syzkaller_right_branch_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_syzkaller_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 condition_address = 1;
  if (this->_internal_condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_condition_address(), target);
  }

  // uint32 syzkaller_condition_address = 2;
  if (this->_internal_syzkaller_condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_syzkaller_condition_address(), target);
  }

  // uint64 uncovered_address = 3;
  if (this->_internal_uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uncovered_address(), target);
  }

  // uint32 syzkaller_uncovered_address = 4;
  if (this->_internal_syzkaller_uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_syzkaller_uncovered_address(), target);
  }

  // uint32 idx = 5;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_idx(), target);
  }

  // uint64 successor = 6;
  if (this->_internal_successor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_successor(), target);
  }

  // repeated uint64 right_branch_address = 7;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_right_branch_address(), byte_size, target);
    }
  }

  // repeated uint32 syzkaller_right_branch_address = 8;
  {
    int byte_size = _syzkaller_right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_syzkaller_right_branch_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 right_branch_address = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 syzkaller_right_branch_address = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->syzkaller_right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _syzkaller_right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 condition_address = 1;
  if (this->_internal_condition_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_condition_address());
  }

  // uint64 uncovered_address = 3;
  if (this->_internal_uncovered_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uncovered_address());
  }

  // uint32 syzkaller_condition_address = 2;
  if (this->_internal_syzkaller_condition_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_syzkaller_condition_address());
  }

  // uint32 syzkaller_uncovered_address = 4;
  if (this->_internal_syzkaller_uncovered_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_syzkaller_uncovered_address());
  }

  // uint64 successor = 6;
  if (this->_internal_successor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_successor());
  }

  // uint32 idx = 5;
  if (this->_internal_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Condition::GetClassData() const { return &_class_data_; }

void Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Condition *>(to)->MergeFrom(
      static_cast<const Condition &>(from));
}


void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  syzkaller_right_branch_address_.MergeFrom(from.syzkaller_right_branch_address_);
  if (from._internal_condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from._internal_uncovered_address() != 0) {
    _internal_set_uncovered_address(from._internal_uncovered_address());
  }
  if (from._internal_syzkaller_condition_address() != 0) {
    _internal_set_syzkaller_condition_address(from._internal_syzkaller_condition_address());
  }
  if (from._internal_syzkaller_uncovered_address() != 0) {
    _internal_set_syzkaller_uncovered_address(from._internal_syzkaller_uncovered_address());
  }
  if (from._internal_successor() != 0) {
    _internal_set_successor(from._internal_successor());
  }
  if (from._internal_idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  syzkaller_right_branch_address_.InternalSwap(&other->syzkaller_right_branch_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Condition, idx_)
      + sizeof(Condition::idx_)
      - PROTOBUF_FIELD_OFFSET(Condition, condition_address_)>(
          reinterpret_cast<char*>(&condition_address_),
          reinterpret_cast<char*>(&other->condition_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[21]);
}

// ===================================================================

class Conditions::_Internal {
 public:
};

Conditions::Conditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  condition_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.Conditions)
}
Conditions::Conditions(const Conditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      condition_(from.condition_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dra.Conditions)
}

void Conditions::SharedCtor() {
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:dra.Conditions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Conditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Conditions::ArenaDtor(void* object) {
  Conditions* _this = reinterpret_cast< Conditions* >(object);
  (void)_this;
}
void Conditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Conditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  condition_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dra.Condition condition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dra.Condition condition = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_condition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Conditions)
  return target;
}

size_t Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Conditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.Condition condition = 10;
  total_size += 1UL * this->_internal_condition_size();
  for (const auto& msg : this->condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Conditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conditions::GetClassData() const { return &_class_data_; }

void Conditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Conditions *>(to)->MergeFrom(
      static_cast<const Conditions &>(from));
}


void Conditions::MergeFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  condition_.MergeFrom(from.condition_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conditions::CopyFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  return true;
}

void Conditions::InternalSwap(Conditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  condition_.InternalSwap(&other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conditions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[22]);
}

// ===================================================================

class WriteAddresses::_Internal {
 public:
  static const ::dra::Condition& condition(const WriteAddresses* msg);
};

const ::dra::Condition&
WriteAddresses::_Internal::condition(const WriteAddresses* msg) {
  return *msg->condition_;
}
WriteAddresses::WriteAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  write_address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dra.WriteAddresses)
}
WriteAddresses::WriteAddresses(const WriteAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      write_address_(from.write_address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::dra::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.WriteAddresses)
}

void WriteAddresses::SharedCtor() {
condition_ = nullptr;
}

WriteAddresses::~WriteAddresses() {
  // @@protoc_insertion_point(destructor:dra.WriteAddresses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteAddresses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete condition_;
}

void WriteAddresses::ArenaDtor(void* object) {
  WriteAddresses* _this = reinterpret_cast< WriteAddresses* >(object);
  (void)_this;
}
void WriteAddresses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.WriteAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  if (GetArenaForAllocation() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dra.Condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dra.WriteAddress write_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteAddresses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.WriteAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Condition condition = 1;
  if (this->_internal_has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // repeated .dra.WriteAddress write_address = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_write_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.WriteAddresses)
  return target;
}

size_t WriteAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.WriteAddresses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.WriteAddress write_address = 4;
  total_size += 1UL * this->_internal_write_address_size();
  for (const auto& msg : this->write_address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Condition condition = 1;
  if (this->_internal_has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteAddresses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteAddresses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteAddresses::GetClassData() const { return &_class_data_; }

void WriteAddresses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteAddresses *>(to)->MergeFrom(
      static_cast<const WriteAddresses &>(from));
}


void WriteAddresses::MergeFrom(const WriteAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.WriteAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from._internal_has_condition()) {
    _internal_mutable_condition()->::dra::Condition::MergeFrom(from._internal_condition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteAddresses::CopyFrom(const WriteAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.WriteAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAddresses::IsInitialized() const {
  return true;
}

void WriteAddresses::InternalSwap(WriteAddresses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteAddresses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Dependency_2eproto_getter, &descriptor_table_Dependency_2eproto_once,
      file_level_metadata_Dependency_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::WriteAddress_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress* Arena::CreateMaybeMessage< ::dra::WriteAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::WriteAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::writeAddressAttributes* Arena::CreateMaybeMessage< ::dra::writeAddressAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::writeAddressAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Status_StatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Status_StatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Status_StatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Status* Arena::CreateMaybeMessage< ::dra::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_InputStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_InputStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress_InputStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_TasksCountEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_TasksCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress_TasksCountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteCountEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress_WriteCountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress* Arena::CreateMaybeMessage< ::dra::UncoveredAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::UncoveredAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Dependency* Arena::CreateMaybeMessage< ::dra::Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperationsFunction* Arena::CreateMaybeMessage< ::dra::FileOperationsFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::FileOperationsFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperations* Arena::CreateMaybeMessage< ::dra::FileOperations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::FileOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::address_AddrEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::address_AddrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::address_AddrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::address* Arena::CreateMaybeMessage< ::dra::address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::address >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Condition* Arena::CreateMaybeMessage< ::dra::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Conditions* Arena::CreateMaybeMessage< ::dra::Conditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::Conditions >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddresses* Arena::CreateMaybeMessage< ::dra::WriteAddresses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dra::WriteAddresses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
