// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Task_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Task_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Task_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Task_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Task_2eproto;
namespace dra {
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskRunTimeData;
class TaskRunTimeDataDefaultTypeInternal;
extern TaskRunTimeDataDefaultTypeInternal _TaskRunTimeData_default_instance_;
class TaskRunTimeData_CoveredAddressEntry_DoNotUse;
class TaskRunTimeData_CoveredAddressEntry_DoNotUseDefaultTypeInternal;
extern TaskRunTimeData_CoveredAddressEntry_DoNotUseDefaultTypeInternal _TaskRunTimeData_CoveredAddressEntry_DoNotUse_default_instance_;
class TaskRunTimeData_UncoveredAddressEntry_DoNotUse;
class TaskRunTimeData_UncoveredAddressEntry_DoNotUseDefaultTypeInternal;
extern TaskRunTimeData_UncoveredAddressEntry_DoNotUseDefaultTypeInternal _TaskRunTimeData_UncoveredAddressEntry_DoNotUse_default_instance_;
class Task_CoveredAddressEntry_DoNotUse;
class Task_CoveredAddressEntry_DoNotUseDefaultTypeInternal;
extern Task_CoveredAddressEntry_DoNotUseDefaultTypeInternal _Task_CoveredAddressEntry_DoNotUse_default_instance_;
class Task_UncoveredAddressEntry_DoNotUse;
class Task_UncoveredAddressEntry_DoNotUseDefaultTypeInternal;
extern Task_UncoveredAddressEntry_DoNotUseDefaultTypeInternal _Task_UncoveredAddressEntry_DoNotUse_default_instance_;
class Tasks;
class TasksDefaultTypeInternal;
extern TasksDefaultTypeInternal _Tasks_default_instance_;
class Tasks_TaskMapEntry_DoNotUse;
class Tasks_TaskMapEntry_DoNotUseDefaultTypeInternal;
extern Tasks_TaskMapEntry_DoNotUseDefaultTypeInternal _Tasks_TaskMapEntry_DoNotUse_default_instance_;
class runTimeData;
class runTimeDataDefaultTypeInternal;
extern runTimeDataDefaultTypeInternal _runTimeData_default_instance_;
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> ::dra::Task* Arena::CreateMaybeMessage<::dra::Task>(Arena*);
template<> ::dra::TaskRunTimeData* Arena::CreateMaybeMessage<::dra::TaskRunTimeData>(Arena*);
template<> ::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse>(Arena*);
template<> ::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse>(Arena*);
template<> ::dra::Task_CoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Task_CoveredAddressEntry_DoNotUse>(Arena*);
template<> ::dra::Task_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Task_UncoveredAddressEntry_DoNotUse>(Arena*);
template<> ::dra::Tasks* Arena::CreateMaybeMessage<::dra::Tasks>(Arena*);
template<> ::dra::Tasks_TaskMapEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Tasks_TaskMapEntry_DoNotUse>(Arena*);
template<> ::dra::runTimeData* Arena::CreateMaybeMessage<::dra::runTimeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dra {

enum taskStatus : int {
  untested = 0,
  testing = 1,
  not_find_input = -5,
  not_find_write_address = -4,
  not_find_write_input = -3,
  unstable_write = 11,
  stable_write = 12,
  unstable_condition = 13,
  stable_condition = 14,
  unstable_insert_write = 15,
  stable_insert_write = 16,
  unstable_insert_condition = 17,
  stable_insert_condition = 18,
  unstable = 19,
  tested = 21,
  covered = 22,
  recursive = 31,
  out = 32,
  taskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  taskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool taskStatus_IsValid(int value);
constexpr taskStatus taskStatus_MIN = not_find_input;
constexpr taskStatus taskStatus_MAX = out;
constexpr int taskStatus_ARRAYSIZE = taskStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* taskStatus_descriptor();
template<typename T>
inline const std::string& taskStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, taskStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function taskStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    taskStatus_descriptor(), enum_t_value);
}
inline bool taskStatus_Parse(
    const std::string& name, taskStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<taskStatus>(
    taskStatus_descriptor(), name, value);
}
enum TaskKind : int {
  Boot = 0,
  High = 1,
  Ckeck = 3,
  Normal = 5,
  TaskKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskKind_IsValid(int value);
constexpr TaskKind TaskKind_MIN = Boot;
constexpr TaskKind TaskKind_MAX = Normal;
constexpr int TaskKind_ARRAYSIZE = TaskKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskKind_descriptor();
template<typename T>
inline const std::string& TaskKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskKind_descriptor(), enum_t_value);
}
inline bool TaskKind_Parse(
    const std::string& name, TaskKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskKind>(
    TaskKind_descriptor(), name, value);
}
// ===================================================================

class runTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.runTimeData) */ {
 public:
  runTimeData();
  virtual ~runTimeData();

  runTimeData(const runTimeData& from);
  runTimeData(runTimeData&& from) noexcept
    : runTimeData() {
    *this = ::std::move(from);
  }

  inline runTimeData& operator=(const runTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline runTimeData& operator=(runTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const runTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const runTimeData* internal_default_instance() {
    return reinterpret_cast<const runTimeData*>(
               &_runTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(runTimeData& a, runTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(runTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline runTimeData* New() const final {
    return CreateMaybeMessage<runTimeData>(nullptr);
  }

  runTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<runTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const runTimeData& from);
  void MergeFrom(const runTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(runTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.runTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightBranchAddressFieldNumber = 6,
    kProgramFieldNumber = 12,
    kPriorityFieldNumber = 1,
    kWriteAddressFieldNumber = 2,
    kConditionAddressFieldNumber = 3,
    kAddressFieldNumber = 4,
    kTaskStatusFieldNumber = 10,
    kIdxFieldNumber = 13,
    kRecursiveCountFieldNumber = 14,
    kCheckWriteFieldNumber = 20,
    kCheckConditionFieldNumber = 21,
    kCheckAddressFieldNumber = 22,
    kCheckRightBranchAddressFieldNumber = 23,
  };
  // repeated uint32 right_branch_address = 6;
  int right_branch_address_size() const;
  private:
  int _internal_right_branch_address_size() const;
  public:
  void clear_right_branch_address();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_right_branch_address(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_right_branch_address() const;
  void _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_right_branch_address();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 right_branch_address(int index) const;
  void set_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      right_branch_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_right_branch_address();

  // bytes program = 12;
  void clear_program();
  const std::string& program() const;
  void set_program(const std::string& value);
  void set_program(std::string&& value);
  void set_program(const char* value);
  void set_program(const void* value, size_t size);
  std::string* mutable_program();
  std::string* release_program();
  void set_allocated_program(std::string* program);
  private:
  const std::string& _internal_program() const;
  void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // uint32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 write_address = 2;
  void clear_write_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_address() const;
  void set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_address() const;
  void _internal_set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 condition_address = 3;
  void clear_condition_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_address() const;
  void set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_condition_address() const;
  void _internal_set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 address = 4;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .dra.taskStatus task_status = 10;
  void clear_task_status();
  ::dra::taskStatus task_status() const;
  void set_task_status(::dra::taskStatus value);
  private:
  ::dra::taskStatus _internal_task_status() const;
  void _internal_set_task_status(::dra::taskStatus value);
  public:

  // uint32 idx = 13;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 recursive_count = 14;
  void clear_recursive_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 recursive_count() const;
  void set_recursive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recursive_count() const;
  void _internal_set_recursive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool checkWrite = 20;
  void clear_checkwrite();
  bool checkwrite() const;
  void set_checkwrite(bool value);
  private:
  bool _internal_checkwrite() const;
  void _internal_set_checkwrite(bool value);
  public:

  // bool checkCondition = 21;
  void clear_checkcondition();
  bool checkcondition() const;
  void set_checkcondition(bool value);
  private:
  bool _internal_checkcondition() const;
  void _internal_set_checkcondition(bool value);
  public:

  // bool checkAddress = 22;
  void clear_checkaddress();
  bool checkaddress() const;
  void set_checkaddress(bool value);
  private:
  bool _internal_checkaddress() const;
  void _internal_set_checkaddress(bool value);
  public:

  // bool checkRightBranchAddress = 23;
  void clear_checkrightbranchaddress();
  bool checkrightbranchaddress() const;
  void set_checkrightbranchaddress(bool value);
  private:
  bool _internal_checkrightbranchaddress() const;
  void _internal_set_checkrightbranchaddress(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dra.runTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > right_branch_address_;
  mutable std::atomic<int> _right_branch_address_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  int task_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recursive_count_;
  bool checkwrite_;
  bool checkcondition_;
  bool checkaddress_;
  bool checkrightbranchaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Task_2eproto;
};
// -------------------------------------------------------------------

class TaskRunTimeData_UncoveredAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskRunTimeData_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskRunTimeData_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TaskRunTimeData_UncoveredAddressEntry_DoNotUse();
  TaskRunTimeData_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TaskRunTimeData_UncoveredAddressEntry_DoNotUse& other);
  static const TaskRunTimeData_UncoveredAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskRunTimeData_UncoveredAddressEntry_DoNotUse*>(&_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class TaskRunTimeData_CoveredAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskRunTimeData_CoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskRunTimeData_CoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TaskRunTimeData_CoveredAddressEntry_DoNotUse();
  TaskRunTimeData_CoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TaskRunTimeData_CoveredAddressEntry_DoNotUse& other);
  static const TaskRunTimeData_CoveredAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskRunTimeData_CoveredAddressEntry_DoNotUse*>(&_TaskRunTimeData_CoveredAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TaskRunTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.TaskRunTimeData) */ {
 public:
  TaskRunTimeData();
  virtual ~TaskRunTimeData();

  TaskRunTimeData(const TaskRunTimeData& from);
  TaskRunTimeData(TaskRunTimeData&& from) noexcept
    : TaskRunTimeData() {
    *this = ::std::move(from);
  }

  inline TaskRunTimeData& operator=(const TaskRunTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRunTimeData& operator=(TaskRunTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskRunTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRunTimeData* internal_default_instance() {
    return reinterpret_cast<const TaskRunTimeData*>(
               &_TaskRunTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskRunTimeData& a, TaskRunTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRunTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRunTimeData* New() const final {
    return CreateMaybeMessage<TaskRunTimeData>(nullptr);
  }

  TaskRunTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRunTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskRunTimeData& from);
  void MergeFrom(const TaskRunTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRunTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.TaskRunTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUncoveredAddressFieldNumber = 21,
    kCoveredAddressFieldNumber = 23,
    kHashFieldNumber = 1,
    kProgramFieldNumber = 2,
    kWriteIdxFieldNumber = 5,
    kConditionIdxFieldNumber = 6,
    kCheckFieldNumber = 10,
  };
  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  int uncovered_address_size() const;
  private:
  int _internal_uncovered_address_size() const;
  public:
  void clear_uncovered_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      _internal_uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      _internal_mutable_uncovered_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      mutable_uncovered_address();

  // map<uint32, .dra.runTimeData> covered_address = 23;
  int covered_address_size() const;
  private:
  int _internal_covered_address_size() const;
  public:
  void clear_covered_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      _internal_covered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      _internal_mutable_covered_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      covered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      mutable_covered_address();

  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes program = 2;
  void clear_program();
  const std::string& program() const;
  void set_program(const std::string& value);
  void set_program(std::string&& value);
  void set_program(const char* value);
  void set_program(const void* value, size_t size);
  std::string* mutable_program();
  std::string* release_program();
  void set_allocated_program(std::string* program);
  private:
  const std::string& _internal_program() const;
  void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // uint32 write_idx = 5;
  void clear_write_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_idx() const;
  void set_write_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_idx() const;
  void _internal_set_write_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 condition_idx = 6;
  void clear_condition_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_idx() const;
  void set_condition_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_condition_idx() const;
  void _internal_set_condition_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool check = 10;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dra.TaskRunTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TaskRunTimeData_UncoveredAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TaskRunTimeData_CoveredAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > covered_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_idx_;
  bool check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Task_2eproto;
};
// -------------------------------------------------------------------

class Task_UncoveredAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Task_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Task_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Task_UncoveredAddressEntry_DoNotUse();
  Task_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Task_UncoveredAddressEntry_DoNotUse& other);
  static const Task_UncoveredAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Task_UncoveredAddressEntry_DoNotUse*>(&_Task_UncoveredAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class Task_CoveredAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Task_CoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Task_CoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Task_CoveredAddressEntry_DoNotUse();
  Task_CoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Task_CoveredAddressEntry_DoNotUse& other);
  static const Task_CoveredAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Task_CoveredAddressEntry_DoNotUse*>(&_Task_CoveredAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUncoveredAddressFieldNumber = 21,
    kCoveredAddressFieldNumber = 23,
    kTaskRunTimeDataFieldNumber = 31,
    kSigFieldNumber = 1,
    kProgramFieldNumber = 3,
    kHashFieldNumber = 6,
    kWriteSigFieldNumber = 11,
    kWriteProgramFieldNumber = 13,
    kIndexFieldNumber = 2,
    kKindFieldNumber = 4,
    kPriorityFieldNumber = 5,
    kCountFieldNumber = 7,
    kCheckFieldNumber = 25,
    kWriteIndexFieldNumber = 12,
    kTaskStatusFieldNumber = 24,
  };
  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  int uncovered_address_size() const;
  private:
  int _internal_uncovered_address_size() const;
  public:
  void clear_uncovered_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      _internal_uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      _internal_mutable_uncovered_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      mutable_uncovered_address();

  // map<uint32, .dra.runTimeData> covered_address = 23;
  int covered_address_size() const;
  private:
  int _internal_covered_address_size() const;
  public:
  void clear_covered_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      _internal_covered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      _internal_mutable_covered_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
      covered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
      mutable_covered_address();

  // repeated .dra.TaskRunTimeData task_run_time_data = 31;
  int task_run_time_data_size() const;
  private:
  int _internal_task_run_time_data_size() const;
  public:
  void clear_task_run_time_data();
  ::dra::TaskRunTimeData* mutable_task_run_time_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::TaskRunTimeData >*
      mutable_task_run_time_data();
  private:
  const ::dra::TaskRunTimeData& _internal_task_run_time_data(int index) const;
  ::dra::TaskRunTimeData* _internal_add_task_run_time_data();
  public:
  const ::dra::TaskRunTimeData& task_run_time_data(int index) const;
  ::dra::TaskRunTimeData* add_task_run_time_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::TaskRunTimeData >&
      task_run_time_data() const;

  // string sig = 1;
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // bytes program = 3;
  void clear_program();
  const std::string& program() const;
  void set_program(const std::string& value);
  void set_program(std::string&& value);
  void set_program(const char* value);
  void set_program(const void* value, size_t size);
  std::string* mutable_program();
  std::string* release_program();
  void set_allocated_program(std::string* program);
  private:
  const std::string& _internal_program() const;
  void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // string hash = 6;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string write_sig = 11;
  void clear_write_sig();
  const std::string& write_sig() const;
  void set_write_sig(const std::string& value);
  void set_write_sig(std::string&& value);
  void set_write_sig(const char* value);
  void set_write_sig(const char* value, size_t size);
  std::string* mutable_write_sig();
  std::string* release_write_sig();
  void set_allocated_write_sig(std::string* write_sig);
  private:
  const std::string& _internal_write_sig() const;
  void _internal_set_write_sig(const std::string& value);
  std::string* _internal_mutable_write_sig();
  public:

  // bytes write_program = 13;
  void clear_write_program();
  const std::string& write_program() const;
  void set_write_program(const std::string& value);
  void set_write_program(std::string&& value);
  void set_write_program(const char* value);
  void set_write_program(const void* value, size_t size);
  std::string* mutable_write_program();
  std::string* release_write_program();
  void set_allocated_write_program(std::string* write_program);
  private:
  const std::string& _internal_write_program() const;
  void _internal_set_write_program(const std::string& value);
  std::string* _internal_mutable_write_program();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 kind = 4;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 priority = 5;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 count = 7;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool check = 25;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // uint32 write_index = 12;
  void clear_write_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_index() const;
  void set_write_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_index() const;
  void _internal_set_write_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .dra.taskStatus task_status = 24;
  void clear_task_status();
  ::dra::taskStatus task_status() const;
  void set_task_status(::dra::taskStatus value);
  private:
  ::dra::taskStatus _internal_task_status() const;
  void _internal_set_task_status(::dra::taskStatus value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Task_UncoveredAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Task_CoveredAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > covered_address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::TaskRunTimeData > task_run_time_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kind_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  bool check_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_index_;
  int task_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Task_2eproto;
};
// -------------------------------------------------------------------

class Tasks_TaskMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Tasks_TaskMapEntry_DoNotUse, 
    std::string, ::dra::Task,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Tasks_TaskMapEntry_DoNotUse, 
    std::string, ::dra::Task,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Tasks_TaskMapEntry_DoNotUse();
  Tasks_TaskMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Tasks_TaskMapEntry_DoNotUse& other);
  static const Tasks_TaskMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Tasks_TaskMapEntry_DoNotUse*>(&_Tasks_TaskMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.Tasks.TaskMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Tasks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Tasks) */ {
 public:
  Tasks();
  virtual ~Tasks();

  Tasks(const Tasks& from);
  Tasks(Tasks&& from) noexcept
    : Tasks() {
    *this = ::std::move(from);
  }

  inline Tasks& operator=(const Tasks& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tasks& operator=(Tasks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tasks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tasks* internal_default_instance() {
    return reinterpret_cast<const Tasks*>(
               &_Tasks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Tasks& a, Tasks& b) {
    a.Swap(&b);
  }
  inline void Swap(Tasks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tasks* New() const final {
    return CreateMaybeMessage<Tasks>(nullptr);
  }

  Tasks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tasks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tasks& from);
  void MergeFrom(const Tasks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tasks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Tasks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTaskMapFieldNumber = 1,
    kTaskArrayFieldNumber = 2,
    kNameFieldNumber = 41,
    kKindFieldNumber = 42,
  };
  // map<string, .dra.Task> task_map = 1;
  int task_map_size() const;
  private:
  int _internal_task_map_size() const;
  public:
  void clear_task_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >&
      _internal_task_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >*
      _internal_mutable_task_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >&
      task_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >*
      mutable_task_map();

  // repeated .dra.Task task_array = 2;
  int task_array_size() const;
  private:
  int _internal_task_array_size() const;
  public:
  void clear_task_array();
  ::dra::Task* mutable_task_array(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Task >*
      mutable_task_array();
  private:
  const ::dra::Task& _internal_task_array(int index) const;
  ::dra::Task* _internal_add_task_array();
  public:
  const ::dra::Task& task_array(int index) const;
  ::dra::Task* add_task_array();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Task >&
      task_array() const;

  // string name = 41;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .dra.TaskKind kind = 42;
  void clear_kind();
  ::dra::TaskKind kind() const;
  void set_kind(::dra::TaskKind value);
  private:
  ::dra::TaskKind _internal_kind() const;
  void _internal_set_kind(::dra::TaskKind value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Tasks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Tasks_TaskMapEntry_DoNotUse,
      std::string, ::dra::Task,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > task_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Task > task_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Task_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// runTimeData

// uint32 priority = 1;
inline void runTimeData::clear_priority() {
  priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::priority() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.priority)
  return _internal_priority();
}
inline void runTimeData::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  priority_ = value;
}
inline void runTimeData::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.priority)
}

// uint32 write_address = 2;
inline void runTimeData::clear_write_address() {
  write_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_write_address() const {
  return write_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::write_address() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.write_address)
  return _internal_write_address();
}
inline void runTimeData::_internal_set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_address_ = value;
}
inline void runTimeData::set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_address(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.write_address)
}

// uint32 condition_address = 3;
inline void runTimeData::clear_condition_address() {
  condition_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_condition_address() const {
  return condition_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::condition_address() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.condition_address)
  return _internal_condition_address();
}
inline void runTimeData::_internal_set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  condition_address_ = value;
}
inline void runTimeData::set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_condition_address(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.condition_address)
}

// uint32 address = 4;
inline void runTimeData::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::address() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.address)
  return _internal_address();
}
inline void runTimeData::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
}
inline void runTimeData::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.address)
}

// repeated uint32 right_branch_address = 6;
inline int runTimeData::_internal_right_branch_address_size() const {
  return right_branch_address_.size();
}
inline int runTimeData::right_branch_address_size() const {
  return _internal_right_branch_address_size();
}
inline void runTimeData::clear_right_branch_address() {
  right_branch_address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_right_branch_address(int index) const {
  return right_branch_address_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::right_branch_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.right_branch_address)
  return _internal_right_branch_address(index);
}
inline void runTimeData::set_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  right_branch_address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.right_branch_address)
}
inline void runTimeData::_internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  right_branch_address_.Add(value);
}
inline void runTimeData::add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_right_branch_address(value);
  // @@protoc_insertion_point(field_add:dra.runTimeData.right_branch_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
runTimeData::_internal_right_branch_address() const {
  return right_branch_address_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
runTimeData::right_branch_address() const {
  // @@protoc_insertion_point(field_list:dra.runTimeData.right_branch_address)
  return _internal_right_branch_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
runTimeData::_internal_mutable_right_branch_address() {
  return &right_branch_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
runTimeData::mutable_right_branch_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.runTimeData.right_branch_address)
  return _internal_mutable_right_branch_address();
}

// .dra.taskStatus task_status = 10;
inline void runTimeData::clear_task_status() {
  task_status_ = 0;
}
inline ::dra::taskStatus runTimeData::_internal_task_status() const {
  return static_cast< ::dra::taskStatus >(task_status_);
}
inline ::dra::taskStatus runTimeData::task_status() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.task_status)
  return _internal_task_status();
}
inline void runTimeData::_internal_set_task_status(::dra::taskStatus value) {
  
  task_status_ = value;
}
inline void runTimeData::set_task_status(::dra::taskStatus value) {
  _internal_set_task_status(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.task_status)
}

// bytes program = 12;
inline void runTimeData::clear_program() {
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& runTimeData::program() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.program)
  return _internal_program();
}
inline void runTimeData::set_program(const std::string& value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.program)
}
inline std::string* runTimeData::mutable_program() {
  // @@protoc_insertion_point(field_mutable:dra.runTimeData.program)
  return _internal_mutable_program();
}
inline const std::string& runTimeData::_internal_program() const {
  return program_.GetNoArena();
}
inline void runTimeData::_internal_set_program(const std::string& value) {
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void runTimeData::set_program(std::string&& value) {
  
  program_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.runTimeData.program)
}
inline void runTimeData::set_program(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.runTimeData.program)
}
inline void runTimeData::set_program(const void* value, size_t size) {
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.runTimeData.program)
}
inline std::string* runTimeData::_internal_mutable_program() {
  
  return program_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* runTimeData::release_program() {
  // @@protoc_insertion_point(field_release:dra.runTimeData.program)
  
  return program_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void runTimeData::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    
  } else {
    
  }
  program_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program);
  // @@protoc_insertion_point(field_set_allocated:dra.runTimeData.program)
}

// uint32 idx = 13;
inline void runTimeData::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::idx() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.idx)
  return _internal_idx();
}
inline void runTimeData::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void runTimeData::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.idx)
}

// uint32 recursive_count = 14;
inline void runTimeData::clear_recursive_count() {
  recursive_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::_internal_recursive_count() const {
  return recursive_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runTimeData::recursive_count() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.recursive_count)
  return _internal_recursive_count();
}
inline void runTimeData::_internal_set_recursive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recursive_count_ = value;
}
inline void runTimeData::set_recursive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recursive_count(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.recursive_count)
}

// bool checkWrite = 20;
inline void runTimeData::clear_checkwrite() {
  checkwrite_ = false;
}
inline bool runTimeData::_internal_checkwrite() const {
  return checkwrite_;
}
inline bool runTimeData::checkwrite() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.checkWrite)
  return _internal_checkwrite();
}
inline void runTimeData::_internal_set_checkwrite(bool value) {
  
  checkwrite_ = value;
}
inline void runTimeData::set_checkwrite(bool value) {
  _internal_set_checkwrite(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.checkWrite)
}

// bool checkCondition = 21;
inline void runTimeData::clear_checkcondition() {
  checkcondition_ = false;
}
inline bool runTimeData::_internal_checkcondition() const {
  return checkcondition_;
}
inline bool runTimeData::checkcondition() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.checkCondition)
  return _internal_checkcondition();
}
inline void runTimeData::_internal_set_checkcondition(bool value) {
  
  checkcondition_ = value;
}
inline void runTimeData::set_checkcondition(bool value) {
  _internal_set_checkcondition(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.checkCondition)
}

// bool checkAddress = 22;
inline void runTimeData::clear_checkaddress() {
  checkaddress_ = false;
}
inline bool runTimeData::_internal_checkaddress() const {
  return checkaddress_;
}
inline bool runTimeData::checkaddress() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.checkAddress)
  return _internal_checkaddress();
}
inline void runTimeData::_internal_set_checkaddress(bool value) {
  
  checkaddress_ = value;
}
inline void runTimeData::set_checkaddress(bool value) {
  _internal_set_checkaddress(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.checkAddress)
}

// bool checkRightBranchAddress = 23;
inline void runTimeData::clear_checkrightbranchaddress() {
  checkrightbranchaddress_ = false;
}
inline bool runTimeData::_internal_checkrightbranchaddress() const {
  return checkrightbranchaddress_;
}
inline bool runTimeData::checkrightbranchaddress() const {
  // @@protoc_insertion_point(field_get:dra.runTimeData.checkRightBranchAddress)
  return _internal_checkrightbranchaddress();
}
inline void runTimeData::_internal_set_checkrightbranchaddress(bool value) {
  
  checkrightbranchaddress_ = value;
}
inline void runTimeData::set_checkrightbranchaddress(bool value) {
  _internal_set_checkrightbranchaddress(value);
  // @@protoc_insertion_point(field_set:dra.runTimeData.checkRightBranchAddress)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TaskRunTimeData

// string hash = 1;
inline void TaskRunTimeData::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskRunTimeData::hash() const {
  // @@protoc_insertion_point(field_get:dra.TaskRunTimeData.hash)
  return _internal_hash();
}
inline void TaskRunTimeData::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:dra.TaskRunTimeData.hash)
}
inline std::string* TaskRunTimeData::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:dra.TaskRunTimeData.hash)
  return _internal_mutable_hash();
}
inline const std::string& TaskRunTimeData::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void TaskRunTimeData::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskRunTimeData::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.TaskRunTimeData.hash)
}
inline void TaskRunTimeData::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.TaskRunTimeData.hash)
}
inline void TaskRunTimeData::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.TaskRunTimeData.hash)
}
inline std::string* TaskRunTimeData::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskRunTimeData::release_hash() {
  // @@protoc_insertion_point(field_release:dra.TaskRunTimeData.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRunTimeData::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:dra.TaskRunTimeData.hash)
}

// bytes program = 2;
inline void TaskRunTimeData::clear_program() {
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskRunTimeData::program() const {
  // @@protoc_insertion_point(field_get:dra.TaskRunTimeData.program)
  return _internal_program();
}
inline void TaskRunTimeData::set_program(const std::string& value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:dra.TaskRunTimeData.program)
}
inline std::string* TaskRunTimeData::mutable_program() {
  // @@protoc_insertion_point(field_mutable:dra.TaskRunTimeData.program)
  return _internal_mutable_program();
}
inline const std::string& TaskRunTimeData::_internal_program() const {
  return program_.GetNoArena();
}
inline void TaskRunTimeData::_internal_set_program(const std::string& value) {
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskRunTimeData::set_program(std::string&& value) {
  
  program_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.TaskRunTimeData.program)
}
inline void TaskRunTimeData::set_program(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.TaskRunTimeData.program)
}
inline void TaskRunTimeData::set_program(const void* value, size_t size) {
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.TaskRunTimeData.program)
}
inline std::string* TaskRunTimeData::_internal_mutable_program() {
  
  return program_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskRunTimeData::release_program() {
  // @@protoc_insertion_point(field_release:dra.TaskRunTimeData.program)
  
  return program_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRunTimeData::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    
  } else {
    
  }
  program_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program);
  // @@protoc_insertion_point(field_set_allocated:dra.TaskRunTimeData.program)
}

// uint32 write_idx = 5;
inline void TaskRunTimeData::clear_write_idx() {
  write_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRunTimeData::_internal_write_idx() const {
  return write_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRunTimeData::write_idx() const {
  // @@protoc_insertion_point(field_get:dra.TaskRunTimeData.write_idx)
  return _internal_write_idx();
}
inline void TaskRunTimeData::_internal_set_write_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_idx_ = value;
}
inline void TaskRunTimeData::set_write_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_idx(value);
  // @@protoc_insertion_point(field_set:dra.TaskRunTimeData.write_idx)
}

// uint32 condition_idx = 6;
inline void TaskRunTimeData::clear_condition_idx() {
  condition_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRunTimeData::_internal_condition_idx() const {
  return condition_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRunTimeData::condition_idx() const {
  // @@protoc_insertion_point(field_get:dra.TaskRunTimeData.condition_idx)
  return _internal_condition_idx();
}
inline void TaskRunTimeData::_internal_set_condition_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  condition_idx_ = value;
}
inline void TaskRunTimeData::set_condition_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_condition_idx(value);
  // @@protoc_insertion_point(field_set:dra.TaskRunTimeData.condition_idx)
}

// bool check = 10;
inline void TaskRunTimeData::clear_check() {
  check_ = false;
}
inline bool TaskRunTimeData::_internal_check() const {
  return check_;
}
inline bool TaskRunTimeData::check() const {
  // @@protoc_insertion_point(field_get:dra.TaskRunTimeData.check)
  return _internal_check();
}
inline void TaskRunTimeData::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void TaskRunTimeData::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:dra.TaskRunTimeData.check)
}

// map<uint32, .dra.runTimeData> uncovered_address = 21;
inline int TaskRunTimeData::_internal_uncovered_address_size() const {
  return uncovered_address_.size();
}
inline int TaskRunTimeData::uncovered_address_size() const {
  return _internal_uncovered_address_size();
}
inline void TaskRunTimeData::clear_uncovered_address() {
  uncovered_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
TaskRunTimeData::_internal_uncovered_address() const {
  return uncovered_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
TaskRunTimeData::uncovered_address() const {
  // @@protoc_insertion_point(field_map:dra.TaskRunTimeData.uncovered_address)
  return _internal_uncovered_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
TaskRunTimeData::_internal_mutable_uncovered_address() {
  return uncovered_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
TaskRunTimeData::mutable_uncovered_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.TaskRunTimeData.uncovered_address)
  return _internal_mutable_uncovered_address();
}

// map<uint32, .dra.runTimeData> covered_address = 23;
inline int TaskRunTimeData::_internal_covered_address_size() const {
  return covered_address_.size();
}
inline int TaskRunTimeData::covered_address_size() const {
  return _internal_covered_address_size();
}
inline void TaskRunTimeData::clear_covered_address() {
  covered_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
TaskRunTimeData::_internal_covered_address() const {
  return covered_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
TaskRunTimeData::covered_address() const {
  // @@protoc_insertion_point(field_map:dra.TaskRunTimeData.covered_address)
  return _internal_covered_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
TaskRunTimeData::_internal_mutable_covered_address() {
  return covered_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
TaskRunTimeData::mutable_covered_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.TaskRunTimeData.covered_address)
  return _internal_mutable_covered_address();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Task

// string sig = 1;
inline void Task::clear_sig() {
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::sig() const {
  // @@protoc_insertion_point(field_get:dra.Task.sig)
  return _internal_sig();
}
inline void Task::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:dra.Task.sig)
}
inline std::string* Task::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:dra.Task.sig)
  return _internal_mutable_sig();
}
inline const std::string& Task::_internal_sig() const {
  return sig_.GetNoArena();
}
inline void Task::_internal_set_sig(const std::string& value) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_sig(std::string&& value) {
  
  sig_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Task.sig)
}
inline void Task::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Task.sig)
}
inline void Task::set_sig(const char* value, size_t size) {
  
  sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Task.sig)
}
inline std::string* Task::_internal_mutable_sig() {
  
  return sig_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_sig() {
  // @@protoc_insertion_point(field_release:dra.Task.sig)
  
  return sig_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:dra.Task.sig)
}

// uint32 index = 2;
inline void Task::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::index() const {
  // @@protoc_insertion_point(field_get:dra.Task.index)
  return _internal_index();
}
inline void Task::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void Task::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dra.Task.index)
}

// bytes program = 3;
inline void Task::clear_program() {
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::program() const {
  // @@protoc_insertion_point(field_get:dra.Task.program)
  return _internal_program();
}
inline void Task::set_program(const std::string& value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:dra.Task.program)
}
inline std::string* Task::mutable_program() {
  // @@protoc_insertion_point(field_mutable:dra.Task.program)
  return _internal_mutable_program();
}
inline const std::string& Task::_internal_program() const {
  return program_.GetNoArena();
}
inline void Task::_internal_set_program(const std::string& value) {
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_program(std::string&& value) {
  
  program_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Task.program)
}
inline void Task::set_program(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Task.program)
}
inline void Task::set_program(const void* value, size_t size) {
  
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Task.program)
}
inline std::string* Task::_internal_mutable_program() {
  
  return program_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_program() {
  // @@protoc_insertion_point(field_release:dra.Task.program)
  
  return program_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    
  } else {
    
  }
  program_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program);
  // @@protoc_insertion_point(field_set_allocated:dra.Task.program)
}

// uint32 kind = 4;
inline void Task::clear_kind() {
  kind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::kind() const {
  // @@protoc_insertion_point(field_get:dra.Task.kind)
  return _internal_kind();
}
inline void Task::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kind_ = value;
}
inline void Task::set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:dra.Task.kind)
}

// int32 priority = 5;
inline void Task::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::priority() const {
  // @@protoc_insertion_point(field_get:dra.Task.priority)
  return _internal_priority();
}
inline void Task::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void Task::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:dra.Task.priority)
}

// string hash = 6;
inline void Task::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::hash() const {
  // @@protoc_insertion_point(field_get:dra.Task.hash)
  return _internal_hash();
}
inline void Task::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:dra.Task.hash)
}
inline std::string* Task::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:dra.Task.hash)
  return _internal_mutable_hash();
}
inline const std::string& Task::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void Task::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Task.hash)
}
inline void Task::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Task.hash)
}
inline void Task::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Task.hash)
}
inline std::string* Task::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_hash() {
  // @@protoc_insertion_point(field_release:dra.Task.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:dra.Task.hash)
}

// uint32 count = 7;
inline void Task::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::count() const {
  // @@protoc_insertion_point(field_get:dra.Task.count)
  return _internal_count();
}
inline void Task::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void Task::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:dra.Task.count)
}

// string write_sig = 11;
inline void Task::clear_write_sig() {
  write_sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::write_sig() const {
  // @@protoc_insertion_point(field_get:dra.Task.write_sig)
  return _internal_write_sig();
}
inline void Task::set_write_sig(const std::string& value) {
  _internal_set_write_sig(value);
  // @@protoc_insertion_point(field_set:dra.Task.write_sig)
}
inline std::string* Task::mutable_write_sig() {
  // @@protoc_insertion_point(field_mutable:dra.Task.write_sig)
  return _internal_mutable_write_sig();
}
inline const std::string& Task::_internal_write_sig() const {
  return write_sig_.GetNoArena();
}
inline void Task::_internal_set_write_sig(const std::string& value) {
  
  write_sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_write_sig(std::string&& value) {
  
  write_sig_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Task.write_sig)
}
inline void Task::set_write_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  write_sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Task.write_sig)
}
inline void Task::set_write_sig(const char* value, size_t size) {
  
  write_sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Task.write_sig)
}
inline std::string* Task::_internal_mutable_write_sig() {
  
  return write_sig_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_write_sig() {
  // @@protoc_insertion_point(field_release:dra.Task.write_sig)
  
  return write_sig_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_write_sig(std::string* write_sig) {
  if (write_sig != nullptr) {
    
  } else {
    
  }
  write_sig_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), write_sig);
  // @@protoc_insertion_point(field_set_allocated:dra.Task.write_sig)
}

// uint32 write_index = 12;
inline void Task::clear_write_index() {
  write_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_write_index() const {
  return write_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::write_index() const {
  // @@protoc_insertion_point(field_get:dra.Task.write_index)
  return _internal_write_index();
}
inline void Task::_internal_set_write_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_index_ = value;
}
inline void Task::set_write_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_index(value);
  // @@protoc_insertion_point(field_set:dra.Task.write_index)
}

// bytes write_program = 13;
inline void Task::clear_write_program() {
  write_program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::write_program() const {
  // @@protoc_insertion_point(field_get:dra.Task.write_program)
  return _internal_write_program();
}
inline void Task::set_write_program(const std::string& value) {
  _internal_set_write_program(value);
  // @@protoc_insertion_point(field_set:dra.Task.write_program)
}
inline std::string* Task::mutable_write_program() {
  // @@protoc_insertion_point(field_mutable:dra.Task.write_program)
  return _internal_mutable_write_program();
}
inline const std::string& Task::_internal_write_program() const {
  return write_program_.GetNoArena();
}
inline void Task::_internal_set_write_program(const std::string& value) {
  
  write_program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_write_program(std::string&& value) {
  
  write_program_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Task.write_program)
}
inline void Task::set_write_program(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  write_program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Task.write_program)
}
inline void Task::set_write_program(const void* value, size_t size) {
  
  write_program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Task.write_program)
}
inline std::string* Task::_internal_mutable_write_program() {
  
  return write_program_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_write_program() {
  // @@protoc_insertion_point(field_release:dra.Task.write_program)
  
  return write_program_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_write_program(std::string* write_program) {
  if (write_program != nullptr) {
    
  } else {
    
  }
  write_program_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), write_program);
  // @@protoc_insertion_point(field_set_allocated:dra.Task.write_program)
}

// .dra.taskStatus task_status = 24;
inline void Task::clear_task_status() {
  task_status_ = 0;
}
inline ::dra::taskStatus Task::_internal_task_status() const {
  return static_cast< ::dra::taskStatus >(task_status_);
}
inline ::dra::taskStatus Task::task_status() const {
  // @@protoc_insertion_point(field_get:dra.Task.task_status)
  return _internal_task_status();
}
inline void Task::_internal_set_task_status(::dra::taskStatus value) {
  
  task_status_ = value;
}
inline void Task::set_task_status(::dra::taskStatus value) {
  _internal_set_task_status(value);
  // @@protoc_insertion_point(field_set:dra.Task.task_status)
}

// bool check = 25;
inline void Task::clear_check() {
  check_ = false;
}
inline bool Task::_internal_check() const {
  return check_;
}
inline bool Task::check() const {
  // @@protoc_insertion_point(field_get:dra.Task.check)
  return _internal_check();
}
inline void Task::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void Task::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:dra.Task.check)
}

// map<uint32, .dra.runTimeData> uncovered_address = 21;
inline int Task::_internal_uncovered_address_size() const {
  return uncovered_address_.size();
}
inline int Task::uncovered_address_size() const {
  return _internal_uncovered_address_size();
}
inline void Task::clear_uncovered_address() {
  uncovered_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
Task::_internal_uncovered_address() const {
  return uncovered_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
Task::uncovered_address() const {
  // @@protoc_insertion_point(field_map:dra.Task.uncovered_address)
  return _internal_uncovered_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
Task::_internal_mutable_uncovered_address() {
  return uncovered_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
Task::mutable_uncovered_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.Task.uncovered_address)
  return _internal_mutable_uncovered_address();
}

// map<uint32, .dra.runTimeData> covered_address = 23;
inline int Task::_internal_covered_address_size() const {
  return covered_address_.size();
}
inline int Task::covered_address_size() const {
  return _internal_covered_address_size();
}
inline void Task::clear_covered_address() {
  covered_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
Task::_internal_covered_address() const {
  return covered_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >&
Task::covered_address() const {
  // @@protoc_insertion_point(field_map:dra.Task.covered_address)
  return _internal_covered_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
Task::_internal_mutable_covered_address() {
  return covered_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >*
Task::mutable_covered_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.Task.covered_address)
  return _internal_mutable_covered_address();
}

// repeated .dra.TaskRunTimeData task_run_time_data = 31;
inline int Task::_internal_task_run_time_data_size() const {
  return task_run_time_data_.size();
}
inline int Task::task_run_time_data_size() const {
  return _internal_task_run_time_data_size();
}
inline void Task::clear_task_run_time_data() {
  task_run_time_data_.Clear();
}
inline ::dra::TaskRunTimeData* Task::mutable_task_run_time_data(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Task.task_run_time_data)
  return task_run_time_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::TaskRunTimeData >*
Task::mutable_task_run_time_data() {
  // @@protoc_insertion_point(field_mutable_list:dra.Task.task_run_time_data)
  return &task_run_time_data_;
}
inline const ::dra::TaskRunTimeData& Task::_internal_task_run_time_data(int index) const {
  return task_run_time_data_.Get(index);
}
inline const ::dra::TaskRunTimeData& Task::task_run_time_data(int index) const {
  // @@protoc_insertion_point(field_get:dra.Task.task_run_time_data)
  return _internal_task_run_time_data(index);
}
inline ::dra::TaskRunTimeData* Task::_internal_add_task_run_time_data() {
  return task_run_time_data_.Add();
}
inline ::dra::TaskRunTimeData* Task::add_task_run_time_data() {
  // @@protoc_insertion_point(field_add:dra.Task.task_run_time_data)
  return _internal_add_task_run_time_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::TaskRunTimeData >&
Task::task_run_time_data() const {
  // @@protoc_insertion_point(field_list:dra.Task.task_run_time_data)
  return task_run_time_data_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Tasks

// string name = 41;
inline void Tasks::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tasks::name() const {
  // @@protoc_insertion_point(field_get:dra.Tasks.name)
  return _internal_name();
}
inline void Tasks::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dra.Tasks.name)
}
inline std::string* Tasks::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dra.Tasks.name)
  return _internal_mutable_name();
}
inline const std::string& Tasks::_internal_name() const {
  return name_.GetNoArena();
}
inline void Tasks::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tasks::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dra.Tasks.name)
}
inline void Tasks::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dra.Tasks.name)
}
inline void Tasks::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dra.Tasks.name)
}
inline std::string* Tasks::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tasks::release_name() {
  // @@protoc_insertion_point(field_release:dra.Tasks.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tasks::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dra.Tasks.name)
}

// .dra.TaskKind kind = 42;
inline void Tasks::clear_kind() {
  kind_ = 0;
}
inline ::dra::TaskKind Tasks::_internal_kind() const {
  return static_cast< ::dra::TaskKind >(kind_);
}
inline ::dra::TaskKind Tasks::kind() const {
  // @@protoc_insertion_point(field_get:dra.Tasks.kind)
  return _internal_kind();
}
inline void Tasks::_internal_set_kind(::dra::TaskKind value) {
  
  kind_ = value;
}
inline void Tasks::set_kind(::dra::TaskKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:dra.Tasks.kind)
}

// map<string, .dra.Task> task_map = 1;
inline int Tasks::_internal_task_map_size() const {
  return task_map_.size();
}
inline int Tasks::task_map_size() const {
  return _internal_task_map_size();
}
inline void Tasks::clear_task_map() {
  task_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >&
Tasks::_internal_task_map() const {
  return task_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >&
Tasks::task_map() const {
  // @@protoc_insertion_point(field_map:dra.Tasks.task_map)
  return _internal_task_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >*
Tasks::_internal_mutable_task_map() {
  return task_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >*
Tasks::mutable_task_map() {
  // @@protoc_insertion_point(field_mutable_map:dra.Tasks.task_map)
  return _internal_mutable_task_map();
}

// repeated .dra.Task task_array = 2;
inline int Tasks::_internal_task_array_size() const {
  return task_array_.size();
}
inline int Tasks::task_array_size() const {
  return _internal_task_array_size();
}
inline void Tasks::clear_task_array() {
  task_array_.Clear();
}
inline ::dra::Task* Tasks::mutable_task_array(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Tasks.task_array)
  return task_array_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Task >*
Tasks::mutable_task_array() {
  // @@protoc_insertion_point(field_mutable_list:dra.Tasks.task_array)
  return &task_array_;
}
inline const ::dra::Task& Tasks::_internal_task_array(int index) const {
  return task_array_.Get(index);
}
inline const ::dra::Task& Tasks::task_array(int index) const {
  // @@protoc_insertion_point(field_get:dra.Tasks.task_array)
  return _internal_task_array(index);
}
inline ::dra::Task* Tasks::_internal_add_task_array() {
  return task_array_.Add();
}
inline ::dra::Task* Tasks::add_task_array() {
  // @@protoc_insertion_point(field_add:dra.Tasks.task_array)
  return _internal_add_task_array();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Task >&
Tasks::task_array() const {
  // @@protoc_insertion_point(field_list:dra.Tasks.task_array)
  return task_array_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dra

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dra::taskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dra::taskStatus>() {
  return ::dra::taskStatus_descriptor();
}
template <> struct is_proto_enum< ::dra::TaskKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dra::TaskKind>() {
  return ::dra::TaskKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Task_2eproto
