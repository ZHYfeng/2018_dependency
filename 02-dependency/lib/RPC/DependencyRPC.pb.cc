// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DependencyRPC.proto

#include "DependencyRPC.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Call_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Call_AddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_FileOperationsEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_InputEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_NewInputEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Coverage_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coverage_CoverageEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileOperationsFunction_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Input_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_CallEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistic_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistics_StatEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Task_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tasks_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tasks_TaskEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UncoveredAddress_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_InputEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsefulInput_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WriteAddress_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_InputEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_runTimeData_DependencyRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DependencyRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_writeAddressAttributes_DependencyRPC_2eproto;
namespace dra {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class Call_AddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Call_AddressEntry_DoNotUse> _instance;
} _Call_AddressEntry_DoNotUse_default_instance_;
class CallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Call> _instance;
} _Call_default_instance_;
class InputsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inputs> _instance;
} _Inputs_default_instance_;
class DependencytaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dependencytask> _instance;
} _Dependencytask_default_instance_;
class runTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<runTimeData> _instance;
} _runTimeData_default_instance_;
class FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperationsFunction_WriteAddressEntry_DoNotUse> _instance;
} _FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_;
class FileOperationsFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperationsFunction> _instance;
} _FileOperationsFunction_default_instance_;
class FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperations_FileOperationsFunctionEntry_DoNotUse> _instance;
} _FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_;
class FileOperationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileOperations> _instance;
} _FileOperations_default_instance_;
class WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress_UncoveredAddressEntry_DoNotUse> _instance;
} _WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_;
class WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress_FileOperationsFunctionEntry_DoNotUse> _instance;
} _WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_;
class WriteAddress_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress_InputEntry_DoNotUse> _instance;
} _WriteAddress_InputEntry_DoNotUse_default_instance_;
class WriteAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddress> _instance;
} _WriteAddress_default_instance_;
class writeAddressAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<writeAddressAttributes> _instance;
} _writeAddressAttributes_default_instance_;
class UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_InputEntry_DoNotUse> _instance;
} _UncoveredAddress_InputEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress_WriteAddressEntry_DoNotUse> _instance;
} _UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_;
class UncoveredAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UncoveredAddress> _instance;
} _UncoveredAddress_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class UnstableInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnstableInput> _instance;
} _UnstableInput_default_instance_;
class Input_CallEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_CallEntry_DoNotUse> _instance;
} _Input_CallEntry_DoNotUse_default_instance_;
class Input_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_UncoveredAddressEntry_DoNotUse> _instance;
} _Input_UncoveredAddressEntry_DoNotUse_default_instance_;
class Input_WriteAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_WriteAddressEntry_DoNotUse> _instance;
} _Input_WriteAddressEntry_DoNotUse_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
class DependencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dependency> _instance;
} _Dependency_default_instance_;
class Corpus_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus_InputEntry_DoNotUse> _instance;
} _Corpus_InputEntry_DoNotUse_default_instance_;
class Corpus_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus_UncoveredAddressEntry_DoNotUse> _instance;
} _Corpus_UncoveredAddressEntry_DoNotUse_default_instance_;
class Corpus_CoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus_CoveredAddressEntry_DoNotUse> _instance;
} _Corpus_CoveredAddressEntry_DoNotUse_default_instance_;
class Corpus_WriteAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus_WriteAddressEntry_DoNotUse> _instance;
} _Corpus_WriteAddressEntry_DoNotUse_default_instance_;
class Corpus_FileOperationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus_FileOperationsEntry_DoNotUse> _instance;
} _Corpus_FileOperationsEntry_DoNotUse_default_instance_;
class Corpus_NewInputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus_NewInputEntry_DoNotUse> _instance;
} _Corpus_NewInputEntry_DoNotUse_default_instance_;
class CorpusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Corpus> _instance;
} _Corpus_default_instance_;
class UsefulInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsefulInput> _instance;
} _UsefulInput_default_instance_;
class StatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistic> _instance;
} _Statistic_default_instance_;
class Statistics_StatEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics_StatEntry_DoNotUse> _instance;
} _Statistics_StatEntry_DoNotUse_default_instance_;
class StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics> _instance;
} _Statistics_default_instance_;
class Task_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task_UncoveredAddressEntry_DoNotUse> _instance;
} _Task_UncoveredAddressEntry_DoNotUse_default_instance_;
class Task_CoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task_CoveredAddressEntry_DoNotUse> _instance;
} _Task_CoveredAddressEntry_DoNotUse_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class Tasks_TaskEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tasks_TaskEntry_DoNotUse> _instance;
} _Tasks_TaskEntry_DoNotUse_default_instance_;
class TasksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tasks> _instance;
} _Tasks_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Time> _instance;
} _Time_default_instance_;
class Coverage_CoverageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coverage_CoverageEntry_DoNotUse> _instance;
} _Coverage_CoverageEntry_DoNotUse_default_instance_;
class CoverageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coverage> _instance;
} _Coverage_default_instance_;
class ConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conditions> _instance;
} _Conditions_default_instance_;
class WriteAddressesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteAddresses> _instance;
} _WriteAddresses_default_instance_;
}  // namespace dra
static void InitDefaultsscc_info_Call_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Call_default_instance_;
    new (ptr) ::dra::Call();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Call::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Call_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Call_DependencyRPC_2eproto}, {
      &scc_info_Call_AddressEntry_DoNotUse_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Call_AddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Call_AddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Call_AddressEntry_DoNotUse();
  }
  ::dra::Call_AddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Call_AddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Call_AddressEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Condition_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Condition_default_instance_;
    new (ptr) ::dra::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Condition_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Conditions_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Conditions_default_instance_;
    new (ptr) ::dra::Conditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Conditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conditions_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Conditions_DependencyRPC_2eproto}, {
      &scc_info_Condition_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_default_instance_;
    new (ptr) ::dra::Corpus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Corpus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Corpus_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Corpus_DependencyRPC_2eproto}, {
      &scc_info_Corpus_InputEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Corpus_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Corpus_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Corpus_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Corpus_FileOperationsEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Tasks_DependencyRPC_2eproto.base,
      &scc_info_Corpus_NewInputEntry_DoNotUse_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_CoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Corpus_CoveredAddressEntry_DoNotUse();
  }
  ::dra::Corpus_CoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Corpus_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_UncoveredAddress_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_FileOperationsEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_FileOperationsEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Corpus_FileOperationsEntry_DoNotUse();
  }
  ::dra::Corpus_FileOperationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_FileOperationsEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Corpus_FileOperationsEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_FileOperations_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_InputEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Corpus_InputEntry_DoNotUse();
  }
  ::dra::Corpus_InputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_InputEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Corpus_InputEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_Input_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_NewInputEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_NewInputEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Corpus_NewInputEntry_DoNotUse();
  }
  ::dra::Corpus_NewInputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_NewInputEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Corpus_NewInputEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_Input_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Corpus_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::Corpus_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Corpus_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_UncoveredAddress_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Corpus_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Corpus_WriteAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Corpus_WriteAddressEntry_DoNotUse();
  }
  ::dra::Corpus_WriteAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Corpus_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Corpus_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_WriteAddress_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Coverage_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Coverage_default_instance_;
    new (ptr) ::dra::Coverage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Coverage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Coverage_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Coverage_DependencyRPC_2eproto}, {
      &scc_info_Coverage_CoverageEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Time_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Coverage_CoverageEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Coverage_CoverageEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Coverage_CoverageEntry_DoNotUse();
  }
  ::dra::Coverage_CoverageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coverage_CoverageEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coverage_CoverageEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Dependency_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Dependency_default_instance_;
    new (ptr) ::dra::Dependency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Dependency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Dependency_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Dependency_DependencyRPC_2eproto}, {
      &scc_info_Input_DependencyRPC_2eproto.base,
      &scc_info_UncoveredAddress_DependencyRPC_2eproto.base,
      &scc_info_WriteAddress_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Dependencytask_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Dependencytask_default_instance_;
    new (ptr) ::dra::Dependencytask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Dependencytask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dependencytask_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dependencytask_DependencyRPC_2eproto}, {
      &scc_info_Input_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Empty_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Empty_default_instance_;
    new (ptr) ::dra::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Empty_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_FileOperations_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperations_default_instance_;
    new (ptr) ::dra::FileOperations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::FileOperations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileOperations_DependencyRPC_2eproto}, {
      &scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse();
  }
  ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_FileOperationsFunction_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_FileOperationsFunction_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperationsFunction_default_instance_;
    new (ptr) ::dra::FileOperationsFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::FileOperationsFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileOperationsFunction_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FileOperationsFunction_DependencyRPC_2eproto}, {
      &scc_info_runTimeData_DependencyRPC_2eproto.base,
      &scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse();
  }
  ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Input_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Input_default_instance_;
    new (ptr) ::dra::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Input_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Input_DependencyRPC_2eproto}, {
      &scc_info_Input_CallEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Input_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Input_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Input_CallEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Input_CallEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Input_CallEntry_DoNotUse();
  }
  ::dra::Input_CallEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_CallEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Input_CallEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_Call_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Input_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Input_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Input_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::Input_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Input_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Input_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Input_WriteAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Input_WriteAddressEntry_DoNotUse();
  }
  ::dra::Input_WriteAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Input_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Inputs_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Inputs_default_instance_;
    new (ptr) ::dra::Inputs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Inputs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Inputs_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Inputs_DependencyRPC_2eproto}, {
      &scc_info_Input_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Path_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Path_default_instance_;
    new (ptr) ::dra::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Statistic_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Statistic_default_instance_;
    new (ptr) ::dra::Statistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Statistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistic_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Statistic_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_Statistics_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Statistics_default_instance_;
    new (ptr) ::dra::Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Statistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Statistics_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Statistics_DependencyRPC_2eproto}, {
      &scc_info_Coverage_DependencyRPC_2eproto.base,
      &scc_info_Statistics_StatEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_UsefulInput_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Statistics_StatEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Statistics_StatEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Statistics_StatEntry_DoNotUse();
  }
  ::dra::Statistics_StatEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistics_StatEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Statistics_StatEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_Statistic_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Task_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Task_default_instance_;
    new (ptr) ::dra::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Task_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Task_DependencyRPC_2eproto}, {
      &scc_info_Task_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Task_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Task_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Task_CoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Task_CoveredAddressEntry_DoNotUse();
  }
  ::dra::Task_CoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Task_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_runTimeData_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Task_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Task_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Task_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::Task_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Task_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_runTimeData_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Tasks_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Tasks_default_instance_;
    new (ptr) ::dra::Tasks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Tasks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tasks_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Tasks_DependencyRPC_2eproto}, {
      &scc_info_Tasks_TaskEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_Task_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Tasks_TaskEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Tasks_TaskEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Tasks_TaskEntry_DoNotUse();
  }
  ::dra::Tasks_TaskEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tasks_TaskEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tasks_TaskEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_Task_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_Time_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Time_default_instance_;
    new (ptr) ::dra::Time();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Time::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Time_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_UncoveredAddress_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_default_instance_;
    new (ptr) ::dra::UncoveredAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::UncoveredAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UncoveredAddress_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UncoveredAddress_DependencyRPC_2eproto}, {
      &scc_info_UncoveredAddress_InputEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_runTimeData_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_UncoveredAddress_InputEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_InputEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_InputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UncoveredAddress_InputEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UncoveredAddress_InputEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse();
  }
  ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_writeAddressAttributes_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_UnstableInput_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UnstableInput_default_instance_;
    new (ptr) ::dra::UnstableInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::UnstableInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnstableInput_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnstableInput_DependencyRPC_2eproto}, {
      &scc_info_Path_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_UsefulInput_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_UsefulInput_default_instance_;
    new (ptr) ::dra::UsefulInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::UsefulInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsefulInput_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsefulInput_DependencyRPC_2eproto}, {
      &scc_info_Input_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_WriteAddress_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_default_instance_;
    new (ptr) ::dra::WriteAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::WriteAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WriteAddress_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WriteAddress_DependencyRPC_2eproto}, {
      &scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_WriteAddress_InputEntry_DoNotUse_DependencyRPC_2eproto.base,
      &scc_info_runTimeData_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse();
  }
  ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_WriteAddress_InputEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::WriteAddress_InputEntry_DoNotUse();
  }
  ::dra::WriteAddress_InputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteAddress_InputEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteAddress_InputEntry_DoNotUse_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto}, {
      &scc_info_writeAddressAttributes_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_WriteAddresses_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_WriteAddresses_default_instance_;
    new (ptr) ::dra::WriteAddresses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::WriteAddresses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WriteAddresses_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WriteAddresses_DependencyRPC_2eproto}, {
      &scc_info_Condition_DependencyRPC_2eproto.base,
      &scc_info_WriteAddress_DependencyRPC_2eproto.base,}};

static void InitDefaultsscc_info_runTimeData_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_runTimeData_default_instance_;
    new (ptr) ::dra::runTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::runTimeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_runTimeData_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_runTimeData_DependencyRPC_2eproto}, {}};

static void InitDefaultsscc_info_writeAddressAttributes_DependencyRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_writeAddressAttributes_default_instance_;
    new (ptr) ::dra::writeAddressAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::writeAddressAttributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_writeAddressAttributes_DependencyRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_writeAddressAttributes_DependencyRPC_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DependencyRPC_2eproto[47];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DependencyRPC_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DependencyRPC_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DependencyRPC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Empty, address_),
  PROTOBUF_FIELD_OFFSET(::dra::Empty, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Condition, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, successor_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Condition, syzkaller_right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Call_AddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Call_AddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Call_AddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Call_AddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Call, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Call, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Inputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Inputs, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Dependencytask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Dependencytask, input_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependencytask, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, program_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, task_status_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, rcursive_count_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, priority_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkcondition_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkaddress_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, address_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkrightbranchaddress_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, file_operations_name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, cmd_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, run_time_date_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperationsFunction, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, name_),
  PROTOBUF_FIELD_OFFSET(::dra::FileOperations, file_operations_function_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress_InputEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, file_operations_function_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, input_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddress, run_time_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, repeat_),
  PROTOBUF_FIELD_OFFSET(::dra::writeAddressAttributes, prio_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_InputEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, bbcount_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, input_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::UncoveredAddress, run_time_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Path, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UnstableInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UnstableInput, new_path_),
  PROTOBUF_FIELD_OFFSET(::dra::UnstableInput, unstable_path_),
  PROTOBUF_FIELD_OFFSET(::dra::UnstableInput, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::UnstableInput, sig_),
  PROTOBUF_FIELD_OFFSET(::dra::UnstableInput, program_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_CallEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_CallEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Input_CallEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_CallEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Input_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Input_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Input_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Input_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Input_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Input, sig_),
  PROTOBUF_FIELD_OFFSET(::dra::Input, program_),
  PROTOBUF_FIELD_OFFSET(::dra::Input, call_),
  PROTOBUF_FIELD_OFFSET(::dra::Input, stat_),
  PROTOBUF_FIELD_OFFSET(::dra::Input, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Input, write_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, input_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Dependency, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_InputEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_CoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_CoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_CoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_CoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_WriteAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_WriteAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_WriteAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_WriteAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_FileOperationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_FileOperationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_FileOperationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_FileOperationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_NewInputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_NewInputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_NewInputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus_NewInputEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, input_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, covered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, file_operations_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, tasks_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, high_task_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, boot_task_),
  PROTOBUF_FIELD_OFFSET(::dra::Corpus, new_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, input_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, time_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, num_),
  PROTOBUF_FIELD_OFFSET(::dra::UsefulInput, new_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, name_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, executenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, time_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, newtestcasenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistic, newaddressnum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics_StatEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, signalnum_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, basic_block_number_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, coverage_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, stat_),
  PROTOBUF_FIELD_OFFSET(::dra::Statistics, useful_input_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Task, sig_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, index_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, program_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_sig_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_index_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_program_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, priority_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, hash_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, covered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, task_status_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, check_write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, check_write_address_final_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, check_write_address_remove_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, final_idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, final_write_idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, remove_idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, remove_write_idx_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, name_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, task_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Time, time_),
  PROTOBUF_FIELD_OFFSET(::dra::Time, num_),
  PROTOBUF_FIELD_OFFSET(::dra::Time, executenum_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage_CoverageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, coverage_),
  PROTOBUF_FIELD_OFFSET(::dra::Coverage, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Conditions, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, condition_),
  PROTOBUF_FIELD_OFFSET(::dra::WriteAddresses, write_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dra::Empty)},
  { 7, -1, sizeof(::dra::Condition)},
  { 20, 27, sizeof(::dra::Call_AddressEntry_DoNotUse)},
  { 29, -1, sizeof(::dra::Call)},
  { 36, -1, sizeof(::dra::Inputs)},
  { 42, -1, sizeof(::dra::Dependencytask)},
  { 49, -1, sizeof(::dra::runTimeData)},
  { 65, 72, sizeof(::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse)},
  { 74, -1, sizeof(::dra::FileOperationsFunction)},
  { 85, 92, sizeof(::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse)},
  { 94, -1, sizeof(::dra::FileOperations)},
  { 101, 108, sizeof(::dra::WriteAddress_UncoveredAddressEntry_DoNotUse)},
  { 110, 117, sizeof(::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse)},
  { 119, 126, sizeof(::dra::WriteAddress_InputEntry_DoNotUse)},
  { 128, -1, sizeof(::dra::WriteAddress)},
  { 140, -1, sizeof(::dra::writeAddressAttributes)},
  { 148, 155, sizeof(::dra::UncoveredAddress_InputEntry_DoNotUse)},
  { 157, 164, sizeof(::dra::UncoveredAddress_WriteAddressEntry_DoNotUse)},
  { 166, -1, sizeof(::dra::UncoveredAddress)},
  { 179, -1, sizeof(::dra::Path)},
  { 185, -1, sizeof(::dra::UnstableInput)},
  { 195, 202, sizeof(::dra::Input_CallEntry_DoNotUse)},
  { 204, 211, sizeof(::dra::Input_UncoveredAddressEntry_DoNotUse)},
  { 213, 220, sizeof(::dra::Input_WriteAddressEntry_DoNotUse)},
  { 222, -1, sizeof(::dra::Input)},
  { 233, -1, sizeof(::dra::Dependency)},
  { 241, 248, sizeof(::dra::Corpus_InputEntry_DoNotUse)},
  { 250, 257, sizeof(::dra::Corpus_UncoveredAddressEntry_DoNotUse)},
  { 259, 266, sizeof(::dra::Corpus_CoveredAddressEntry_DoNotUse)},
  { 268, 275, sizeof(::dra::Corpus_WriteAddressEntry_DoNotUse)},
  { 277, 284, sizeof(::dra::Corpus_FileOperationsEntry_DoNotUse)},
  { 286, 293, sizeof(::dra::Corpus_NewInputEntry_DoNotUse)},
  { 295, -1, sizeof(::dra::Corpus)},
  { 309, -1, sizeof(::dra::UsefulInput)},
  { 318, -1, sizeof(::dra::Statistic)},
  { 328, 335, sizeof(::dra::Statistics_StatEntry_DoNotUse)},
  { 337, -1, sizeof(::dra::Statistics)},
  { 347, 354, sizeof(::dra::Task_UncoveredAddressEntry_DoNotUse)},
  { 356, 363, sizeof(::dra::Task_CoveredAddressEntry_DoNotUse)},
  { 365, -1, sizeof(::dra::Task)},
  { 389, 396, sizeof(::dra::Tasks_TaskEntry_DoNotUse)},
  { 398, -1, sizeof(::dra::Tasks)},
  { 407, -1, sizeof(::dra::Time)},
  { 415, 422, sizeof(::dra::Coverage_CoverageEntry_DoNotUse)},
  { 424, -1, sizeof(::dra::Coverage)},
  { 431, -1, sizeof(::dra::Conditions)},
  { 437, -1, sizeof(::dra::WriteAddresses)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Call_AddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Call_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Inputs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Dependencytask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_runTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperationsFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_FileOperations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_writeAddressAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UncoveredAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UnstableInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Input_CallEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Input_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Input_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_CoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_WriteAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_FileOperationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_NewInputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Corpus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_UsefulInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistics_StatEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Task_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Task_CoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Tasks_TaskEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Tasks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Coverage_CoverageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Coverage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Conditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_WriteAddresses_default_instance_),
};

const char descriptor_table_protodef_DependencyRPC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023DependencyRPC.proto\022\003dra\"&\n\005Empty\022\017\n\007a"
  "ddress\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"\361\001\n\tCondition"
  "\022\031\n\021condition_address\030\001 \001(\004\022#\n\033syzkaller"
  "_condition_address\030\002 \001(\r\022\031\n\021uncovered_ad"
  "dress\030\003 \001(\004\022#\n\033syzkaller_uncovered_addre"
  "ss\030\004 \001(\r\022\013\n\003idx\030\005 \001(\r\022\021\n\tsuccessor\030\006 \001(\004"
  "\022\034\n\024right_branch_address\030\007 \003(\004\022&\n\036syzkal"
  "ler_right_branch_address\030\010 \003(\r\"l\n\004Call\022\013"
  "\n\003idx\030\001 \001(\r\022\'\n\007address\030\002 \003(\0132\026.dra.Call."
  "AddressEntry\032.\n\014AddressEntry\022\013\n\003key\030\001 \001("
  "\r\022\r\n\005value\030\002 \001(\r:\0028\001\"#\n\006Inputs\022\031\n\005input\030"
  "\001 \003(\0132\n.dra.Input\"9\n\016Dependencytask\022\031\n\005i"
  "nput\030\001 \001(\0132\n.dra.Input\022\014\n\004name\030) \001(\t\"\224\002\n"
  "\013runTimeData\022\017\n\007program\030\002 \001(\014\022$\n\013task_st"
  "atus\030\003 \001(\0162\017.dra.taskStatus\022\026\n\016rcursive_"
  "count\030\004 \001(\r\022\020\n\010priority\030\005 \001(\r\022\013\n\003idx\030\n \001"
  "(\r\022\026\n\016checkCondition\030\013 \001(\010\022\031\n\021condition_"
  "address\030\014 \001(\r\022\024\n\014checkAddress\030\r \001(\010\022\017\n\007a"
  "ddress\030\016 \001(\r\022\037\n\027checkRightBranchAddress\030"
  "\017 \001(\010\022\034\n\024right_branch_address\030\020 \003(\r\"\236\002\n\026"
  "FileOperationsFunction\022\014\n\004name\030\001 \001(\t\022\034\n\024"
  "file_operations_name\030\002 \001(\t\022\'\n\004kind\030\003 \001(\016"
  "2\031.dra.file_operations_kind\022\013\n\003cmd\030\004 \001(\004"
  "\022\'\n\rrun_time_date\030\005 \001(\0132\020.dra.runTimeDat"
  "a\022D\n\rwrite_address\030\013 \003(\0132-.dra.FileOpera"
  "tionsFunction.WriteAddressEntry\0323\n\021Write"
  "AddressEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r"
  ":\0028\001\"\315\001\n\016FileOperations\022\014\n\004name\030\001 \001(\t\022Q\n"
  "\030file_operations_function\030\003 \003(\0132/.dra.Fi"
  "leOperations.FileOperationsFunctionEntry"
  "\032Z\n\033FileOperationsFunctionEntry\022\013\n\003key\030\001"
  " \001(\003\022*\n\005value\030\002 \001(\0132\033.dra.FileOperations"
  "Function:\0028\001\"\374\003\n\014WriteAddress\022\025\n\rwrite_a"
  "ddress\030\002 \001(\r\022\031\n\021condition_address\030\003 \001(\r\022"
  "\014\n\004kind\030\004 \001(\r\022B\n\021uncovered_address\030\027 \003(\013"
  "2\'.dra.WriteAddress.UncoveredAddressEntr"
  "y\022O\n\030file_operations_function\030\030 \003(\0132-.dr"
  "a.WriteAddress.FileOperationsFunctionEnt"
  "ry\022+\n\005input\030\031 \003(\0132\034.dra.WriteAddress.Inp"
  "utEntry\022\'\n\rrun_time_date\030\013 \001(\0132\020.dra.run"
  "TimeData\032T\n\025UncoveredAddressEntry\022\013\n\003key"
  "\030\001 \001(\r\022*\n\005value\030\002 \001(\0132\033.dra.writeAddress"
  "Attributes:\0028\001\032=\n\033FileOperationsFunction"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\032,\n"
  "\nInputEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:"
  "\0028\001\"M\n\026writeAddressAttributes\022\025\n\rwrite_a"
  "ddress\030\002 \001(\r\022\016\n\006repeat\030\007 \001(\r\022\014\n\004prio\030\006 \001"
  "(\r\"\272\003\n\020UncoveredAddress\022\031\n\021condition_add"
  "ress\030\001 \001(\r\022\031\n\021uncovered_address\030\002 \001(\r\022\034\n"
  "\024right_branch_address\030\003 \003(\r\022\017\n\007bbcount\030\004"
  " \001(\r\022\'\n\004kind\030\005 \001(\0162\031.dra.UncoveredAddres"
  "sKind\022/\n\005input\030\026 \003(\0132 .dra.UncoveredAddr"
  "ess.InputEntry\022>\n\rwrite_address\030\027 \003(\0132\'."
  "dra.UncoveredAddress.WriteAddressEntry\022\'"
  "\n\rrun_time_date\030\010 \001(\0132\020.dra.runTimeData\032"
  ",\n\nInputEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\r:\0028\001\032P\n\021WriteAddressEntry\022\013\n\003key\030\001 \001(\r\022"
  "*\n\005value\030\002 \001(\0132\033.dra.writeAddressAttribu"
  "tes:\0028\001\"\027\n\004Path\022\017\n\007address\030\001 \003(\r\"y\n\rUnst"
  "ableInput\022\033\n\010new_path\030\001 \001(\0132\t.dra.Path\022 "
  "\n\runstable_path\030\002 \001(\0132\t.dra.Path\022\013\n\003idx\030"
  "\003 \001(\005\022\013\n\003sig\030\013 \001(\t\022\017\n\007program\030\014 \001(\014\"\201\003\n\005"
  "Input\022\013\n\003sig\030\013 \001(\t\022\017\n\007program\030\014 \001(\014\022\"\n\004c"
  "all\030\r \003(\0132\024.dra.Input.CallEntry\022\036\n\004stat\030"
  "\025 \001(\0162\020.dra.FuzzingStat\022;\n\021uncovered_add"
  "ress\030\026 \003(\0132 .dra.Input.UncoveredAddressE"
  "ntry\0223\n\rwrite_address\030\031 \003(\0132\034.dra.Input."
  "WriteAddressEntry\0326\n\tCallEntry\022\013\n\003key\030\001 "
  "\001(\r\022\030\n\005value\030\002 \001(\0132\t.dra.Call:\0028\001\0327\n\025Unc"
  "overedAddressEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value"
  "\030\002 \001(\r:\0028\001\0323\n\021WriteAddressEntry\022\013\n\003key\030\001"
  " \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\203\001\n\nDependency\022\031"
  "\n\005input\030\001 \001(\0132\n.dra.Input\0220\n\021uncovered_a"
  "ddress\030\002 \001(\0132\025.dra.UncoveredAddress\022(\n\rw"
  "rite_address\030\003 \003(\0132\021.dra.WriteAddress\"\307\006"
  "\n\006Corpus\022%\n\005input\030\001 \003(\0132\026.dra.Corpus.Inp"
  "utEntry\022<\n\021uncovered_address\030\004 \003(\0132!.dra"
  ".Corpus.UncoveredAddressEntry\0228\n\017covered"
  "_address\030\002 \003(\0132\037.dra.Corpus.CoveredAddre"
  "ssEntry\0224\n\rwrite_address\030\005 \003(\0132\035.dra.Cor"
  "pus.WriteAddressEntry\0228\n\017file_operations"
  "\030\006 \003(\0132\037.dra.Corpus.FileOperationsEntry\022"
  "\031\n\005tasks\030\007 \001(\0132\n.dra.Tasks\022\035\n\thigh_task\030"
  "\010 \001(\0132\n.dra.Tasks\022\035\n\tboot_task\030\t \001(\0132\n.d"
  "ra.Tasks\022,\n\tnew_input\030\013 \003(\0132\031.dra.Corpus"
  ".NewInputEntry\0328\n\nInputEntry\022\013\n\003key\030\001 \001("
  "\t\022\031\n\005value\030\002 \001(\0132\n.dra.Input:\0028\001\032N\n\025Unco"
  "veredAddressEntry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030"
  "\002 \001(\0132\025.dra.UncoveredAddress:\0028\001\032L\n\023Cove"
  "redAddressEntry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030\002 "
  "\001(\0132\025.dra.UncoveredAddress:\0028\001\032F\n\021WriteA"
  "ddressEntry\022\013\n\003key\030\001 \001(\r\022 \n\005value\030\002 \001(\0132"
  "\021.dra.WriteAddress:\0028\001\032J\n\023FileOperations"
  "Entry\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.dra."
  "FileOperations:\0028\001\032;\n\rNewInputEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.dra.Input:\0028\001\""
  "X\n\013UsefulInput\022\031\n\005input\030\001 \001(\0132\n.dra.Inpu"
  "t\022\014\n\004time\030\002 \001(\001\022\013\n\003num\030\003 \001(\004\022\023\n\013new_addr"
  "ess\030\004 \003(\r\"|\n\tStatistic\022\036\n\004name\030\001 \001(\0162\020.d"
  "ra.FuzzingStat\022\022\n\nexecuteNum\030\013 \001(\004\022\014\n\004ti"
  "me\030\014 \001(\001\022\026\n\016newTestCaseNum\030\r \001(\004\022\025\n\rnewA"
  "ddressNum\030\016 \001(\004\"\352\001\n\nStatistics\022\021\n\tsignal"
  "Num\030\001 \001(\004\022\032\n\022basic_block_number\030\n \001(\r\022\037\n"
  "\010coverage\030\010 \001(\0132\r.dra.Coverage\022\'\n\004stat\030\013"
  " \003(\0132\031.dra.Statistics.StatEntry\022&\n\014usefu"
  "l_input\030\014 \003(\0132\020.dra.UsefulInput\032;\n\tStatE"
  "ntry\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030\002 \001(\0132\016.dra.S"
  "tatistic:\0028\001\"\225\005\n\004Task\022\013\n\003sig\030\001 \001(\t\022\r\n\005in"
  "dex\030\002 \001(\r\022\017\n\007program\030\003 \001(\014\022\021\n\twrite_sig\030"
  "\013 \001(\t\022\023\n\013write_index\030\014 \001(\r\022\025\n\rwrite_prog"
  "ram\030\r \001(\014\022\025\n\rwrite_address\030\016 \001(\r\022\020\n\010prio"
  "rity\030\017 \001(\005\022\014\n\004hash\030\020 \001(\t\022:\n\021uncovered_ad"
  "dress\030\025 \003(\0132\037.dra.Task.UncoveredAddressE"
  "ntry\0226\n\017covered_address\030\027 \003(\0132\035.dra.Task"
  ".CoveredAddressEntry\022$\n\013task_status\030\030 \001("
  "\0162\017.dra.taskStatus\022\033\n\023check_write_addres"
  "s\030\031 \001(\010\022!\n\031check_write_address_final\030\032 \001"
  "(\010\022\"\n\032check_write_address_remove\030\033 \001(\010\022\021"
  "\n\tfinal_idx\030\034 \001(\r\022\027\n\017final_write_idx\030\035 \001"
  "(\r\022\022\n\nremove_idx\030\036 \001(\r\022\030\n\020remove_write_i"
  "dx\030\037 \001(\r\032I\n\025UncoveredAddressEntry\022\013\n\003key"
  "\030\001 \001(\r\022\037\n\005value\030\002 \001(\0132\020.dra.runTimeData:"
  "\0028\001\032G\n\023CoveredAddressEntry\022\013\n\003key\030\001 \001(\r\022"
  "\037\n\005value\030\002 \001(\0132\020.dra.runTimeData:\0028\001\"\250\001\n"
  "\005Tasks\022\014\n\004name\030) \001(\t\022\033\n\004kind\030* \001(\0162\r.dra"
  ".TaskKind\022\"\n\004task\030\001 \003(\0132\024.dra.Tasks.Task"
  "Entry\022\030\n\005tasks\030\002 \003(\0132\t.dra.Task\0326\n\tTaskE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.dra.T"
  "ask:\0028\001\"5\n\004Time\022\014\n\004time\030\001 \001(\001\022\013\n\003num\030\002 \001"
  "(\003\022\022\n\nexecuteNum\030\003 \001(\003\"\203\001\n\010Coverage\022-\n\010c"
  "overage\030\001 \003(\0132\033.dra.Coverage.CoverageEnt"
  "ry\022\027\n\004time\030\002 \003(\0132\t.dra.Time\032/\n\rCoverageE"
  "ntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"/\n\n"
  "Conditions\022!\n\tcondition\030\n \003(\0132\016.dra.Cond"
  "ition\"]\n\016WriteAddresses\022!\n\tcondition\030\001 \001"
  "(\0132\016.dra.Condition\022(\n\rwrite_address\030\004 \003("
  "\0132\021.dra.WriteAddress*f\n\ntaskStatus\022\014\n\010un"
  "tested\020\000\022\r\n\trecursive\020\001\022\n\n\006tested\020\002\022\007\n\003o"
  "ut\020\003\022\013\n\007covered\020\004\022\013\n\007testing\020\005\022\014\n\010unstab"
  "le\020\006*\215\001\n\024file_operations_kind\022\013\n\007default"
  "\020\000\022\010\n\004init\020\001\022\n\n\006llseek\020\002\022\010\n\004read\020\003\022\t\n\005wr"
  "ite\020\004\022\010\n\004poll\020\t\022\022\n\016unlocked_ioctl\020\n\022\010\n\004m"
  "map\020\014\022\010\n\004open\020\016\022\013\n\007release\020\020*W\n\024Uncovere"
  "dAddressKind\022\013\n\007Outside\020\000\022\020\n\014InputRelate"
  "d\020\001\022\025\n\021DependnecyRelated\020\002\022\t\n\005Other\020\003*\312\001"
  "\n\013FuzzingStat\022\017\n\013StatDefault\020\000\022\020\n\014StatGe"
  "nerate\020\001\022\014\n\010StatFuzz\020\002\022\021\n\rStatCandidate\020"
  "\003\022\016\n\nStatTriage\020\004\022\020\n\014StatMinimize\020\005\022\r\n\tS"
  "tatSmash\020\006\022\014\n\010StatHint\020\007\022\014\n\010StatSeed\020\010\022\022"
  "\n\016StatDependency\020\t\022\026\n\022StatDependencyBoot"
  "\020\n**\n\010TaskKind\022\n\n\006Normal\020\000\022\010\n\004High\020\001\022\010\n\004"
  "Boot\020\0022\365\005\n\rDependencyRPC\022(\n\014GetVMOffsets"
  "\022\n.dra.Empty\032\n.dra.Empty\"\000\0220\n\024SendBasicB"
  "lockNumber\022\n.dra.Empty\032\n.dra.Empty\"\000\022(\n\013"
  "GetNewInput\022\n.dra.Empty\032\013.dra.Inputs\"\000\022/"
  "\n\016SendDependency\022\017.dra.Dependency\032\n.dra."
  "Empty\"\000\022-\n\014GetCondition\022\n.dra.Empty\032\017.dr"
  "a.Conditions\"\000\0225\n\020SendWriteAddress\022\023.dra"
  ".WriteAddresses\032\n.dra.Empty\"\000\022#\n\007Connect"
  "\022\n.dra.Empty\032\n.dra.Empty\"\000\022(\n\014SendNewInp"
  "ut\022\n.dra.Input\032\n.dra.Empty\"\000\022$\n\010GetTasks"
  "\022\n.dra.Empty\032\n.dra.Tasks\"\000\022(\n\014GetBootTas"
  "ks\022\n.dra.Empty\032\n.dra.Tasks\"\000\022\'\n\013ReturnTa"
  "sks\022\n.dra.Tasks\032\n.dra.Empty\"\000\022)\n\rSendBoo"
  "tInput\022\n.dra.Input\032\n.dra.Empty\"\000\0225\n\021Send"
  "UnstableInput\022\022.dra.UnstableInput\032\n.dra."
  "Empty\"\000\022#\n\007SendLog\022\n.dra.Empty\032\n.dra.Emp"
  "ty\"\000\022(\n\010sendStat\022\016.dra.Statistic\032\n.dra.E"
  "mpty\"\000\022#\n\007GetNeed\022\n.dra.Empty\032\n.dra.Empt"
  "y\"\000\022)\n\rSendNeedInput\022\n.dra.Input\032\n.dra.E"
  "mpty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DependencyRPC_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DependencyRPC_2eproto_sccs[47] = {
  &scc_info_Call_DependencyRPC_2eproto.base,
  &scc_info_Call_AddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Condition_DependencyRPC_2eproto.base,
  &scc_info_Conditions_DependencyRPC_2eproto.base,
  &scc_info_Corpus_DependencyRPC_2eproto.base,
  &scc_info_Corpus_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Corpus_FileOperationsEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Corpus_InputEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Corpus_NewInputEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Corpus_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Corpus_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Coverage_DependencyRPC_2eproto.base,
  &scc_info_Coverage_CoverageEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Dependency_DependencyRPC_2eproto.base,
  &scc_info_Dependencytask_DependencyRPC_2eproto.base,
  &scc_info_Empty_DependencyRPC_2eproto.base,
  &scc_info_FileOperations_DependencyRPC_2eproto.base,
  &scc_info_FileOperations_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_FileOperationsFunction_DependencyRPC_2eproto.base,
  &scc_info_FileOperationsFunction_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Input_DependencyRPC_2eproto.base,
  &scc_info_Input_CallEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Input_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Input_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Inputs_DependencyRPC_2eproto.base,
  &scc_info_Path_DependencyRPC_2eproto.base,
  &scc_info_Statistic_DependencyRPC_2eproto.base,
  &scc_info_Statistics_DependencyRPC_2eproto.base,
  &scc_info_Statistics_StatEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Task_DependencyRPC_2eproto.base,
  &scc_info_Task_CoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Task_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Tasks_DependencyRPC_2eproto.base,
  &scc_info_Tasks_TaskEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_Time_DependencyRPC_2eproto.base,
  &scc_info_UncoveredAddress_DependencyRPC_2eproto.base,
  &scc_info_UncoveredAddress_InputEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_UncoveredAddress_WriteAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_UnstableInput_DependencyRPC_2eproto.base,
  &scc_info_UsefulInput_DependencyRPC_2eproto.base,
  &scc_info_WriteAddress_DependencyRPC_2eproto.base,
  &scc_info_WriteAddress_FileOperationsFunctionEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_WriteAddress_InputEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_WriteAddress_UncoveredAddressEntry_DoNotUse_DependencyRPC_2eproto.base,
  &scc_info_WriteAddresses_DependencyRPC_2eproto.base,
  &scc_info_runTimeData_DependencyRPC_2eproto.base,
  &scc_info_writeAddressAttributes_DependencyRPC_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DependencyRPC_2eproto_once;
static bool descriptor_table_DependencyRPC_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DependencyRPC_2eproto = {
  &descriptor_table_DependencyRPC_2eproto_initialized, descriptor_table_protodef_DependencyRPC_2eproto, "DependencyRPC.proto", 6814,
  &descriptor_table_DependencyRPC_2eproto_once, descriptor_table_DependencyRPC_2eproto_sccs, descriptor_table_DependencyRPC_2eproto_deps, 47, 0,
  schemas, file_default_instances, TableStruct_DependencyRPC_2eproto::offsets,
  file_level_metadata_DependencyRPC_2eproto, 47, file_level_enum_descriptors_DependencyRPC_2eproto, file_level_service_descriptors_DependencyRPC_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DependencyRPC_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DependencyRPC_2eproto), true);
namespace dra {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* taskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DependencyRPC_2eproto);
  return file_level_enum_descriptors_DependencyRPC_2eproto[0];
}
bool taskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_operations_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DependencyRPC_2eproto);
  return file_level_enum_descriptors_DependencyRPC_2eproto[1];
}
bool file_operations_kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 10:
    case 12:
    case 14:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UncoveredAddressKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DependencyRPC_2eproto);
  return file_level_enum_descriptors_DependencyRPC_2eproto[2];
}
bool UncoveredAddressKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FuzzingStat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DependencyRPC_2eproto);
  return file_level_enum_descriptors_DependencyRPC_2eproto[3];
}
bool FuzzingStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DependencyRPC_2eproto);
  return file_level_enum_descriptors_DependencyRPC_2eproto[4];
}
bool TaskKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::_Internal {
 public:
};

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:dra.Empty)
}

void Empty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Empty_DependencyRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_ = 0u;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:dra.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_ = 0u;
  _internal_metadata_.Clear();
}

const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Empty.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Empty.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
}
class Condition::_Internal {
 public:
};

Condition::Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      right_branch_address_(from.right_branch_address_),
      syzkaller_right_branch_address_(from.syzkaller_right_branch_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&condition_address_, &from.condition_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:dra.Condition)
}

void Condition::SharedCtor() {
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:dra.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  syzkaller_right_branch_address_.Clear();
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(idx_));
  _internal_metadata_.Clear();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 condition_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 syzkaller_condition_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          syzkaller_condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uncovered_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 syzkaller_uncovered_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          syzkaller_uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 successor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          successor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 right_branch_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 syzkaller_right_branch_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_syzkaller_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 condition_address = 1;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_condition_address(), target);
  }

  // uint32 syzkaller_condition_address = 2;
  if (this->syzkaller_condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_syzkaller_condition_address(), target);
  }

  // uint64 uncovered_address = 3;
  if (this->uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uncovered_address(), target);
  }

  // uint32 syzkaller_uncovered_address = 4;
  if (this->syzkaller_uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_syzkaller_uncovered_address(), target);
  }

  // uint32 idx = 5;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_idx(), target);
  }

  // uint64 successor = 6;
  if (this->successor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_successor(), target);
  }

  // repeated uint64 right_branch_address = 7;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_right_branch_address(), byte_size, target);
    }
  }

  // repeated uint32 syzkaller_right_branch_address = 8;
  {
    int byte_size = _syzkaller_right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_syzkaller_right_branch_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 right_branch_address = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 syzkaller_right_branch_address = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->syzkaller_right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _syzkaller_right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 condition_address = 1;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_condition_address());
  }

  // uint64 uncovered_address = 3;
  if (this->uncovered_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uncovered_address());
  }

  // uint32 syzkaller_condition_address = 2;
  if (this->syzkaller_condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_syzkaller_condition_address());
  }

  // uint32 syzkaller_uncovered_address = 4;
  if (this->syzkaller_uncovered_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_syzkaller_uncovered_address());
  }

  // uint64 successor = 6;
  if (this->successor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_successor());
  }

  // uint32 idx = 5;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  syzkaller_right_branch_address_.MergeFrom(from.syzkaller_right_branch_address_);
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.uncovered_address() != 0) {
    _internal_set_uncovered_address(from._internal_uncovered_address());
  }
  if (from.syzkaller_condition_address() != 0) {
    _internal_set_syzkaller_condition_address(from._internal_syzkaller_condition_address());
  }
  if (from.syzkaller_uncovered_address() != 0) {
    _internal_set_syzkaller_uncovered_address(from._internal_syzkaller_uncovered_address());
  }
  if (from.successor() != 0) {
    _internal_set_successor(from._internal_successor());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  syzkaller_right_branch_address_.InternalSwap(&other->syzkaller_right_branch_address_);
  swap(condition_address_, other->condition_address_);
  swap(uncovered_address_, other->uncovered_address_);
  swap(syzkaller_condition_address_, other->syzkaller_condition_address_);
  swap(syzkaller_uncovered_address_, other->syzkaller_uncovered_address_);
  swap(successor_, other->successor_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Call_AddressEntry_DoNotUse::Call_AddressEntry_DoNotUse() {}
Call_AddressEntry_DoNotUse::Call_AddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Call_AddressEntry_DoNotUse::MergeFrom(const Call_AddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Call_AddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Call_AddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Call::InitAsDefaultInstance() {
}
class Call::_Internal {
 public:
};

Call::Call()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Call)
}
Call::Call(const Call& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.MergeFrom(from.address_);
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:dra.Call)
}

void Call::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Call_DependencyRPC_2eproto.base);
  idx_ = 0u;
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:dra.Call)
  SharedDtor();
}

void Call::SharedDtor() {
}

void Call::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Call& Call::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Call_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Call::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  idx_ = 0u;
  _internal_metadata_.Clear();
}

const char* Call::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Call::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // map<uint32, uint32> address = 2;
  if (!this->_internal_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_address().begin();
          it != this->_internal_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Call_AddressEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_address().begin();
          it != this->_internal_address().end(); ++it) {
        target = Call_AddressEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Call)
  return target;
}

size_t Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Call)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_address().begin();
      it != this->_internal_address().end(); ++it) {
    total_size += Call_AddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Call::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Call)
  GOOGLE_DCHECK_NE(&from, this);
  const Call* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Call>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Call)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Call)
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void Call::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  return true;
}

void Call::InternalSwap(Call* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Call::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inputs::InitAsDefaultInstance() {
}
class Inputs::_Internal {
 public:
};

Inputs::Inputs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Inputs)
}
Inputs::Inputs(const Inputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_(from.input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dra.Inputs)
}

void Inputs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Inputs_DependencyRPC_2eproto.base);
}

Inputs::~Inputs() {
  // @@protoc_insertion_point(destructor:dra.Inputs)
  SharedDtor();
}

void Inputs::SharedDtor() {
}

void Inputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inputs& Inputs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inputs_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Inputs::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Inputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  _internal_metadata_.Clear();
}

const char* Inputs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inputs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Inputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dra.Input input = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_input(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Inputs)
  return target;
}

size_t Inputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Inputs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.Input input = 1;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inputs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Inputs)
  GOOGLE_DCHECK_NE(&from, this);
  const Inputs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Inputs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Inputs)
    MergeFrom(*source);
  }
}

void Inputs::MergeFrom(const Inputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Inputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
}

void Inputs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Inputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inputs::CopyFrom(const Inputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Inputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inputs::IsInitialized() const {
  return true;
}

void Inputs::InternalSwap(Inputs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inputs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dependencytask::InitAsDefaultInstance() {
  ::dra::_Dependencytask_default_instance_._instance.get_mutable()->input_ = const_cast< ::dra::Input*>(
      ::dra::Input::internal_default_instance());
}
class Dependencytask::_Internal {
 public:
  static const ::dra::Input& input(const Dependencytask* msg);
};

const ::dra::Input&
Dependencytask::_Internal::input(const Dependencytask* msg) {
  return *msg->input_;
}
Dependencytask::Dependencytask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Dependencytask)
}
Dependencytask::Dependencytask(const Dependencytask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.Dependencytask)
}

void Dependencytask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dependencytask_DependencyRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_ = nullptr;
}

Dependencytask::~Dependencytask() {
  // @@protoc_insertion_point(destructor:dra.Dependencytask)
  SharedDtor();
}

void Dependencytask::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
}

void Dependencytask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dependencytask& Dependencytask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dependencytask_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Dependencytask::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Dependencytask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Dependencytask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Dependencytask.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dependencytask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Dependencytask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // string name = 41;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Dependencytask.name");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Dependencytask)
  return target;
}

size_t Dependencytask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Dependencytask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 41;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dra.Input input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dependencytask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Dependencytask)
  GOOGLE_DCHECK_NE(&from, this);
  const Dependencytask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dependencytask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Dependencytask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Dependencytask)
    MergeFrom(*source);
  }
}

void Dependencytask::MergeFrom(const Dependencytask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Dependencytask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
}

void Dependencytask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Dependencytask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dependencytask::CopyFrom(const Dependencytask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Dependencytask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dependencytask::IsInitialized() const {
  return true;
}

void Dependencytask::InternalSwap(Dependencytask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dependencytask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void runTimeData::InitAsDefaultInstance() {
}
class runTimeData::_Internal {
 public:
};

runTimeData::runTimeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.runTimeData)
}
runTimeData::runTimeData(const runTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      right_branch_address_(from.right_branch_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  ::memcpy(&task_status_, &from.task_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkrightbranchaddress_) -
    reinterpret_cast<char*>(&task_status_)) + sizeof(checkrightbranchaddress_));
  // @@protoc_insertion_point(copy_constructor:dra.runTimeData)
}

void runTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_runTimeData_DependencyRPC_2eproto.base);
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkrightbranchaddress_) -
      reinterpret_cast<char*>(&task_status_)) + sizeof(checkrightbranchaddress_));
}

runTimeData::~runTimeData() {
  // @@protoc_insertion_point(destructor:dra.runTimeData)
  SharedDtor();
}

void runTimeData::SharedDtor() {
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void runTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const runTimeData& runTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_runTimeData_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void runTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.runTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkrightbranchaddress_) -
      reinterpret_cast<char*>(&task_status_)) + sizeof(checkrightbranchaddress_));
  _internal_metadata_.Clear();
}

const char* runTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes program = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.taskStatus task_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::dra::taskStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint32 rcursive_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rcursive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool checkCondition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          checkcondition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 condition_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool checkAddress = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          checkaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool checkRightBranchAddress = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          checkrightbranchaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 right_branch_address = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* runTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.runTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes program = 2;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_program(), target);
  }

  // .dra.taskStatus task_status = 3;
  if (this->task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_task_status(), target);
  }

  // uint32 rcursive_count = 4;
  if (this->rcursive_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rcursive_count(), target);
  }

  // uint32 priority = 5;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_priority(), target);
  }

  // uint32 idx = 10;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_idx(), target);
  }

  // bool checkCondition = 11;
  if (this->checkcondition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_checkcondition(), target);
  }

  // uint32 condition_address = 12;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_condition_address(), target);
  }

  // bool checkAddress = 13;
  if (this->checkaddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_checkaddress(), target);
  }

  // uint32 address = 14;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_address(), target);
  }

  // bool checkRightBranchAddress = 15;
  if (this->checkrightbranchaddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_checkrightbranchaddress(), target);
  }

  // repeated uint32 right_branch_address = 16;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_right_branch_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.runTimeData)
  return target;
}

size_t runTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.runTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 right_branch_address = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes program = 2;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // .dra.taskStatus task_status = 3;
  if (this->task_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  // uint32 rcursive_count = 4;
  if (this->rcursive_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rcursive_count());
  }

  // uint32 priority = 5;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // uint32 idx = 10;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 address = 14;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  // uint32 condition_address = 12;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_address());
  }

  // bool checkCondition = 11;
  if (this->checkcondition() != 0) {
    total_size += 1 + 1;
  }

  // bool checkAddress = 13;
  if (this->checkaddress() != 0) {
    total_size += 1 + 1;
  }

  // bool checkRightBranchAddress = 15;
  if (this->checkrightbranchaddress() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void runTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.runTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const runTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<runTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.runTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.runTimeData)
    MergeFrom(*source);
  }
}

void runTimeData::MergeFrom(const runTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.runTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  if (from.rcursive_count() != 0) {
    _internal_set_rcursive_count(from._internal_rcursive_count());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.checkcondition() != 0) {
    _internal_set_checkcondition(from._internal_checkcondition());
  }
  if (from.checkaddress() != 0) {
    _internal_set_checkaddress(from._internal_checkaddress());
  }
  if (from.checkrightbranchaddress() != 0) {
    _internal_set_checkrightbranchaddress(from._internal_checkrightbranchaddress());
  }
}

void runTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.runTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void runTimeData::CopyFrom(const runTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.runTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool runTimeData::IsInitialized() const {
  return true;
}

void runTimeData::InternalSwap(runTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_status_, other->task_status_);
  swap(rcursive_count_, other->rcursive_count_);
  swap(priority_, other->priority_);
  swap(idx_, other->idx_);
  swap(address_, other->address_);
  swap(condition_address_, other->condition_address_);
  swap(checkcondition_, other->checkcondition_);
  swap(checkaddress_, other->checkaddress_);
  swap(checkrightbranchaddress_, other->checkrightbranchaddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata runTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse() {}
FileOperationsFunction_WriteAddressEntry_DoNotUse::FileOperationsFunction_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileOperationsFunction_WriteAddressEntry_DoNotUse::MergeFrom(const FileOperationsFunction_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FileOperationsFunction_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FileOperationsFunction_WriteAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FileOperationsFunction::InitAsDefaultInstance() {
  ::dra::_FileOperationsFunction_default_instance_._instance.get_mutable()->run_time_date_ = const_cast< ::dra::runTimeData*>(
      ::dra::runTimeData::internal_default_instance());
}
class FileOperationsFunction::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const FileOperationsFunction* msg);
};

const ::dra::runTimeData&
FileOperationsFunction::_Internal::run_time_date(const FileOperationsFunction* msg) {
  return *msg->run_time_date_;
}
FileOperationsFunction::FileOperationsFunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.FileOperationsFunction)
}
FileOperationsFunction::FileOperationsFunction(const FileOperationsFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  write_address_.MergeFrom(from.write_address_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_operations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_operations_name().empty()) {
    file_operations_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_operations_name_);
  }
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.FileOperationsFunction)
}

void FileOperationsFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileOperationsFunction_DependencyRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&run_time_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

FileOperationsFunction::~FileOperationsFunction() {
  // @@protoc_insertion_point(destructor:dra.FileOperationsFunction)
  SharedDtor();
}

void FileOperationsFunction::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete run_time_date_;
}

void FileOperationsFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileOperationsFunction& FileOperationsFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileOperationsFunction_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void FileOperationsFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.FileOperationsFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_operations_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* FileOperationsFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperationsFunction.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_operations_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_operations_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperationsFunction.file_operations_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.file_operations_kind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::file_operations_kind>(val));
        } else goto handle_unusual;
        continue;
      // uint64 cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> write_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileOperationsFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.FileOperationsFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperationsFunction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string file_operations_name = 2;
  if (this->file_operations_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_operations_name().data(), static_cast<int>(this->_internal_file_operations_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperationsFunction.file_operations_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_operations_name(), target);
  }

  // .dra.file_operations_kind kind = 3;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  // uint64 cmd = 4;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_cmd(), target);
  }

  // .dra.runTimeData run_time_date = 5;
  if (this->has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::run_time_date(this), target, stream);
  }

  // map<uint32, uint32> write_address = 11;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.FileOperationsFunction)
  return target;
}

size_t FileOperationsFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.FileOperationsFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> write_address = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += FileOperationsFunction_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file_operations_name = 2;
  if (this->file_operations_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_operations_name());
  }

  // .dra.runTimeData run_time_date = 5;
  if (this->has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint64 cmd = 4;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cmd());
  }

  // .dra.file_operations_kind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileOperationsFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.FileOperationsFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const FileOperationsFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileOperationsFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.FileOperationsFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.FileOperationsFunction)
    MergeFrom(*source);
  }
}

void FileOperationsFunction::MergeFrom(const FileOperationsFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.FileOperationsFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.file_operations_name().size() > 0) {

    file_operations_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_operations_name_);
  }
  if (from.has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void FileOperationsFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.FileOperationsFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOperationsFunction::CopyFrom(const FileOperationsFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.FileOperationsFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperationsFunction::IsInitialized() const {
  return true;
}

void FileOperationsFunction::InternalSwap(FileOperationsFunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  write_address_.Swap(&other->write_address_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_operations_name_.Swap(&other->file_operations_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(run_time_date_, other->run_time_date_);
  swap(cmd_, other->cmd_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileOperationsFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse() {}
FileOperations_FileOperationsFunctionEntry_DoNotUse::FileOperations_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileOperations_FileOperationsFunctionEntry_DoNotUse::MergeFrom(const FileOperations_FileOperationsFunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FileOperations_FileOperationsFunctionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FileOperations_FileOperationsFunctionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FileOperations::InitAsDefaultInstance() {
}
class FileOperations::_Internal {
 public:
};

FileOperations::FileOperations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.FileOperations)
}
FileOperations::FileOperations(const FileOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:dra.FileOperations)
}

void FileOperations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileOperations_DependencyRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileOperations::~FileOperations() {
  // @@protoc_insertion_point(destructor:dra.FileOperations)
  SharedDtor();
}

void FileOperations::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileOperations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileOperations& FileOperations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileOperations_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void FileOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.FileOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_operations_function_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FileOperations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.FileOperations.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&file_operations_function_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileOperations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.FileOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.FileOperations.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  if (!this->_internal_file_operations_function().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations_function().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations_function().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it) {
        target = FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.FileOperations)
  return target;
}

size_t FileOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.FileOperations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_function_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >::const_iterator
      it = this->_internal_file_operations_function().begin();
      it != this->_internal_file_operations_function().end(); ++it) {
    total_size += FileOperations_FileOperationsFunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileOperations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.FileOperations)
  GOOGLE_DCHECK_NE(&from, this);
  const FileOperations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileOperations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.FileOperations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.FileOperations)
    MergeFrom(*source);
  }
}

void FileOperations::MergeFrom(const FileOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.FileOperations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_operations_function_.MergeFrom(from.file_operations_function_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FileOperations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.FileOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOperations::CopyFrom(const FileOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.FileOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperations::IsInitialized() const {
  return true;
}

void FileOperations::InternalSwap(FileOperations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_operations_function_.Swap(&other->file_operations_function_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileOperations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse() {}
WriteAddress_UncoveredAddressEntry_DoNotUse::WriteAddress_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_UncoveredAddressEntry_DoNotUse::MergeFrom(const WriteAddress_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WriteAddress_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse() {}
WriteAddress_FileOperationsFunctionEntry_DoNotUse::WriteAddress_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_FileOperationsFunctionEntry_DoNotUse::MergeFrom(const WriteAddress_FileOperationsFunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_FileOperationsFunctionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WriteAddress_FileOperationsFunctionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse() {}
WriteAddress_InputEntry_DoNotUse::WriteAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteAddress_InputEntry_DoNotUse::MergeFrom(const WriteAddress_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WriteAddress_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void WriteAddress::InitAsDefaultInstance() {
  ::dra::_WriteAddress_default_instance_._instance.get_mutable()->run_time_date_ = const_cast< ::dra::runTimeData*>(
      ::dra::runTimeData::internal_default_instance());
}
class WriteAddress::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const WriteAddress* msg);
};

const ::dra::runTimeData&
WriteAddress::_Internal::run_time_date(const WriteAddress* msg) {
  return *msg->run_time_date_;
}
WriteAddress::WriteAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.WriteAddress)
}
WriteAddress::WriteAddress(const WriteAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  input_.MergeFrom(from.input_);
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&write_address_, &from.write_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.WriteAddress)
}

void WriteAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteAddress_DependencyRPC_2eproto.base);
  ::memset(&run_time_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

WriteAddress::~WriteAddress() {
  // @@protoc_insertion_point(destructor:dra.WriteAddress)
  SharedDtor();
}

void WriteAddress::SharedDtor() {
  if (this != internal_default_instance()) delete run_time_date_;
}

void WriteAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteAddress& WriteAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteAddress_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void WriteAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.WriteAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncovered_address_.Clear();
  file_operations_function_.Clear();
  input_.Clear();
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* WriteAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 condition_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> file_operations_function = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&file_operations_function_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint32> input = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.WriteAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // uint32 condition_address = 3;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_condition_address(), target);
  }

  // uint32 kind = 4;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kind(), target);
  }

  // .dra.runTimeData run_time_date = 11;
  if (this->has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::run_time_date(this), target, stream);
  }

  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, uint32> file_operations_function = 24;
  if (!this->_internal_file_operations_function().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.WriteAddress.FileOperationsFunctionEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations_function().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations_function().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_file_operations_function().begin();
          it != this->_internal_file_operations_function().end(); ++it) {
        target = WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint32> input = 25;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.WriteAddress.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(25, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = WriteAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(25, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.WriteAddress)
  return target;
}

size_t WriteAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.WriteAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += WriteAddress_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> file_operations_function = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_function_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_file_operations_function().begin();
      it != this->_internal_file_operations_function().end(); ++it) {
    total_size += WriteAddress_FileOperationsFunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> input = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += WriteAddress_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.runTimeData run_time_date = 11;
  if (this->has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_address());
  }

  // uint32 condition_address = 3;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_address());
  }

  // uint32 kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.WriteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.WriteAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.WriteAddress)
    MergeFrom(*source);
  }
}

void WriteAddress::MergeFrom(const WriteAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.WriteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uncovered_address_.MergeFrom(from.uncovered_address_);
  file_operations_function_.MergeFrom(from.file_operations_function_);
  input_.MergeFrom(from.input_);
  if (from.has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from.write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void WriteAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.WriteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteAddress::CopyFrom(const WriteAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.WriteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAddress::IsInitialized() const {
  return true;
}

void WriteAddress::InternalSwap(WriteAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uncovered_address_.Swap(&other->uncovered_address_);
  file_operations_function_.Swap(&other->file_operations_function_);
  input_.Swap(&other->input_);
  swap(run_time_date_, other->run_time_date_);
  swap(write_address_, other->write_address_);
  swap(condition_address_, other->condition_address_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void writeAddressAttributes::InitAsDefaultInstance() {
}
class writeAddressAttributes::_Internal {
 public:
};

writeAddressAttributes::writeAddressAttributes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.writeAddressAttributes)
}
writeAddressAttributes::writeAddressAttributes(const writeAddressAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&write_address_, &from.write_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
  // @@protoc_insertion_point(copy_constructor:dra.writeAddressAttributes)
}

void writeAddressAttributes::SharedCtor() {
  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
}

writeAddressAttributes::~writeAddressAttributes() {
  // @@protoc_insertion_point(destructor:dra.writeAddressAttributes)
  SharedDtor();
}

void writeAddressAttributes::SharedDtor() {
}

void writeAddressAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const writeAddressAttributes& writeAddressAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_writeAddressAttributes_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void writeAddressAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.writeAddressAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&write_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&write_address_)) + sizeof(repeat_));
  _internal_metadata_.Clear();
}

const char* writeAddressAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 repeat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* writeAddressAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.writeAddressAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // uint32 prio = 6;
  if (this->prio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prio(), target);
  }

  // uint32 repeat = 7;
  if (this->repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.writeAddressAttributes)
  return target;
}

size_t writeAddressAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.writeAddressAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_address());
  }

  // uint32 prio = 6;
  if (this->prio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prio());
  }

  // uint32 repeat = 7;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void writeAddressAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.writeAddressAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const writeAddressAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<writeAddressAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.writeAddressAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.writeAddressAttributes)
    MergeFrom(*source);
  }
}

void writeAddressAttributes::MergeFrom(const writeAddressAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.writeAddressAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from.prio() != 0) {
    _internal_set_prio(from._internal_prio());
  }
  if (from.repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
}

void writeAddressAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.writeAddressAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void writeAddressAttributes::CopyFrom(const writeAddressAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.writeAddressAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool writeAddressAttributes::IsInitialized() const {
  return true;
}

void writeAddressAttributes::InternalSwap(writeAddressAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(write_address_, other->write_address_);
  swap(prio_, other->prio_);
  swap(repeat_, other->repeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata writeAddressAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse() {}
UncoveredAddress_InputEntry_DoNotUse::UncoveredAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_InputEntry_DoNotUse::MergeFrom(const UncoveredAddress_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse() {}
UncoveredAddress_WriteAddressEntry_DoNotUse::UncoveredAddress_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UncoveredAddress_WriteAddressEntry_DoNotUse::MergeFrom(const UncoveredAddress_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UncoveredAddress_WriteAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void UncoveredAddress::InitAsDefaultInstance() {
  ::dra::_UncoveredAddress_default_instance_._instance.get_mutable()->run_time_date_ = const_cast< ::dra::runTimeData*>(
      ::dra::runTimeData::internal_default_instance());
}
class UncoveredAddress::_Internal {
 public:
  static const ::dra::runTimeData& run_time_date(const UncoveredAddress* msg);
};

const ::dra::runTimeData&
UncoveredAddress::_Internal::run_time_date(const UncoveredAddress* msg) {
  return *msg->run_time_date_;
}
UncoveredAddress::UncoveredAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.UncoveredAddress)
}
UncoveredAddress::UncoveredAddress(const UncoveredAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      right_branch_address_(from.right_branch_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  write_address_.MergeFrom(from.write_address_);
  if (from._internal_has_run_time_date()) {
    run_time_date_ = new ::dra::runTimeData(*from.run_time_date_);
  } else {
    run_time_date_ = nullptr;
  }
  ::memcpy(&condition_address_, &from.condition_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&condition_address_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:dra.UncoveredAddress)
}

void UncoveredAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UncoveredAddress_DependencyRPC_2eproto.base);
  ::memset(&run_time_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&run_time_date_)) + sizeof(kind_));
}

UncoveredAddress::~UncoveredAddress() {
  // @@protoc_insertion_point(destructor:dra.UncoveredAddress)
  SharedDtor();
}

void UncoveredAddress::SharedDtor() {
  if (this != internal_default_instance()) delete run_time_date_;
}

void UncoveredAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UncoveredAddress& UncoveredAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UncoveredAddress_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void UncoveredAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UncoveredAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  input_.Clear();
  write_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && run_time_date_ != nullptr) {
    delete run_time_date_;
  }
  run_time_date_ = nullptr;
  ::memset(&condition_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&condition_address_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* UncoveredAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 condition_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uncovered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uncovered_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 right_branch_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bbcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bbcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.UncoveredAddressKind kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::UncoveredAddressKind>(val));
        } else goto handle_unusual;
        continue;
      // .dra.runTimeData run_time_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, uint32> input = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.writeAddressAttributes> write_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UncoveredAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UncoveredAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 condition_address = 1;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_address(), target);
  }

  // uint32 uncovered_address = 2;
  if (this->uncovered_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uncovered_address(), target);
  }

  // repeated uint32 right_branch_address = 3;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_right_branch_address(), byte_size, target);
    }
  }

  // uint32 bbcount = 4;
  if (this->bbcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bbcount(), target);
  }

  // .dra.UncoveredAddressKind kind = 5;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_kind(), target);
  }

  // .dra.runTimeData run_time_date = 8;
  if (this->has_run_time_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::run_time_date(this), target, stream);
  }

  // map<string, uint32> input = 22;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.UncoveredAddress.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = UncoveredAddress_InputEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UncoveredAddress)
  return target;
}

size_t UncoveredAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UncoveredAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 right_branch_address = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, uint32> input = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += UncoveredAddress_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += UncoveredAddress_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.runTimeData run_time_date = 8;
  if (this->has_run_time_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_date_);
  }

  // uint32 condition_address = 1;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_address());
  }

  // uint32 uncovered_address = 2;
  if (this->uncovered_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uncovered_address());
  }

  // uint32 bbcount = 4;
  if (this->bbcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bbcount());
  }

  // .dra.UncoveredAddressKind kind = 5;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UncoveredAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.UncoveredAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const UncoveredAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UncoveredAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.UncoveredAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.UncoveredAddress)
    MergeFrom(*source);
  }
}

void UncoveredAddress::MergeFrom(const UncoveredAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UncoveredAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  input_.MergeFrom(from.input_);
  write_address_.MergeFrom(from.write_address_);
  if (from.has_run_time_date()) {
    _internal_mutable_run_time_date()->::dra::runTimeData::MergeFrom(from._internal_run_time_date());
  }
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.uncovered_address() != 0) {
    _internal_set_uncovered_address(from._internal_uncovered_address());
  }
  if (from.bbcount() != 0) {
    _internal_set_bbcount(from._internal_bbcount());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void UncoveredAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.UncoveredAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UncoveredAddress::CopyFrom(const UncoveredAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UncoveredAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UncoveredAddress::IsInitialized() const {
  return true;
}

void UncoveredAddress::InternalSwap(UncoveredAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  input_.Swap(&other->input_);
  write_address_.Swap(&other->write_address_);
  swap(run_time_date_, other->run_time_date_);
  swap(condition_address_, other->condition_address_);
  swap(uncovered_address_, other->uncovered_address_);
  swap(bbcount_, other->bbcount_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UncoveredAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dra.Path)
}

void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:dra.Path)
  SharedDtor();
}

void Path::SharedDtor() {
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address = 1;
  {
    int byte_size = _address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnstableInput::InitAsDefaultInstance() {
  ::dra::_UnstableInput_default_instance_._instance.get_mutable()->new_path_ = const_cast< ::dra::Path*>(
      ::dra::Path::internal_default_instance());
  ::dra::_UnstableInput_default_instance_._instance.get_mutable()->unstable_path_ = const_cast< ::dra::Path*>(
      ::dra::Path::internal_default_instance());
}
class UnstableInput::_Internal {
 public:
  static const ::dra::Path& new_path(const UnstableInput* msg);
  static const ::dra::Path& unstable_path(const UnstableInput* msg);
};

const ::dra::Path&
UnstableInput::_Internal::new_path(const UnstableInput* msg) {
  return *msg->new_path_;
}
const ::dra::Path&
UnstableInput::_Internal::unstable_path(const UnstableInput* msg) {
  return *msg->unstable_path_;
}
UnstableInput::UnstableInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.UnstableInput)
}
UnstableInput::UnstableInput(const UnstableInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from._internal_has_new_path()) {
    new_path_ = new ::dra::Path(*from.new_path_);
  } else {
    new_path_ = nullptr;
  }
  if (from._internal_has_unstable_path()) {
    unstable_path_ = new ::dra::Path(*from.unstable_path_);
  } else {
    unstable_path_ = nullptr;
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:dra.UnstableInput)
}

void UnstableInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnstableInput_DependencyRPC_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&new_path_)) + sizeof(idx_));
}

UnstableInput::~UnstableInput() {
  // @@protoc_insertion_point(destructor:dra.UnstableInput)
  SharedDtor();
}

void UnstableInput::SharedDtor() {
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete new_path_;
  if (this != internal_default_instance()) delete unstable_path_;
}

void UnstableInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnstableInput& UnstableInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnstableInput_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void UnstableInput::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UnstableInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && new_path_ != nullptr) {
    delete new_path_;
  }
  new_path_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && unstable_path_ != nullptr) {
    delete unstable_path_;
  }
  unstable_path_ = nullptr;
  idx_ = 0;
  _internal_metadata_.Clear();
}

const char* UnstableInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Path new_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.Path unstable_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unstable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.UnstableInput.sig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes program = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnstableInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UnstableInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Path new_path = 1;
  if (this->has_new_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_path(this), target, stream);
  }

  // .dra.Path unstable_path = 2;
  if (this->has_unstable_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unstable_path(this), target, stream);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // string sig = 11;
  if (this->sig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.UnstableInput.sig");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sig(), target);
  }

  // bytes program = 12;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UnstableInput)
  return target;
}

size_t UnstableInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UnstableInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sig = 11;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // bytes program = 12;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // .dra.Path new_path = 1;
  if (this->has_new_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_path_);
  }

  // .dra.Path unstable_path = 2;
  if (this->has_unstable_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unstable_path_);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnstableInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.UnstableInput)
  GOOGLE_DCHECK_NE(&from, this);
  const UnstableInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnstableInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.UnstableInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.UnstableInput)
    MergeFrom(*source);
  }
}

void UnstableInput::MergeFrom(const UnstableInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UnstableInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.has_new_path()) {
    _internal_mutable_new_path()->::dra::Path::MergeFrom(from._internal_new_path());
  }
  if (from.has_unstable_path()) {
    _internal_mutable_unstable_path()->::dra::Path::MergeFrom(from._internal_unstable_path());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void UnstableInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.UnstableInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnstableInput::CopyFrom(const UnstableInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UnstableInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnstableInput::IsInitialized() const {
  return true;
}

void UnstableInput::InternalSwap(UnstableInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(new_path_, other->new_path_);
  swap(unstable_path_, other->unstable_path_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnstableInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Input_CallEntry_DoNotUse::Input_CallEntry_DoNotUse() {}
Input_CallEntry_DoNotUse::Input_CallEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Input_CallEntry_DoNotUse::MergeFrom(const Input_CallEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Input_CallEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Input_CallEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Input_UncoveredAddressEntry_DoNotUse::Input_UncoveredAddressEntry_DoNotUse() {}
Input_UncoveredAddressEntry_DoNotUse::Input_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Input_UncoveredAddressEntry_DoNotUse::MergeFrom(const Input_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Input_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Input_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Input_WriteAddressEntry_DoNotUse::Input_WriteAddressEntry_DoNotUse() {}
Input_WriteAddressEntry_DoNotUse::Input_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Input_WriteAddressEntry_DoNotUse::MergeFrom(const Input_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Input_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Input_WriteAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Input::InitAsDefaultInstance() {
}
class Input::_Internal {
 public:
};

Input::Input()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_.MergeFrom(from.call_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  write_address_.MergeFrom(from.write_address_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  stat_ = from.stat_;
  // @@protoc_insertion_point(copy_constructor:dra.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_DependencyRPC_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stat_ = 0;
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:dra.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_.Clear();
  uncovered_address_.Clear();
  write_address_.Clear();
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stat_ = 0;
  _internal_metadata_.Clear();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Input.sig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes program = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.Call> call = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&call_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .dra.FuzzingStat stat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stat(static_cast<::dra::FuzzingStat>(val));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> uncovered_address = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> write_address = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sig = 11;
  if (this->sig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Input.sig");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sig(), target);
  }

  // bytes program = 12;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_program(), target);
  }

  // map<uint32, .dra.Call> call = 13;
  if (!this->_internal_call().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_call().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_call().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >::const_iterator
          it = this->_internal_call().begin();
          it != this->_internal_call().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Input_CallEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >::const_iterator
          it = this->_internal_call().begin();
          it != this->_internal_call().end(); ++it) {
        target = Input_CallEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
      }
    }
  }

  // .dra.FuzzingStat stat = 21;
  if (this->stat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_stat(), target);
  }

  // map<uint32, uint32> uncovered_address = 22;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Input_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = Input_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, uint32> write_address = 25;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Input_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(25, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = Input_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(25, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.Call> call = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_call_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::Call >::const_iterator
      it = this->_internal_call().begin();
      it != this->_internal_call().end(); ++it) {
    total_size += Input_CallEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> uncovered_address = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += Input_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> write_address = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += Input_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sig = 11;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // bytes program = 12;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // .dra.FuzzingStat stat = 21;
  if (this->stat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_.MergeFrom(from.call_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  write_address_.MergeFrom(from.write_address_);
  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.stat() != 0) {
    _internal_set_stat(from._internal_stat());
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  call_.Swap(&other->call_);
  uncovered_address_.Swap(&other->uncovered_address_);
  write_address_.Swap(&other->write_address_);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stat_, other->stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dependency::InitAsDefaultInstance() {
  ::dra::_Dependency_default_instance_._instance.get_mutable()->input_ = const_cast< ::dra::Input*>(
      ::dra::Input::internal_default_instance());
  ::dra::_Dependency_default_instance_._instance.get_mutable()->uncovered_address_ = const_cast< ::dra::UncoveredAddress*>(
      ::dra::UncoveredAddress::internal_default_instance());
}
class Dependency::_Internal {
 public:
  static const ::dra::Input& input(const Dependency* msg);
  static const ::dra::UncoveredAddress& uncovered_address(const Dependency* msg);
};

const ::dra::Input&
Dependency::_Internal::input(const Dependency* msg) {
  return *msg->input_;
}
const ::dra::UncoveredAddress&
Dependency::_Internal::uncovered_address(const Dependency* msg) {
  return *msg->uncovered_address_;
}
Dependency::Dependency()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Dependency)
}
Dependency::Dependency(const Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      write_address_(from.write_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_uncovered_address()) {
    uncovered_address_ = new ::dra::UncoveredAddress(*from.uncovered_address_);
  } else {
    uncovered_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.Dependency)
}

void Dependency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dependency_DependencyRPC_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncovered_address_) -
      reinterpret_cast<char*>(&input_)) + sizeof(uncovered_address_));
}

Dependency::~Dependency() {
  // @@protoc_insertion_point(destructor:dra.Dependency)
  SharedDtor();
}

void Dependency::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete uncovered_address_;
}

void Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dependency& Dependency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dependency_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Dependency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uncovered_address_ != nullptr) {
    delete uncovered_address_;
  }
  uncovered_address_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.UncoveredAddress uncovered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncovered_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dra.WriteAddress write_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dependency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Dependency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // .dra.UncoveredAddress uncovered_address = 2;
  if (this->has_uncovered_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uncovered_address(this), target, stream);
  }

  // repeated .dra.WriteAddress write_address = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_write_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Dependency)
  return target;
}

size_t Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Dependency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.WriteAddress write_address = 3;
  total_size += 1UL * this->_internal_write_address_size();
  for (const auto& msg : this->write_address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Input input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .dra.UncoveredAddress uncovered_address = 2;
  if (this->has_uncovered_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncovered_address_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dependency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  const Dependency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dependency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Dependency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Dependency)
    MergeFrom(*source);
  }
}

void Dependency::MergeFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from.has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
  if (from.has_uncovered_address()) {
    _internal_mutable_uncovered_address()->::dra::UncoveredAddress::MergeFrom(from._internal_uncovered_address());
  }
}

void Dependency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dependency::CopyFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dependency::IsInitialized() const {
  return true;
}

void Dependency::InternalSwap(Dependency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  swap(input_, other->input_);
  swap(uncovered_address_, other->uncovered_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dependency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Corpus_InputEntry_DoNotUse::Corpus_InputEntry_DoNotUse() {}
Corpus_InputEntry_DoNotUse::Corpus_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Corpus_InputEntry_DoNotUse::MergeFrom(const Corpus_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Corpus_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Corpus_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Corpus_UncoveredAddressEntry_DoNotUse::Corpus_UncoveredAddressEntry_DoNotUse() {}
Corpus_UncoveredAddressEntry_DoNotUse::Corpus_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Corpus_UncoveredAddressEntry_DoNotUse::MergeFrom(const Corpus_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Corpus_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Corpus_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Corpus_CoveredAddressEntry_DoNotUse::Corpus_CoveredAddressEntry_DoNotUse() {}
Corpus_CoveredAddressEntry_DoNotUse::Corpus_CoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Corpus_CoveredAddressEntry_DoNotUse::MergeFrom(const Corpus_CoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Corpus_CoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Corpus_CoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Corpus_WriteAddressEntry_DoNotUse::Corpus_WriteAddressEntry_DoNotUse() {}
Corpus_WriteAddressEntry_DoNotUse::Corpus_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Corpus_WriteAddressEntry_DoNotUse::MergeFrom(const Corpus_WriteAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Corpus_WriteAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Corpus_WriteAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Corpus_FileOperationsEntry_DoNotUse::Corpus_FileOperationsEntry_DoNotUse() {}
Corpus_FileOperationsEntry_DoNotUse::Corpus_FileOperationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Corpus_FileOperationsEntry_DoNotUse::MergeFrom(const Corpus_FileOperationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Corpus_FileOperationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Corpus_FileOperationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Corpus_NewInputEntry_DoNotUse::Corpus_NewInputEntry_DoNotUse() {}
Corpus_NewInputEntry_DoNotUse::Corpus_NewInputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Corpus_NewInputEntry_DoNotUse::MergeFrom(const Corpus_NewInputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Corpus_NewInputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Corpus_NewInputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Corpus::InitAsDefaultInstance() {
  ::dra::_Corpus_default_instance_._instance.get_mutable()->tasks_ = const_cast< ::dra::Tasks*>(
      ::dra::Tasks::internal_default_instance());
  ::dra::_Corpus_default_instance_._instance.get_mutable()->high_task_ = const_cast< ::dra::Tasks*>(
      ::dra::Tasks::internal_default_instance());
  ::dra::_Corpus_default_instance_._instance.get_mutable()->boot_task_ = const_cast< ::dra::Tasks*>(
      ::dra::Tasks::internal_default_instance());
}
class Corpus::_Internal {
 public:
  static const ::dra::Tasks& tasks(const Corpus* msg);
  static const ::dra::Tasks& high_task(const Corpus* msg);
  static const ::dra::Tasks& boot_task(const Corpus* msg);
};

const ::dra::Tasks&
Corpus::_Internal::tasks(const Corpus* msg) {
  return *msg->tasks_;
}
const ::dra::Tasks&
Corpus::_Internal::high_task(const Corpus* msg) {
  return *msg->high_task_;
}
const ::dra::Tasks&
Corpus::_Internal::boot_task(const Corpus* msg) {
  return *msg->boot_task_;
}
Corpus::Corpus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Corpus)
}
Corpus::Corpus(const Corpus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  covered_address_.MergeFrom(from.covered_address_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  write_address_.MergeFrom(from.write_address_);
  file_operations_.MergeFrom(from.file_operations_);
  new_input_.MergeFrom(from.new_input_);
  if (from._internal_has_tasks()) {
    tasks_ = new ::dra::Tasks(*from.tasks_);
  } else {
    tasks_ = nullptr;
  }
  if (from._internal_has_high_task()) {
    high_task_ = new ::dra::Tasks(*from.high_task_);
  } else {
    high_task_ = nullptr;
  }
  if (from._internal_has_boot_task()) {
    boot_task_ = new ::dra::Tasks(*from.boot_task_);
  } else {
    boot_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.Corpus)
}

void Corpus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Corpus_DependencyRPC_2eproto.base);
  ::memset(&tasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boot_task_) -
      reinterpret_cast<char*>(&tasks_)) + sizeof(boot_task_));
}

Corpus::~Corpus() {
  // @@protoc_insertion_point(destructor:dra.Corpus)
  SharedDtor();
}

void Corpus::SharedDtor() {
  if (this != internal_default_instance()) delete tasks_;
  if (this != internal_default_instance()) delete high_task_;
  if (this != internal_default_instance()) delete boot_task_;
}

void Corpus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Corpus& Corpus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Corpus_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Corpus::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Corpus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  covered_address_.Clear();
  uncovered_address_.Clear();
  write_address_.Clear();
  file_operations_.Clear();
  new_input_.Clear();
  if (GetArenaNoVirtual() == nullptr && tasks_ != nullptr) {
    delete tasks_;
  }
  tasks_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_task_ != nullptr) {
    delete high_task_;
  }
  high_task_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && boot_task_ != nullptr) {
    delete boot_task_;
  }
  boot_task_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Corpus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dra.Input> input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.UncoveredAddress> covered_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&covered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.UncoveredAddress> uncovered_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.WriteAddress> write_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&write_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .dra.FileOperations> file_operations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&file_operations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .dra.Tasks tasks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tasks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.Tasks high_task = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.Tasks boot_task = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_boot_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .dra.Input> new_input = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&new_input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Corpus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Corpus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dra.Input> input = 1;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.Corpus.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Corpus_InputEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = Corpus_InputEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, .dra.UncoveredAddress> covered_address = 2;
  if (!this->_internal_covered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_covered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_covered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Corpus_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it) {
        target = Corpus_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .dra.UncoveredAddress> uncovered_address = 4;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Corpus_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = Corpus_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .dra.WriteAddress> write_address = 5;
  if (!this->_internal_write_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::WriteAddress >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_write_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_write_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::WriteAddress >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::WriteAddress >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Corpus_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::WriteAddress >::const_iterator
          it = this->_internal_write_address().begin();
          it != this->_internal_write_address().end(); ++it) {
        target = Corpus_WriteAddressEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, .dra.FileOperations> file_operations = 6;
  if (!this->_internal_file_operations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::FileOperations >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.Corpus.FileOperationsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_file_operations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_file_operations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::FileOperations >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::FileOperations >::const_iterator
          it = this->_internal_file_operations().begin();
          it != this->_internal_file_operations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Corpus_FileOperationsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::FileOperations >::const_iterator
          it = this->_internal_file_operations().begin();
          it != this->_internal_file_operations().end(); ++it) {
        target = Corpus_FileOperationsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .dra.Tasks tasks = 7;
  if (this->has_tasks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tasks(this), target, stream);
  }

  // .dra.Tasks high_task = 8;
  if (this->has_high_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::high_task(this), target, stream);
  }

  // .dra.Tasks boot_task = 9;
  if (this->has_boot_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::boot_task(this), target, stream);
  }

  // map<string, .dra.Input> new_input = 11;
  if (!this->_internal_new_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.Corpus.NewInputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_new_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_new_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_iterator
          it = this->_internal_new_input().begin();
          it != this->_internal_new_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Corpus_NewInputEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_iterator
          it = this->_internal_new_input().begin();
          it != this->_internal_new_input().end(); ++it) {
        target = Corpus_NewInputEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Corpus)
  return target;
}

size_t Corpus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Corpus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dra.Input> input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += Corpus_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.UncoveredAddress> covered_address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_covered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_iterator
      it = this->_internal_covered_address().begin();
      it != this->_internal_covered_address().end(); ++it) {
    total_size += Corpus_CoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.UncoveredAddress> uncovered_address = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::UncoveredAddress >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += Corpus_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.WriteAddress> write_address = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::WriteAddress >::const_iterator
      it = this->_internal_write_address().begin();
      it != this->_internal_write_address().end(); ++it) {
    total_size += Corpus_WriteAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .dra.FileOperations> file_operations = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_operations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::FileOperations >::const_iterator
      it = this->_internal_file_operations().begin();
      it != this->_internal_file_operations().end(); ++it) {
    total_size += Corpus_FileOperationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .dra.Input> new_input = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_new_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Input >::const_iterator
      it = this->_internal_new_input().begin();
      it != this->_internal_new_input().end(); ++it) {
    total_size += Corpus_NewInputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .dra.Tasks tasks = 7;
  if (this->has_tasks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tasks_);
  }

  // .dra.Tasks high_task = 8;
  if (this->has_high_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_task_);
  }

  // .dra.Tasks boot_task = 9;
  if (this->has_boot_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boot_task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Corpus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Corpus)
  GOOGLE_DCHECK_NE(&from, this);
  const Corpus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Corpus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Corpus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Corpus)
    MergeFrom(*source);
  }
}

void Corpus::MergeFrom(const Corpus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Corpus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  covered_address_.MergeFrom(from.covered_address_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  write_address_.MergeFrom(from.write_address_);
  file_operations_.MergeFrom(from.file_operations_);
  new_input_.MergeFrom(from.new_input_);
  if (from.has_tasks()) {
    _internal_mutable_tasks()->::dra::Tasks::MergeFrom(from._internal_tasks());
  }
  if (from.has_high_task()) {
    _internal_mutable_high_task()->::dra::Tasks::MergeFrom(from._internal_high_task());
  }
  if (from.has_boot_task()) {
    _internal_mutable_boot_task()->::dra::Tasks::MergeFrom(from._internal_boot_task());
  }
}

void Corpus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Corpus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Corpus::CopyFrom(const Corpus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Corpus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Corpus::IsInitialized() const {
  return true;
}

void Corpus::InternalSwap(Corpus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_.Swap(&other->input_);
  covered_address_.Swap(&other->covered_address_);
  uncovered_address_.Swap(&other->uncovered_address_);
  write_address_.Swap(&other->write_address_);
  file_operations_.Swap(&other->file_operations_);
  new_input_.Swap(&other->new_input_);
  swap(tasks_, other->tasks_);
  swap(high_task_, other->high_task_);
  swap(boot_task_, other->boot_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Corpus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsefulInput::InitAsDefaultInstance() {
  ::dra::_UsefulInput_default_instance_._instance.get_mutable()->input_ = const_cast< ::dra::Input*>(
      ::dra::Input::internal_default_instance());
}
class UsefulInput::_Internal {
 public:
  static const ::dra::Input& input(const UsefulInput* msg);
};

const ::dra::Input&
UsefulInput::_Internal::input(const UsefulInput* msg) {
  return *msg->input_;
}
UsefulInput::UsefulInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.UsefulInput)
}
UsefulInput::UsefulInput(const UsefulInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      new_address_(from.new_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::dra::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:dra.UsefulInput)
}

void UsefulInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsefulInput_DependencyRPC_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&input_)) + sizeof(num_));
}

UsefulInput::~UsefulInput() {
  // @@protoc_insertion_point(destructor:dra.UsefulInput)
  SharedDtor();
}

void UsefulInput::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
}

void UsefulInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsefulInput& UsefulInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsefulInput_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void UsefulInput::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.UsefulInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&time_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* UsefulInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 new_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_new_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_new_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsefulInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.UsefulInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Input input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // double time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time(), target);
  }

  // uint64 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num(), target);
  }

  // repeated uint32 new_address = 4;
  {
    int byte_size = _new_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_new_address(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.UsefulInput)
  return target;
}

size_t UsefulInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.UsefulInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 new_address = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->new_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _new_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .dra.Input input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // double time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsefulInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.UsefulInput)
  GOOGLE_DCHECK_NE(&from, this);
  const UsefulInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsefulInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.UsefulInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.UsefulInput)
    MergeFrom(*source);
  }
}

void UsefulInput::MergeFrom(const UsefulInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.UsefulInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_address_.MergeFrom(from.new_address_);
  if (from.has_input()) {
    _internal_mutable_input()->::dra::Input::MergeFrom(from._internal_input());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void UsefulInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.UsefulInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsefulInput::CopyFrom(const UsefulInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.UsefulInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsefulInput::IsInitialized() const {
  return true;
}

void UsefulInput::InternalSwap(UsefulInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_address_.InternalSwap(&other->new_address_);
  swap(input_, other->input_);
  swap(time_, other->time_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsefulInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Statistic::InitAsDefaultInstance() {
}
class Statistic::_Internal {
 public:
};

Statistic::Statistic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&newaddressnum_) -
    reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
  // @@protoc_insertion_point(copy_constructor:dra.Statistic)
}

void Statistic::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newaddressnum_) -
      reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:dra.Statistic)
  SharedDtor();
}

void Statistic::SharedDtor() {
}

void Statistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistic& Statistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistic_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newaddressnum_) -
      reinterpret_cast<char*>(&name_)) + sizeof(newaddressnum_));
  _internal_metadata_.Clear();
}

const char* Statistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.FuzzingStat name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_name(static_cast<::dra::FuzzingStat>(val));
        } else goto handle_unusual;
        continue;
      // uint64 executeNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          executenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 newTestCaseNum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          newtestcasenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 newAddressNum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          newaddressnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.FuzzingStat name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // uint64 executeNum = 11;
  if (this->executenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_executenum(), target);
  }

  // double time = 12;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_time(), target);
  }

  // uint64 newTestCaseNum = 13;
  if (this->newtestcasenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_newtestcasenum(), target);
  }

  // uint64 newAddressNum = 14;
  if (this->newaddressnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_newaddressnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Statistic)
  return target;
}

size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Statistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dra.FuzzingStat name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
  }

  // uint64 executeNum = 11;
  if (this->executenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_executenum());
  }

  // double time = 12;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 newTestCaseNum = 13;
  if (this->newtestcasenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newtestcasenum());
  }

  // uint64 newAddressNum = 14;
  if (this->newaddressnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newaddressnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Statistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Statistic)
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.executenum() != 0) {
    _internal_set_executenum(from._internal_executenum());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.newtestcasenum() != 0) {
    _internal_set_newtestcasenum(from._internal_newtestcasenum());
  }
  if (from.newaddressnum() != 0) {
    _internal_set_newaddressnum(from._internal_newaddressnum());
  }
}

void Statistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(name_, other->name_);
  swap(executenum_, other->executenum_);
  swap(time_, other->time_);
  swap(newtestcasenum_, other->newtestcasenum_);
  swap(newaddressnum_, other->newaddressnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse() {}
Statistics_StatEntry_DoNotUse::Statistics_StatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Statistics_StatEntry_DoNotUse::MergeFrom(const Statistics_StatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Statistics_StatEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Statistics_StatEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Statistics::InitAsDefaultInstance() {
  ::dra::_Statistics_default_instance_._instance.get_mutable()->coverage_ = const_cast< ::dra::Coverage*>(
      ::dra::Coverage::internal_default_instance());
}
class Statistics::_Internal {
 public:
  static const ::dra::Coverage& coverage(const Statistics* msg);
};

const ::dra::Coverage&
Statistics::_Internal::coverage(const Statistics* msg) {
  return *msg->coverage_;
}
Statistics::Statistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      useful_input_(from.useful_input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_.MergeFrom(from.stat_);
  if (from._internal_has_coverage()) {
    coverage_ = new ::dra::Coverage(*from.coverage_);
  } else {
    coverage_ = nullptr;
  }
  ::memcpy(&signalnum_, &from.signalnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&basic_block_number_) -
    reinterpret_cast<char*>(&signalnum_)) + sizeof(basic_block_number_));
  // @@protoc_insertion_point(copy_constructor:dra.Statistics)
}

void Statistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Statistics_DependencyRPC_2eproto.base);
  ::memset(&coverage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basic_block_number_) -
      reinterpret_cast<char*>(&coverage_)) + sizeof(basic_block_number_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:dra.Statistics)
  SharedDtor();
}

void Statistics::SharedDtor() {
  if (this != internal_default_instance()) delete coverage_;
}

void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistics& Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistics_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_.Clear();
  useful_input_.Clear();
  if (GetArenaNoVirtual() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
  ::memset(&signalnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basic_block_number_) -
      reinterpret_cast<char*>(&signalnum_)) + sizeof(basic_block_number_));
  _internal_metadata_.Clear();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 signalNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          signalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.Coverage coverage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 basic_block_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          basic_block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .dra.Statistic> stat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stat_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dra.UsefulInput useful_input = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_useful_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 signalNum = 1;
  if (this->signalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_signalnum(), target);
  }

  // .dra.Coverage coverage = 8;
  if (this->has_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::coverage(this), target, stream);
  }

  // uint32 basic_block_number = 10;
  if (this->basic_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_basic_block_number(), target);
  }

  // map<int32, .dra.Statistic> stat = 11;
  if (!this->_internal_stat().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_stat().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_stat().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
          it = this->_internal_stat().begin();
          it != this->_internal_stat().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Statistics_StatEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
          it = this->_internal_stat().begin();
          it != this->_internal_stat().end(); ++it) {
        target = Statistics_StatEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .dra.UsefulInput useful_input = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_useful_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_useful_input(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .dra.Statistic> stat = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stat_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dra::Statistic >::const_iterator
      it = this->_internal_stat().begin();
      it != this->_internal_stat().end(); ++it) {
    total_size += Statistics_StatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.UsefulInput useful_input = 12;
  total_size += 1UL * this->_internal_useful_input_size();
  for (const auto& msg : this->useful_input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Coverage coverage = 8;
  if (this->has_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coverage_);
  }

  // uint64 signalNum = 1;
  if (this->signalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_signalnum());
  }

  // uint32 basic_block_number = 10;
  if (this->basic_block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_basic_block_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_.MergeFrom(from.stat_);
  useful_input_.MergeFrom(from.useful_input_);
  if (from.has_coverage()) {
    _internal_mutable_coverage()->::dra::Coverage::MergeFrom(from._internal_coverage());
  }
  if (from.signalnum() != 0) {
    _internal_set_signalnum(from._internal_signalnum());
  }
  if (from.basic_block_number() != 0) {
    _internal_set_basic_block_number(from._internal_basic_block_number());
  }
}

void Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_.Swap(&other->stat_);
  useful_input_.InternalSwap(&other->useful_input_);
  swap(coverage_, other->coverage_);
  swap(signalnum_, other->signalnum_);
  swap(basic_block_number_, other->basic_block_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Task_UncoveredAddressEntry_DoNotUse::Task_UncoveredAddressEntry_DoNotUse() {}
Task_UncoveredAddressEntry_DoNotUse::Task_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Task_UncoveredAddressEntry_DoNotUse::MergeFrom(const Task_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Task_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Task_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Task_CoveredAddressEntry_DoNotUse::Task_CoveredAddressEntry_DoNotUse() {}
Task_CoveredAddressEntry_DoNotUse::Task_CoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Task_CoveredAddressEntry_DoNotUse::MergeFrom(const Task_CoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Task_CoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Task_CoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Task::InitAsDefaultInstance() {
}
class Task::_Internal {
 public:
};

Task::Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  covered_address_.MergeFrom(from.covered_address_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  write_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_sig().empty()) {
    write_sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_sig_);
  }
  write_program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_program().empty()) {
    write_program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_program_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&remove_write_idx_) -
    reinterpret_cast<char*>(&index_)) + sizeof(remove_write_idx_));
  // @@protoc_insertion_point(copy_constructor:dra.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_DependencyRPC_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_write_idx_) -
      reinterpret_cast<char*>(&index_)) + sizeof(remove_write_idx_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:dra.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncovered_address_.Clear();
  covered_address_.Clear();
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_write_idx_) -
      reinterpret_cast<char*>(&index_)) + sizeof(remove_write_idx_));
  _internal_metadata_.Clear();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Task.sig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes program = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string write_sig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_write_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Task.write_sig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          write_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes write_program = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_write_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Task.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.runTimeData> uncovered_address = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.runTimeData> covered_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&covered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // .dra.taskStatus task_status = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::dra::taskStatus>(val));
        } else goto handle_unusual;
        continue;
      // bool check_write_address = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          check_write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_write_address_final = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          check_write_address_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_write_address_remove = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          check_write_address_remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 final_idx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          final_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 final_write_idx = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          final_write_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remove_idx = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          remove_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remove_write_idx = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          remove_write_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sig = 1;
  if (this->sig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Task.sig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sig(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bytes program = 3;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_program(), target);
  }

  // string write_sig = 11;
  if (this->write_sig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_sig().data(), static_cast<int>(this->_internal_write_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Task.write_sig");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_write_sig(), target);
  }

  // uint32 write_index = 12;
  if (this->write_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_write_index(), target);
  }

  // bytes write_program = 13;
  if (this->write_program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_write_program(), target);
  }

  // uint32 write_address = 14;
  if (this->write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_write_address(), target);
  }

  // int32 priority = 15;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_priority(), target);
  }

  // string hash = 16;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Task.hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_hash(), target);
  }

  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Task_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = Task_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .dra.runTimeData> covered_address = 23;
  if (!this->_internal_covered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_covered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_covered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Task_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it) {
        target = Task_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // .dra.taskStatus task_status = 24;
  if (this->task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_task_status(), target);
  }

  // bool check_write_address = 25;
  if (this->check_write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_check_write_address(), target);
  }

  // bool check_write_address_final = 26;
  if (this->check_write_address_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_check_write_address_final(), target);
  }

  // bool check_write_address_remove = 27;
  if (this->check_write_address_remove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_check_write_address_remove(), target);
  }

  // uint32 final_idx = 28;
  if (this->final_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_final_idx(), target);
  }

  // uint32 final_write_idx = 29;
  if (this->final_write_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_final_write_idx(), target);
  }

  // uint32 remove_idx = 30;
  if (this->remove_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_remove_idx(), target);
  }

  // uint32 remove_write_idx = 31;
  if (this->remove_write_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_remove_write_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += Task_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.runTimeData> covered_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_covered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
      it = this->_internal_covered_address().begin();
      it != this->_internal_covered_address().end(); ++it) {
    total_size += Task_CoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sig = 1;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // bytes program = 3;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // string write_sig = 11;
  if (this->write_sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_sig());
  }

  // bytes write_program = 13;
  if (this->write_program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_write_program());
  }

  // string hash = 16;
  if (this->hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 write_index = 12;
  if (this->write_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_index());
  }

  // uint32 write_address = 14;
  if (this->write_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_address());
  }

  // int32 priority = 15;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  // .dra.taskStatus task_status = 24;
  if (this->task_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  // bool check_write_address = 25;
  if (this->check_write_address() != 0) {
    total_size += 2 + 1;
  }

  // bool check_write_address_final = 26;
  if (this->check_write_address_final() != 0) {
    total_size += 2 + 1;
  }

  // bool check_write_address_remove = 27;
  if (this->check_write_address_remove() != 0) {
    total_size += 2 + 1;
  }

  // uint32 final_idx = 28;
  if (this->final_idx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_final_idx());
  }

  // uint32 final_write_idx = 29;
  if (this->final_write_idx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_final_write_idx());
  }

  // uint32 remove_idx = 30;
  if (this->remove_idx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remove_idx());
  }

  // uint32 remove_write_idx = 31;
  if (this->remove_write_idx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remove_write_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uncovered_address_.MergeFrom(from.uncovered_address_);
  covered_address_.MergeFrom(from.covered_address_);
  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.write_sig().size() > 0) {

    write_sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_sig_);
  }
  if (from.write_program().size() > 0) {

    write_program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_program_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.write_index() != 0) {
    _internal_set_write_index(from._internal_write_index());
  }
  if (from.write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  if (from.check_write_address() != 0) {
    _internal_set_check_write_address(from._internal_check_write_address());
  }
  if (from.check_write_address_final() != 0) {
    _internal_set_check_write_address_final(from._internal_check_write_address_final());
  }
  if (from.check_write_address_remove() != 0) {
    _internal_set_check_write_address_remove(from._internal_check_write_address_remove());
  }
  if (from.final_idx() != 0) {
    _internal_set_final_idx(from._internal_final_idx());
  }
  if (from.final_write_idx() != 0) {
    _internal_set_final_write_idx(from._internal_final_write_idx());
  }
  if (from.remove_idx() != 0) {
    _internal_set_remove_idx(from._internal_remove_idx());
  }
  if (from.remove_write_idx() != 0) {
    _internal_set_remove_write_idx(from._internal_remove_write_idx());
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uncovered_address_.Swap(&other->uncovered_address_);
  covered_address_.Swap(&other->covered_address_);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  write_sig_.Swap(&other->write_sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  write_program_.Swap(&other->write_program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(write_index_, other->write_index_);
  swap(write_address_, other->write_address_);
  swap(priority_, other->priority_);
  swap(task_status_, other->task_status_);
  swap(check_write_address_, other->check_write_address_);
  swap(check_write_address_final_, other->check_write_address_final_);
  swap(check_write_address_remove_, other->check_write_address_remove_);
  swap(final_idx_, other->final_idx_);
  swap(final_write_idx_, other->final_write_idx_);
  swap(remove_idx_, other->remove_idx_);
  swap(remove_write_idx_, other->remove_write_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Tasks_TaskEntry_DoNotUse::Tasks_TaskEntry_DoNotUse() {}
Tasks_TaskEntry_DoNotUse::Tasks_TaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Tasks_TaskEntry_DoNotUse::MergeFrom(const Tasks_TaskEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Tasks_TaskEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Tasks_TaskEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Tasks::InitAsDefaultInstance() {
}
class Tasks::_Internal {
 public:
};

Tasks::Tasks()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Tasks)
}
Tasks::Tasks(const Tasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_.MergeFrom(from.task_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:dra.Tasks)
}

void Tasks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tasks_DependencyRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
}

Tasks::~Tasks() {
  // @@protoc_insertion_point(destructor:dra.Tasks)
  SharedDtor();
}

void Tasks::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tasks& Tasks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tasks_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Tasks::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Tasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_.Clear();
  tasks_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
  _internal_metadata_.Clear();
}

const char* Tasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dra.Task> task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&task_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dra.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Tasks.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.TaskKind kind = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::TaskKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Tasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dra.Task> task = 1;
  if (!this->_internal_task().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.Tasks.TaskEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_task().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_task().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_iterator
          it = this->_internal_task().begin();
          it != this->_internal_task().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Tasks_TaskEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_iterator
          it = this->_internal_task().begin();
          it != this->_internal_task().end(); ++it) {
        target = Tasks_TaskEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .dra.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  // string name = 41;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Tasks.name");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_name(), target);
  }

  // .dra.TaskKind kind = 42;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      42, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Tasks)
  return target;
}

size_t Tasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Tasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dra.Task> task = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_task_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_iterator
      it = this->_internal_task().begin();
      it != this->_internal_task().end(); ++it) {
    total_size += Tasks_TaskEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 41;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dra.TaskKind kind = 42;
  if (this->kind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tasks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Tasks)
  GOOGLE_DCHECK_NE(&from, this);
  const Tasks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tasks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Tasks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Tasks)
    MergeFrom(*source);
  }
}

void Tasks::MergeFrom(const Tasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Tasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
  tasks_.MergeFrom(from.tasks_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void Tasks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Tasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tasks::CopyFrom(const Tasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Tasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tasks::IsInitialized() const {
  return true;
}

void Tasks::InternalSwap(Tasks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_.Swap(&other->task_);
  tasks_.InternalSwap(&other->tasks_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tasks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Time::InitAsDefaultInstance() {
}
class Time::_Internal {
 public:
};

Time::Time()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&executenum_) -
    reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
  // @@protoc_insertion_point(copy_constructor:dra.Time)
}

void Time::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&executenum_) -
      reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:dra.Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time& Time::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Time_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&executenum_) -
      reinterpret_cast<char*>(&time_)) + sizeof(executenum_));
  _internal_metadata_.Clear();
}

const char* Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 executeNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          executenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // int64 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  // int64 executeNum = 3;
  if (this->executenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_executenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Time)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num());
  }

  // int64 executeNum = 3;
  if (this->executenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_executenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Time)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.executenum() != 0) {
    _internal_set_executenum(from._internal_executenum());
  }
}

void Time::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(num_, other->num_);
  swap(executenum_, other->executenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse() {}
Coverage_CoverageEntry_DoNotUse::Coverage_CoverageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Coverage_CoverageEntry_DoNotUse::MergeFrom(const Coverage_CoverageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Coverage_CoverageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Coverage_CoverageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Coverage::InitAsDefaultInstance() {
}
class Coverage::_Internal {
 public:
};

Coverage::Coverage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Coverage)
}
Coverage::Coverage(const Coverage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      time_(from.time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coverage_.MergeFrom(from.coverage_);
  // @@protoc_insertion_point(copy_constructor:dra.Coverage)
}

void Coverage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Coverage_DependencyRPC_2eproto.base);
}

Coverage::~Coverage() {
  // @@protoc_insertion_point(destructor:dra.Coverage)
  SharedDtor();
}

void Coverage::SharedDtor() {
}

void Coverage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coverage& Coverage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coverage_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Coverage::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Coverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coverage_.Clear();
  time_.Clear();
  _internal_metadata_.Clear();
}

const char* Coverage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, uint32> coverage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&coverage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dra.Time time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coverage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Coverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> coverage = 1;
  if (!this->_internal_coverage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_coverage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_coverage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_coverage().begin();
          it != this->_internal_coverage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Coverage_CoverageEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_coverage().begin();
          it != this->_internal_coverage().end(); ++it) {
        target = Coverage_CoverageEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .dra.Time time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Coverage)
  return target;
}

size_t Coverage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Coverage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> coverage = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coverage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_coverage().begin();
      it != this->_internal_coverage().end(); ++it) {
    total_size += Coverage_CoverageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.Time time = 2;
  total_size += 1UL * this->_internal_time_size();
  for (const auto& msg : this->time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coverage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Coverage)
  GOOGLE_DCHECK_NE(&from, this);
  const Coverage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coverage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Coverage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Coverage)
    MergeFrom(*source);
  }
}

void Coverage::MergeFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Coverage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coverage_.MergeFrom(from.coverage_);
  time_.MergeFrom(from.time_);
}

void Coverage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Coverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coverage::CopyFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Coverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coverage::IsInitialized() const {
  return true;
}

void Coverage::InternalSwap(Coverage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coverage_.Swap(&other->coverage_);
  time_.InternalSwap(&other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coverage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conditions::InitAsDefaultInstance() {
}
class Conditions::_Internal {
 public:
};

Conditions::Conditions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Conditions)
}
Conditions::Conditions(const Conditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      condition_(from.condition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dra.Conditions)
}

void Conditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conditions_DependencyRPC_2eproto.base);
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:dra.Conditions)
  SharedDtor();
}

void Conditions::SharedDtor() {
}

void Conditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conditions& Conditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conditions_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  condition_.Clear();
  _internal_metadata_.Clear();
}

const char* Conditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dra.Condition condition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dra.Condition condition = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_condition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Conditions)
  return target;
}

size_t Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Conditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.Condition condition = 10;
  total_size += 1UL * this->_internal_condition_size();
  for (const auto& msg : this->condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Conditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Conditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Conditions)
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  condition_.MergeFrom(from.condition_);
}

void Conditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  return true;
}

void Conditions::InternalSwap(Conditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  condition_.InternalSwap(&other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteAddresses::InitAsDefaultInstance() {
  ::dra::_WriteAddresses_default_instance_._instance.get_mutable()->condition_ = const_cast< ::dra::Condition*>(
      ::dra::Condition::internal_default_instance());
}
class WriteAddresses::_Internal {
 public:
  static const ::dra::Condition& condition(const WriteAddresses* msg);
};

const ::dra::Condition&
WriteAddresses::_Internal::condition(const WriteAddresses* msg) {
  return *msg->condition_;
}
WriteAddresses::WriteAddresses()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.WriteAddresses)
}
WriteAddresses::WriteAddresses(const WriteAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      write_address_(from.write_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::dra::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dra.WriteAddresses)
}

void WriteAddresses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteAddresses_DependencyRPC_2eproto.base);
  condition_ = nullptr;
}

WriteAddresses::~WriteAddresses() {
  // @@protoc_insertion_point(destructor:dra.WriteAddresses)
  SharedDtor();
}

void WriteAddresses::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
}

void WriteAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteAddresses& WriteAddresses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteAddresses_DependencyRPC_2eproto.base);
  return *internal_default_instance();
}


void WriteAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.WriteAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_address_.Clear();
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear();
}

const char* WriteAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dra.Condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dra.WriteAddress write_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteAddresses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.WriteAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dra.Condition condition = 1;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // repeated .dra.WriteAddress write_address = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_address_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_write_address(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.WriteAddresses)
  return target;
}

size_t WriteAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.WriteAddresses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dra.WriteAddress write_address = 4;
  total_size += 1UL * this->_internal_write_address_size();
  for (const auto& msg : this->write_address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dra.Condition condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteAddresses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.WriteAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteAddresses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteAddresses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.WriteAddresses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.WriteAddresses)
    MergeFrom(*source);
  }
}

void WriteAddresses::MergeFrom(const WriteAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.WriteAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_address_.MergeFrom(from.write_address_);
  if (from.has_condition()) {
    _internal_mutable_condition()->::dra::Condition::MergeFrom(from._internal_condition());
  }
}

void WriteAddresses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.WriteAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteAddresses::CopyFrom(const WriteAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.WriteAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAddresses::IsInitialized() const {
  return true;
}

void WriteAddresses::InternalSwap(WriteAddresses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  write_address_.InternalSwap(&other->write_address_);
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteAddresses::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dra::Empty* Arena::CreateMaybeMessage< ::dra::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Condition* Arena::CreateMaybeMessage< ::dra::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Call_AddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Call_AddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Call_AddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Call* Arena::CreateMaybeMessage< ::dra::Call >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Call >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Inputs* Arena::CreateMaybeMessage< ::dra::Inputs >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Inputs >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Dependencytask* Arena::CreateMaybeMessage< ::dra::Dependencytask >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Dependencytask >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::runTimeData* Arena::CreateMaybeMessage< ::dra::runTimeData >(Arena* arena) {
  return Arena::CreateInternal< ::dra::runTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperationsFunction* Arena::CreateMaybeMessage< ::dra::FileOperationsFunction >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperationsFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::FileOperations* Arena::CreateMaybeMessage< ::dra::FileOperations >(Arena* arena) {
  return Arena::CreateInternal< ::dra::FileOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::WriteAddress_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddress* Arena::CreateMaybeMessage< ::dra::WriteAddress >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::writeAddressAttributes* Arena::CreateMaybeMessage< ::dra::writeAddressAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::dra::writeAddressAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UncoveredAddress* Arena::CreateMaybeMessage< ::dra::UncoveredAddress >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UncoveredAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Path* Arena::CreateMaybeMessage< ::dra::Path >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UnstableInput* Arena::CreateMaybeMessage< ::dra::UnstableInput >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UnstableInput >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Input_CallEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Input_CallEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Input_CallEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Input_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Input_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Input_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Input_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Input_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Input_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Input* Arena::CreateMaybeMessage< ::dra::Input >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Dependency* Arena::CreateMaybeMessage< ::dra::Dependency >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Corpus_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Corpus_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus_CoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Corpus_CoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus_CoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Corpus_WriteAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus_WriteAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus_FileOperationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Corpus_FileOperationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus_FileOperationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus_NewInputEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Corpus_NewInputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus_NewInputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Corpus* Arena::CreateMaybeMessage< ::dra::Corpus >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Corpus >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::UsefulInput* Arena::CreateMaybeMessage< ::dra::UsefulInput >(Arena* arena) {
  return Arena::CreateInternal< ::dra::UsefulInput >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistic* Arena::CreateMaybeMessage< ::dra::Statistic >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistics_StatEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Statistics_StatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Statistics_StatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Statistics* Arena::CreateMaybeMessage< ::dra::Statistics >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Task_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Task_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Task_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Task_CoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Task_CoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Task_CoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Task* Arena::CreateMaybeMessage< ::dra::Task >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Tasks_TaskEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Tasks_TaskEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Tasks_TaskEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Tasks* Arena::CreateMaybeMessage< ::dra::Tasks >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Tasks >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Time* Arena::CreateMaybeMessage< ::dra::Time >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Coverage_CoverageEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Coverage_CoverageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Coverage_CoverageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Coverage* Arena::CreateMaybeMessage< ::dra::Coverage >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Coverage >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Conditions* Arena::CreateMaybeMessage< ::dra::Conditions >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Conditions >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::WriteAddresses* Arena::CreateMaybeMessage< ::dra::WriteAddresses >(Arena* arena) {
  return Arena::CreateInternal< ::dra::WriteAddresses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
