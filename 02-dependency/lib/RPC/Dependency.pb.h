// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dependency.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Dependency_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Dependency_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Input.pb.h"
#include "Task.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Dependency_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Dependency_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Dependency_2eproto;
namespace dra {
class Condition;
struct ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class Conditions;
struct ConditionsDefaultTypeInternal;
extern ConditionsDefaultTypeInternal _Conditions_default_instance_;
class Dependency;
struct DependencyDefaultTypeInternal;
extern DependencyDefaultTypeInternal _Dependency_default_instance_;
class FileOperations;
struct FileOperationsDefaultTypeInternal;
extern FileOperationsDefaultTypeInternal _FileOperations_default_instance_;
class FileOperationsFunction;
struct FileOperationsFunctionDefaultTypeInternal;
extern FileOperationsFunctionDefaultTypeInternal _FileOperationsFunction_default_instance_;
class FileOperationsFunction_WriteAddressEntry_DoNotUse;
struct FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal;
extern FileOperationsFunction_WriteAddressEntry_DoNotUseDefaultTypeInternal _FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_;
class FileOperations_FileOperationsFunctionEntry_DoNotUse;
struct FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal;
extern FileOperations_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal _FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Status_StatusEntry_DoNotUse;
struct Status_StatusEntry_DoNotUseDefaultTypeInternal;
extern Status_StatusEntry_DoNotUseDefaultTypeInternal _Status_StatusEntry_DoNotUse_default_instance_;
class UncoveredAddress;
struct UncoveredAddressDefaultTypeInternal;
extern UncoveredAddressDefaultTypeInternal _UncoveredAddress_default_instance_;
class UncoveredAddress_InputEntry_DoNotUse;
struct UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal;
extern UncoveredAddress_InputEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_InputEntry_DoNotUse_default_instance_;
class UncoveredAddress_InputStatusEntry_DoNotUse;
struct UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal;
extern UncoveredAddress_InputStatusEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_;
class UncoveredAddress_TasksCountEntry_DoNotUse;
struct UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal;
extern UncoveredAddress_TasksCountEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteAddressEntry_DoNotUse;
struct UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal;
extern UncoveredAddress_WriteAddressEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteAddressStatusEntry_DoNotUse;
struct UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal;
extern UncoveredAddress_WriteAddressStatusEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_;
class UncoveredAddress_WriteCountEntry_DoNotUse;
struct UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal;
extern UncoveredAddress_WriteCountEntry_DoNotUseDefaultTypeInternal _UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_;
class WriteAddress;
struct WriteAddressDefaultTypeInternal;
extern WriteAddressDefaultTypeInternal _WriteAddress_default_instance_;
class WriteAddress_FileOperationsFunctionEntry_DoNotUse;
struct WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal;
extern WriteAddress_FileOperationsFunctionEntry_DoNotUseDefaultTypeInternal _WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_;
class WriteAddress_InputEntry_DoNotUse;
struct WriteAddress_InputEntry_DoNotUseDefaultTypeInternal;
extern WriteAddress_InputEntry_DoNotUseDefaultTypeInternal _WriteAddress_InputEntry_DoNotUse_default_instance_;
class WriteAddress_UncoveredAddressEntry_DoNotUse;
struct WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal;
extern WriteAddress_UncoveredAddressEntry_DoNotUseDefaultTypeInternal _WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_;
class WriteAddresses;
struct WriteAddressesDefaultTypeInternal;
extern WriteAddressesDefaultTypeInternal _WriteAddresses_default_instance_;
class address;
struct addressDefaultTypeInternal;
extern addressDefaultTypeInternal _address_default_instance_;
class address_AddrEntry_DoNotUse;
struct address_AddrEntry_DoNotUseDefaultTypeInternal;
extern address_AddrEntry_DoNotUseDefaultTypeInternal _address_AddrEntry_DoNotUse_default_instance_;
class writeAddressAttributes;
struct writeAddressAttributesDefaultTypeInternal;
extern writeAddressAttributesDefaultTypeInternal _writeAddressAttributes_default_instance_;
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> ::dra::Condition* Arena::CreateMaybeMessage<::dra::Condition>(Arena*);
template<> ::dra::Conditions* Arena::CreateMaybeMessage<::dra::Conditions>(Arena*);
template<> ::dra::Dependency* Arena::CreateMaybeMessage<::dra::Dependency>(Arena*);
template<> ::dra::FileOperations* Arena::CreateMaybeMessage<::dra::FileOperations>(Arena*);
template<> ::dra::FileOperationsFunction* Arena::CreateMaybeMessage<::dra::FileOperationsFunction>(Arena*);
template<> ::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::FileOperationsFunction_WriteAddressEntry_DoNotUse>(Arena*);
template<> ::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::FileOperations_FileOperationsFunctionEntry_DoNotUse>(Arena*);
template<> ::dra::Status* Arena::CreateMaybeMessage<::dra::Status>(Arena*);
template<> ::dra::Status_StatusEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::Status_StatusEntry_DoNotUse>(Arena*);
template<> ::dra::UncoveredAddress* Arena::CreateMaybeMessage<::dra::UncoveredAddress>(Arena*);
template<> ::dra::UncoveredAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UncoveredAddress_InputEntry_DoNotUse>(Arena*);
template<> ::dra::UncoveredAddress_InputStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UncoveredAddress_InputStatusEntry_DoNotUse>(Arena*);
template<> ::dra::UncoveredAddress_TasksCountEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UncoveredAddress_TasksCountEntry_DoNotUse>(Arena*);
template<> ::dra::UncoveredAddress_WriteAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UncoveredAddress_WriteAddressEntry_DoNotUse>(Arena*);
template<> ::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UncoveredAddress_WriteAddressStatusEntry_DoNotUse>(Arena*);
template<> ::dra::UncoveredAddress_WriteCountEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::UncoveredAddress_WriteCountEntry_DoNotUse>(Arena*);
template<> ::dra::WriteAddress* Arena::CreateMaybeMessage<::dra::WriteAddress>(Arena*);
template<> ::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::WriteAddress_FileOperationsFunctionEntry_DoNotUse>(Arena*);
template<> ::dra::WriteAddress_InputEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::WriteAddress_InputEntry_DoNotUse>(Arena*);
template<> ::dra::WriteAddress_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::WriteAddress_UncoveredAddressEntry_DoNotUse>(Arena*);
template<> ::dra::WriteAddresses* Arena::CreateMaybeMessage<::dra::WriteAddresses>(Arena*);
template<> ::dra::address* Arena::CreateMaybeMessage<::dra::address>(Arena*);
template<> ::dra::address_AddrEntry_DoNotUse* Arena::CreateMaybeMessage<::dra::address_AddrEntry_DoNotUse>(Arena*);
template<> ::dra::writeAddressAttributes* Arena::CreateMaybeMessage<::dra::writeAddressAttributes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dra {

enum UncoveredAddressKind : int {
  UncoveredAddressOutside = 0,
  UncoveredAddressInputRelated = 1,
  UncoveredAddressDependencyRelated = 2,
  UncoveredAddressOther = 3,
  UncoveredAddressKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UncoveredAddressKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UncoveredAddressKind_IsValid(int value);
constexpr UncoveredAddressKind UncoveredAddressKind_MIN = UncoveredAddressOutside;
constexpr UncoveredAddressKind UncoveredAddressKind_MAX = UncoveredAddressOther;
constexpr int UncoveredAddressKind_ARRAYSIZE = UncoveredAddressKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UncoveredAddressKind_descriptor();
template<typename T>
inline const std::string& UncoveredAddressKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UncoveredAddressKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UncoveredAddressKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UncoveredAddressKind_descriptor(), enum_t_value);
}
inline bool UncoveredAddressKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UncoveredAddressKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UncoveredAddressKind>(
    UncoveredAddressKind_descriptor(), name, value);
}
enum file_operations_kind : int {
  default_ = 0,
  init = 1,
  llseek = 2,
  read = 3,
  write = 4,
  poll = 9,
  unlocked_ioctl = 10,
  mmap = 12,
  open = 14,
  release = 16,
  file_operations_kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  file_operations_kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool file_operations_kind_IsValid(int value);
constexpr file_operations_kind file_operations_kind_MIN = default_;
constexpr file_operations_kind file_operations_kind_MAX = release;
constexpr int file_operations_kind_ARRAYSIZE = file_operations_kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_operations_kind_descriptor();
template<typename T>
inline const std::string& file_operations_kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, file_operations_kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function file_operations_kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    file_operations_kind_descriptor(), enum_t_value);
}
inline bool file_operations_kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, file_operations_kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<file_operations_kind>(
    file_operations_kind_descriptor(), name, value);
}
// ===================================================================

class WriteAddress_UncoveredAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteAddress_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteAddress_UncoveredAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  WriteAddress_UncoveredAddressEntry_DoNotUse();
  explicit constexpr WriteAddress_UncoveredAddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit WriteAddress_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WriteAddress_UncoveredAddressEntry_DoNotUse& other);
  static const WriteAddress_UncoveredAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WriteAddress_UncoveredAddressEntry_DoNotUse*>(&_WriteAddress_UncoveredAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class WriteAddress_FileOperationsFunctionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteAddress_FileOperationsFunctionEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteAddress_FileOperationsFunctionEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  WriteAddress_FileOperationsFunctionEntry_DoNotUse();
  explicit constexpr WriteAddress_FileOperationsFunctionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit WriteAddress_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WriteAddress_FileOperationsFunctionEntry_DoNotUse& other);
  static const WriteAddress_FileOperationsFunctionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WriteAddress_FileOperationsFunctionEntry_DoNotUse*>(&_WriteAddress_FileOperationsFunctionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.WriteAddress.FileOperationsFunctionEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class WriteAddress_InputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteAddress_InputEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteAddress_InputEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  WriteAddress_InputEntry_DoNotUse();
  explicit constexpr WriteAddress_InputEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit WriteAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WriteAddress_InputEntry_DoNotUse& other);
  static const WriteAddress_InputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WriteAddress_InputEntry_DoNotUse*>(&_WriteAddress_InputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.WriteAddress.InputEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class WriteAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.WriteAddress) */ {
 public:
  inline WriteAddress() : WriteAddress(nullptr) {}
  ~WriteAddress() override;
  explicit constexpr WriteAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteAddress(const WriteAddress& from);
  WriteAddress(WriteAddress&& from) noexcept
    : WriteAddress() {
    *this = ::std::move(from);
  }

  inline WriteAddress& operator=(const WriteAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteAddress& operator=(WriteAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteAddress* internal_default_instance() {
    return reinterpret_cast<const WriteAddress*>(
               &_WriteAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteAddress& a, WriteAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteAddress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteAddress* New() const final {
    return new WriteAddress();
  }

  WriteAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.WriteAddress";
  }
  protected:
  explicit WriteAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUncoveredAddressFieldNumber = 23,
    kFileOperationsFunctionFieldNumber = 24,
    kInputFieldNumber = 25,
    kRunTimeDateFieldNumber = 11,
    kWriteAddressFieldNumber = 2,
    kKindFieldNumber = 4,
  };
  // map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
  int uncovered_address_size() const;
  private:
  int _internal_uncovered_address_size() const;
  public:
  void clear_uncovered_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
      _internal_uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
      _internal_mutable_uncovered_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
      uncovered_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
      mutable_uncovered_address();

  // map<string, uint32> file_operations_function = 24;
  int file_operations_function_size() const;
  private:
  int _internal_file_operations_function_size() const;
  public:
  void clear_file_operations_function();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_file_operations_function() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_file_operations_function();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      file_operations_function() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_file_operations_function();

  // map<string, uint32> input = 25;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_input();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_input();

  // .dra.runTimeData run_time_date = 11;
  bool has_run_time_date() const;
  private:
  bool _internal_has_run_time_date() const;
  public:
  void clear_run_time_date();
  const ::dra::runTimeData& run_time_date() const;
  PROTOBUF_MUST_USE_RESULT ::dra::runTimeData* release_run_time_date();
  ::dra::runTimeData* mutable_run_time_date();
  void set_allocated_run_time_date(::dra::runTimeData* run_time_date);
  private:
  const ::dra::runTimeData& _internal_run_time_date() const;
  ::dra::runTimeData* _internal_mutable_run_time_date();
  public:
  void unsafe_arena_set_allocated_run_time_date(
      ::dra::runTimeData* run_time_date);
  ::dra::runTimeData* unsafe_arena_release_run_time_date();

  // uint32 write_address = 2;
  void clear_write_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_address() const;
  void set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_address() const;
  void _internal_set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .dra.WriteStatementKind kind = 4;
  void clear_kind();
  ::dra::WriteStatementKind kind() const;
  void set_kind(::dra::WriteStatementKind value);
  private:
  ::dra::WriteStatementKind _internal_kind() const;
  void _internal_set_kind(::dra::WriteStatementKind value);
  public:

  // @@protoc_insertion_point(class_scope:dra.WriteAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WriteAddress_UncoveredAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WriteAddress_FileOperationsFunctionEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> file_operations_function_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WriteAddress_InputEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> input_;
  ::dra::runTimeData* run_time_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_address_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class writeAddressAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.writeAddressAttributes) */ {
 public:
  inline writeAddressAttributes() : writeAddressAttributes(nullptr) {}
  ~writeAddressAttributes() override;
  explicit constexpr writeAddressAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  writeAddressAttributes(const writeAddressAttributes& from);
  writeAddressAttributes(writeAddressAttributes&& from) noexcept
    : writeAddressAttributes() {
    *this = ::std::move(from);
  }

  inline writeAddressAttributes& operator=(const writeAddressAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline writeAddressAttributes& operator=(writeAddressAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const writeAddressAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const writeAddressAttributes* internal_default_instance() {
    return reinterpret_cast<const writeAddressAttributes*>(
               &_writeAddressAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(writeAddressAttributes& a, writeAddressAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(writeAddressAttributes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(writeAddressAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline writeAddressAttributes* New() const final {
    return new writeAddressAttributes();
  }

  writeAddressAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<writeAddressAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const writeAddressAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const writeAddressAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(writeAddressAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.writeAddressAttributes";
  }
  protected:
  explicit writeAddressAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteAddressFieldNumber = 2,
    kPrioFieldNumber = 6,
    kRepeatFieldNumber = 7,
  };
  // uint32 write_address = 2;
  void clear_write_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_address() const;
  void set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_address() const;
  void _internal_set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prio = 6;
  void clear_prio();
  ::PROTOBUF_NAMESPACE_ID::uint32 prio() const;
  void set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prio() const;
  void _internal_set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 repeat = 7;
  void clear_repeat();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeat() const;
  void set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeat() const;
  void _internal_set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.writeAddressAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class Status_StatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Status_StatusEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Status_StatusEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  Status_StatusEntry_DoNotUse();
  explicit constexpr Status_StatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Status_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Status_StatusEntry_DoNotUse& other);
  static const Status_StatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Status_StatusEntry_DoNotUse*>(&_Status_StatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return new Status();
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // map<uint32, .dra.taskStatus> status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
      _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
      _internal_mutable_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
      mutable_status();

  // @@protoc_insertion_point(class_scope:dra.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Status_StatusEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class UncoveredAddress_InputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_InputEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_InputEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UncoveredAddress_InputEntry_DoNotUse();
  explicit constexpr UncoveredAddress_InputEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UncoveredAddress_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UncoveredAddress_InputEntry_DoNotUse& other);
  static const UncoveredAddress_InputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UncoveredAddress_InputEntry_DoNotUse*>(&_UncoveredAddress_InputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.UncoveredAddress.InputEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UncoveredAddress_WriteAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_WriteAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_WriteAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UncoveredAddress_WriteAddressEntry_DoNotUse();
  explicit constexpr UncoveredAddress_WriteAddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UncoveredAddress_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UncoveredAddress_WriteAddressEntry_DoNotUse& other);
  static const UncoveredAddress_WriteAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UncoveredAddress_WriteAddressEntry_DoNotUse*>(&_UncoveredAddress_WriteAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UncoveredAddress_InputStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_InputStatusEntry_DoNotUse, 
    std::string, ::dra::Status,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_InputStatusEntry_DoNotUse, 
    std::string, ::dra::Status,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UncoveredAddress_InputStatusEntry_DoNotUse();
  explicit constexpr UncoveredAddress_InputStatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UncoveredAddress_InputStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UncoveredAddress_InputStatusEntry_DoNotUse& other);
  static const UncoveredAddress_InputStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UncoveredAddress_InputStatusEntry_DoNotUse*>(&_UncoveredAddress_InputStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.UncoveredAddress.InputStatusEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UncoveredAddress_WriteAddressStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_WriteAddressStatusEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_WriteAddressStatusEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  UncoveredAddress_WriteAddressStatusEntry_DoNotUse();
  explicit constexpr UncoveredAddress_WriteAddressStatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UncoveredAddress_WriteAddressStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UncoveredAddress_WriteAddressStatusEntry_DoNotUse& other);
  static const UncoveredAddress_WriteAddressStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UncoveredAddress_WriteAddressStatusEntry_DoNotUse*>(&_UncoveredAddress_WriteAddressStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UncoveredAddress_TasksCountEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_TasksCountEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_TasksCountEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UncoveredAddress_TasksCountEntry_DoNotUse();
  explicit constexpr UncoveredAddress_TasksCountEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UncoveredAddress_TasksCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UncoveredAddress_TasksCountEntry_DoNotUse& other);
  static const UncoveredAddress_TasksCountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UncoveredAddress_TasksCountEntry_DoNotUse*>(&_UncoveredAddress_TasksCountEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UncoveredAddress_WriteCountEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_WriteCountEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UncoveredAddress_WriteCountEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UncoveredAddress_WriteCountEntry_DoNotUse();
  explicit constexpr UncoveredAddress_WriteCountEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UncoveredAddress_WriteCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UncoveredAddress_WriteCountEntry_DoNotUse& other);
  static const UncoveredAddress_WriteCountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UncoveredAddress_WriteCountEntry_DoNotUse*>(&_UncoveredAddress_WriteCountEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UncoveredAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.UncoveredAddress) */ {
 public:
  inline UncoveredAddress() : UncoveredAddress(nullptr) {}
  ~UncoveredAddress() override;
  explicit constexpr UncoveredAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UncoveredAddress(const UncoveredAddress& from);
  UncoveredAddress(UncoveredAddress&& from) noexcept
    : UncoveredAddress() {
    *this = ::std::move(from);
  }

  inline UncoveredAddress& operator=(const UncoveredAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline UncoveredAddress& operator=(UncoveredAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UncoveredAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const UncoveredAddress* internal_default_instance() {
    return reinterpret_cast<const UncoveredAddress*>(
               &_UncoveredAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UncoveredAddress& a, UncoveredAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(UncoveredAddress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UncoveredAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UncoveredAddress* New() const final {
    return new UncoveredAddress();
  }

  UncoveredAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UncoveredAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UncoveredAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UncoveredAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UncoveredAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.UncoveredAddress";
  }
  protected:
  explicit UncoveredAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRightBranchAddressFieldNumber = 3,
    kInputFieldNumber = 22,
    kWriteAddressFieldNumber = 23,
    kInputStatusFieldNumber = 31,
    kWriteAddressStatusFieldNumber = 32,
    kTasksCountFieldNumber = 33,
    kWriteCountFieldNumber = 34,
    kRunTimeDateFieldNumber = 8,
    kConditionAddressFieldNumber = 1,
    kUncoveredAddressFieldNumber = 2,
    kNumberArriveBasicblocksFieldNumber = 4,
    kKindFieldNumber = 5,
    kNumberDominatorInstructionsFieldNumber = 6,
    kCountFieldNumber = 24,
  };
  // repeated uint32 right_branch_address = 3;
  int right_branch_address_size() const;
  private:
  int _internal_right_branch_address_size() const;
  public:
  void clear_right_branch_address();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_right_branch_address(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_right_branch_address() const;
  void _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_right_branch_address();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 right_branch_address(int index) const;
  void set_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      right_branch_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_right_branch_address();

  // map<string, uint32> input = 22;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_input();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_input();

  // map<uint32, .dra.writeAddressAttributes> write_address = 23;
  int write_address_size() const;
  private:
  int _internal_write_address_size() const;
  public:
  void clear_write_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
      _internal_write_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
      _internal_mutable_write_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
      write_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
      mutable_write_address();

  // map<string, .dra.Status> input_status = 31;
  int input_status_size() const;
  private:
  int _internal_input_status_size() const;
  public:
  void clear_input_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >&
      _internal_input_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >*
      _internal_mutable_input_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >&
      input_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >*
      mutable_input_status();

  // map<uint32, .dra.taskStatus> write_address_status = 32;
  int write_address_status_size() const;
  private:
  int _internal_write_address_status_size() const;
  public:
  void clear_write_address_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
      _internal_write_address_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
      _internal_mutable_write_address_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
      write_address_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
      mutable_write_address_status();

  // map<int32, uint32> tasks_count = 33;
  int tasks_count_size() const;
  private:
  int _internal_tasks_count_size() const;
  public:
  void clear_tasks_count();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tasks_count() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tasks_count();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tasks_count() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tasks_count();

  // map<int32, uint32> write_count = 34;
  int write_count_size() const;
  private:
  int _internal_write_count_size() const;
  public:
  void clear_write_count();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_write_count() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_write_count();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      write_count() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_write_count();

  // .dra.runTimeData run_time_date = 8;
  bool has_run_time_date() const;
  private:
  bool _internal_has_run_time_date() const;
  public:
  void clear_run_time_date();
  const ::dra::runTimeData& run_time_date() const;
  PROTOBUF_MUST_USE_RESULT ::dra::runTimeData* release_run_time_date();
  ::dra::runTimeData* mutable_run_time_date();
  void set_allocated_run_time_date(::dra::runTimeData* run_time_date);
  private:
  const ::dra::runTimeData& _internal_run_time_date() const;
  ::dra::runTimeData* _internal_mutable_run_time_date();
  public:
  void unsafe_arena_set_allocated_run_time_date(
      ::dra::runTimeData* run_time_date);
  ::dra::runTimeData* unsafe_arena_release_run_time_date();

  // uint32 condition_address = 1;
  void clear_condition_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_address() const;
  void set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_condition_address() const;
  void _internal_set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uncovered_address = 2;
  void clear_uncovered_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 uncovered_address() const;
  void set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uncovered_address() const;
  void _internal_set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_arrive_basicblocks = 4;
  void clear_number_arrive_basicblocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_arrive_basicblocks() const;
  void set_number_arrive_basicblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_arrive_basicblocks() const;
  void _internal_set_number_arrive_basicblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .dra.UncoveredAddressKind kind = 5;
  void clear_kind();
  ::dra::UncoveredAddressKind kind() const;
  void set_kind(::dra::UncoveredAddressKind value);
  private:
  ::dra::UncoveredAddressKind _internal_kind() const;
  void _internal_set_kind(::dra::UncoveredAddressKind value);
  public:

  // uint32 number_dominator_instructions = 6;
  void clear_number_dominator_instructions();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_dominator_instructions() const;
  void set_number_dominator_instructions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_dominator_instructions() const;
  void _internal_set_number_dominator_instructions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 24;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.UncoveredAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > right_branch_address_;
  mutable std::atomic<int> _right_branch_address_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UncoveredAddress_InputEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> input_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UncoveredAddress_WriteAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> write_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UncoveredAddress_InputStatusEntry_DoNotUse,
      std::string, ::dra::Status,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> input_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UncoveredAddress_WriteAddressStatusEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> write_address_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UncoveredAddress_TasksCountEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> tasks_count_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UncoveredAddress_WriteCountEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> write_count_;
  ::dra::runTimeData* run_time_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_arrive_basicblocks_;
  int kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_dominator_instructions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class Dependency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Dependency) */ {
 public:
  inline Dependency() : Dependency(nullptr) {}
  ~Dependency() override;
  explicit constexpr Dependency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dependency(const Dependency& from);
  Dependency(Dependency&& from) noexcept
    : Dependency() {
    *this = ::std::move(from);
  }

  inline Dependency& operator=(const Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dependency& operator=(Dependency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dependency& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dependency* internal_default_instance() {
    return reinterpret_cast<const Dependency*>(
               &_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Dependency& a, Dependency& b) {
    a.Swap(&b);
  }
  inline void Swap(Dependency* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dependency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dependency* New() const final {
    return new Dependency();
  }

  Dependency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dependency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dependency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Dependency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dependency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Dependency";
  }
  protected:
  explicit Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteAddressFieldNumber = 3,
    kInputFieldNumber = 1,
    kUncoveredAddressFieldNumber = 2,
  };
  // repeated .dra.WriteAddress write_address = 3;
  int write_address_size() const;
  private:
  int _internal_write_address_size() const;
  public:
  void clear_write_address();
  ::dra::WriteAddress* mutable_write_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >*
      mutable_write_address();
  private:
  const ::dra::WriteAddress& _internal_write_address(int index) const;
  ::dra::WriteAddress* _internal_add_write_address();
  public:
  const ::dra::WriteAddress& write_address(int index) const;
  ::dra::WriteAddress* add_write_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >&
      write_address() const;

  // .dra.Input input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::dra::Input& input() const;
  PROTOBUF_MUST_USE_RESULT ::dra::Input* release_input();
  ::dra::Input* mutable_input();
  void set_allocated_input(::dra::Input* input);
  private:
  const ::dra::Input& _internal_input() const;
  ::dra::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::dra::Input* input);
  ::dra::Input* unsafe_arena_release_input();

  // .dra.UncoveredAddress uncovered_address = 2;
  bool has_uncovered_address() const;
  private:
  bool _internal_has_uncovered_address() const;
  public:
  void clear_uncovered_address();
  const ::dra::UncoveredAddress& uncovered_address() const;
  PROTOBUF_MUST_USE_RESULT ::dra::UncoveredAddress* release_uncovered_address();
  ::dra::UncoveredAddress* mutable_uncovered_address();
  void set_allocated_uncovered_address(::dra::UncoveredAddress* uncovered_address);
  private:
  const ::dra::UncoveredAddress& _internal_uncovered_address() const;
  ::dra::UncoveredAddress* _internal_mutable_uncovered_address();
  public:
  void unsafe_arena_set_allocated_uncovered_address(
      ::dra::UncoveredAddress* uncovered_address);
  ::dra::UncoveredAddress* unsafe_arena_release_uncovered_address();

  // @@protoc_insertion_point(class_scope:dra.Dependency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress > write_address_;
  ::dra::Input* input_;
  ::dra::UncoveredAddress* uncovered_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class FileOperationsFunction_WriteAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileOperationsFunction_WriteAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileOperationsFunction_WriteAddressEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  FileOperationsFunction_WriteAddressEntry_DoNotUse();
  explicit constexpr FileOperationsFunction_WriteAddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FileOperationsFunction_WriteAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileOperationsFunction_WriteAddressEntry_DoNotUse& other);
  static const FileOperationsFunction_WriteAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileOperationsFunction_WriteAddressEntry_DoNotUse*>(&_FileOperationsFunction_WriteAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FileOperationsFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.FileOperationsFunction) */ {
 public:
  inline FileOperationsFunction() : FileOperationsFunction(nullptr) {}
  ~FileOperationsFunction() override;
  explicit constexpr FileOperationsFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileOperationsFunction(const FileOperationsFunction& from);
  FileOperationsFunction(FileOperationsFunction&& from) noexcept
    : FileOperationsFunction() {
    *this = ::std::move(from);
  }

  inline FileOperationsFunction& operator=(const FileOperationsFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOperationsFunction& operator=(FileOperationsFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileOperationsFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileOperationsFunction* internal_default_instance() {
    return reinterpret_cast<const FileOperationsFunction*>(
               &_FileOperationsFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FileOperationsFunction& a, FileOperationsFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(FileOperationsFunction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileOperationsFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileOperationsFunction* New() const final {
    return new FileOperationsFunction();
  }

  FileOperationsFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileOperationsFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileOperationsFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileOperationsFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileOperationsFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.FileOperationsFunction";
  }
  protected:
  explicit FileOperationsFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWriteAddressFieldNumber = 11,
    kNameFieldNumber = 1,
    kFileOperationsNameFieldNumber = 2,
    kRunTimeDateFieldNumber = 5,
    kCmdFieldNumber = 4,
    kKindFieldNumber = 3,
  };
  // map<uint32, uint32> write_address = 11;
  int write_address_size() const;
  private:
  int _internal_write_address_size() const;
  public:
  void clear_write_address();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_write_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_write_address();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      write_address() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_write_address();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string file_operations_name = 2;
  void clear_file_operations_name();
  const std::string& file_operations_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_operations_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_operations_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_operations_name();
  void set_allocated_file_operations_name(std::string* file_operations_name);
  private:
  const std::string& _internal_file_operations_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_operations_name(const std::string& value);
  std::string* _internal_mutable_file_operations_name();
  public:

  // .dra.runTimeData run_time_date = 5;
  bool has_run_time_date() const;
  private:
  bool _internal_has_run_time_date() const;
  public:
  void clear_run_time_date();
  const ::dra::runTimeData& run_time_date() const;
  PROTOBUF_MUST_USE_RESULT ::dra::runTimeData* release_run_time_date();
  ::dra::runTimeData* mutable_run_time_date();
  void set_allocated_run_time_date(::dra::runTimeData* run_time_date);
  private:
  const ::dra::runTimeData& _internal_run_time_date() const;
  ::dra::runTimeData* _internal_mutable_run_time_date();
  public:
  void unsafe_arena_set_allocated_run_time_date(
      ::dra::runTimeData* run_time_date);
  ::dra::runTimeData* unsafe_arena_release_run_time_date();

  // uint64 cmd = 4;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint64 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .dra.file_operations_kind kind = 3;
  void clear_kind();
  ::dra::file_operations_kind kind() const;
  void set_kind(::dra::file_operations_kind value);
  private:
  ::dra::file_operations_kind _internal_kind() const;
  void _internal_set_kind(::dra::file_operations_kind value);
  public:

  // @@protoc_insertion_point(class_scope:dra.FileOperationsFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FileOperationsFunction_WriteAddressEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> write_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_operations_name_;
  ::dra::runTimeData* run_time_date_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cmd_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class FileOperations_FileOperationsFunctionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileOperations_FileOperationsFunctionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileOperations_FileOperationsFunctionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FileOperations_FileOperationsFunctionEntry_DoNotUse();
  explicit constexpr FileOperations_FileOperationsFunctionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FileOperations_FileOperationsFunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileOperations_FileOperationsFunctionEntry_DoNotUse& other);
  static const FileOperations_FileOperationsFunctionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileOperations_FileOperationsFunctionEntry_DoNotUse*>(&_FileOperations_FileOperationsFunctionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FileOperations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.FileOperations) */ {
 public:
  inline FileOperations() : FileOperations(nullptr) {}
  ~FileOperations() override;
  explicit constexpr FileOperations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileOperations(const FileOperations& from);
  FileOperations(FileOperations&& from) noexcept
    : FileOperations() {
    *this = ::std::move(from);
  }

  inline FileOperations& operator=(const FileOperations& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOperations& operator=(FileOperations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileOperations& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileOperations* internal_default_instance() {
    return reinterpret_cast<const FileOperations*>(
               &_FileOperations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FileOperations& a, FileOperations& b) {
    a.Swap(&b);
  }
  inline void Swap(FileOperations* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileOperations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileOperations* New() const final {
    return new FileOperations();
  }

  FileOperations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileOperations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileOperations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileOperations& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileOperations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.FileOperations";
  }
  protected:
  explicit FileOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFileOperationsFunctionFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
  int file_operations_function_size() const;
  private:
  int _internal_file_operations_function_size() const;
  public:
  void clear_file_operations_function();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >&
      _internal_file_operations_function() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >*
      _internal_mutable_file_operations_function();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >&
      file_operations_function() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >*
      mutable_file_operations_function();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dra.FileOperations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FileOperations_FileOperationsFunctionEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> file_operations_function_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class address_AddrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<address_AddrEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<address_AddrEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  address_AddrEntry_DoNotUse();
  explicit constexpr address_AddrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit address_AddrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const address_AddrEntry_DoNotUse& other);
  static const address_AddrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const address_AddrEntry_DoNotUse*>(&_address_AddrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.address.AddrEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dra.address.AddrEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.address) */ {
 public:
  inline address() : address(nullptr) {}
  ~address() override;
  explicit constexpr address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  address(const address& from);
  address(address&& from) noexcept
    : address() {
    *this = ::std::move(from);
  }

  inline address& operator=(const address& from) {
    CopyFrom(from);
    return *this;
  }
  inline address& operator=(address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const address& default_instance() {
    return *internal_default_instance();
  }
  static inline const address* internal_default_instance() {
    return reinterpret_cast<const address*>(
               &_address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(address& a, address& b) {
    a.Swap(&b);
  }
  inline void Swap(address* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline address* New() const final {
    return new address();
  }

  address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const address& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.address";
  }
  protected:
  explicit address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> addr = 2;
  int addr_size() const;
  private:
  int _internal_addr_size() const;
  public:
  void clear_addr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_addr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_addr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      addr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_addr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dra.address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      address_AddrEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class Condition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Condition) */ {
 public:
  inline Condition() : Condition(nullptr) {}
  ~Condition() override;
  explicit constexpr Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return new Condition();
  }

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Condition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Condition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Condition";
  }
  protected:
  explicit Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightBranchAddressFieldNumber = 7,
    kSyzkallerRightBranchAddressFieldNumber = 8,
    kConditionAddressFieldNumber = 1,
    kUncoveredAddressFieldNumber = 3,
    kSyzkallerConditionAddressFieldNumber = 2,
    kSyzkallerUncoveredAddressFieldNumber = 4,
    kSuccessorFieldNumber = 6,
    kIdxFieldNumber = 5,
  };
  // repeated uint64 right_branch_address = 7;
  int right_branch_address_size() const;
  private:
  int _internal_right_branch_address_size() const;
  public:
  void clear_right_branch_address();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_right_branch_address(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_right_branch_address() const;
  void _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_right_branch_address();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 right_branch_address(int index) const;
  void set_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      right_branch_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_right_branch_address();

  // repeated uint32 syzkaller_right_branch_address = 8;
  int syzkaller_right_branch_address_size() const;
  private:
  int _internal_syzkaller_right_branch_address_size() const;
  public:
  void clear_syzkaller_right_branch_address();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_syzkaller_right_branch_address(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_syzkaller_right_branch_address() const;
  void _internal_add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_syzkaller_right_branch_address();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 syzkaller_right_branch_address(int index) const;
  void set_syzkaller_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      syzkaller_right_branch_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_syzkaller_right_branch_address();

  // uint64 condition_address = 1;
  void clear_condition_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 condition_address() const;
  void set_condition_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_condition_address() const;
  void _internal_set_condition_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 uncovered_address = 3;
  void clear_uncovered_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 uncovered_address() const;
  void set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uncovered_address() const;
  void _internal_set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 syzkaller_condition_address = 2;
  void clear_syzkaller_condition_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 syzkaller_condition_address() const;
  void set_syzkaller_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_syzkaller_condition_address() const;
  void _internal_set_syzkaller_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 syzkaller_uncovered_address = 4;
  void clear_syzkaller_uncovered_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 syzkaller_uncovered_address() const;
  void set_syzkaller_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_syzkaller_uncovered_address() const;
  void _internal_set_syzkaller_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 successor = 6;
  void clear_successor();
  ::PROTOBUF_NAMESPACE_ID::uint64 successor() const;
  void set_successor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_successor() const;
  void _internal_set_successor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 idx = 5;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dra.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > right_branch_address_;
  mutable std::atomic<int> _right_branch_address_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > syzkaller_right_branch_address_;
  mutable std::atomic<int> _syzkaller_right_branch_address_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 condition_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 syzkaller_condition_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 syzkaller_uncovered_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 successor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class Conditions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.Conditions) */ {
 public:
  inline Conditions() : Conditions(nullptr) {}
  ~Conditions() override;
  explicit constexpr Conditions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Conditions(const Conditions& from);
  Conditions(Conditions&& from) noexcept
    : Conditions() {
    *this = ::std::move(from);
  }

  inline Conditions& operator=(const Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conditions& operator=(Conditions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Conditions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conditions* internal_default_instance() {
    return reinterpret_cast<const Conditions*>(
               &_Conditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Conditions& a, Conditions& b) {
    a.Swap(&b);
  }
  inline void Swap(Conditions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conditions* New() const final {
    return new Conditions();
  }

  Conditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conditions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Conditions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Conditions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.Conditions";
  }
  protected:
  explicit Conditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 10,
  };
  // repeated .dra.Condition condition = 10;
  int condition_size() const;
  private:
  int _internal_condition_size() const;
  public:
  void clear_condition();
  ::dra::Condition* mutable_condition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Condition >*
      mutable_condition();
  private:
  const ::dra::Condition& _internal_condition(int index) const;
  ::dra::Condition* _internal_add_condition();
  public:
  const ::dra::Condition& condition(int index) const;
  ::dra::Condition* add_condition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Condition >&
      condition() const;

  // @@protoc_insertion_point(class_scope:dra.Conditions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Condition > condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// -------------------------------------------------------------------

class WriteAddresses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dra.WriteAddresses) */ {
 public:
  inline WriteAddresses() : WriteAddresses(nullptr) {}
  ~WriteAddresses() override;
  explicit constexpr WriteAddresses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteAddresses(const WriteAddresses& from);
  WriteAddresses(WriteAddresses&& from) noexcept
    : WriteAddresses() {
    *this = ::std::move(from);
  }

  inline WriteAddresses& operator=(const WriteAddresses& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteAddresses& operator=(WriteAddresses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteAddresses& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteAddresses* internal_default_instance() {
    return reinterpret_cast<const WriteAddresses*>(
               &_WriteAddresses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WriteAddresses& a, WriteAddresses& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteAddresses* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteAddresses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteAddresses* New() const final {
    return new WriteAddresses();
  }

  WriteAddresses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteAddresses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteAddresses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteAddresses& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteAddresses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dra.WriteAddresses";
  }
  protected:
  explicit WriteAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteAddressFieldNumber = 4,
    kConditionFieldNumber = 1,
  };
  // repeated .dra.WriteAddress write_address = 4;
  int write_address_size() const;
  private:
  int _internal_write_address_size() const;
  public:
  void clear_write_address();
  ::dra::WriteAddress* mutable_write_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >*
      mutable_write_address();
  private:
  const ::dra::WriteAddress& _internal_write_address(int index) const;
  ::dra::WriteAddress* _internal_add_write_address();
  public:
  const ::dra::WriteAddress& write_address(int index) const;
  ::dra::WriteAddress* add_write_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >&
      write_address() const;

  // .dra.Condition condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::dra::Condition& condition() const;
  PROTOBUF_MUST_USE_RESULT ::dra::Condition* release_condition();
  ::dra::Condition* mutable_condition();
  void set_allocated_condition(::dra::Condition* condition);
  private:
  const ::dra::Condition& _internal_condition() const;
  ::dra::Condition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::dra::Condition* condition);
  ::dra::Condition* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:dra.WriteAddresses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress > write_address_;
  ::dra::Condition* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dependency_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WriteAddress

// uint32 write_address = 2;
inline void WriteAddress::clear_write_address() {
  write_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriteAddress::_internal_write_address() const {
  return write_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriteAddress::write_address() const {
  // @@protoc_insertion_point(field_get:dra.WriteAddress.write_address)
  return _internal_write_address();
}
inline void WriteAddress::_internal_set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_address_ = value;
}
inline void WriteAddress::set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_address(value);
  // @@protoc_insertion_point(field_set:dra.WriteAddress.write_address)
}

// .dra.WriteStatementKind kind = 4;
inline void WriteAddress::clear_kind() {
  kind_ = 0;
}
inline ::dra::WriteStatementKind WriteAddress::_internal_kind() const {
  return static_cast< ::dra::WriteStatementKind >(kind_);
}
inline ::dra::WriteStatementKind WriteAddress::kind() const {
  // @@protoc_insertion_point(field_get:dra.WriteAddress.kind)
  return _internal_kind();
}
inline void WriteAddress::_internal_set_kind(::dra::WriteStatementKind value) {
  
  kind_ = value;
}
inline void WriteAddress::set_kind(::dra::WriteStatementKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:dra.WriteAddress.kind)
}

// map<uint32, .dra.writeAddressAttributes> uncovered_address = 23;
inline int WriteAddress::_internal_uncovered_address_size() const {
  return uncovered_address_.size();
}
inline int WriteAddress::uncovered_address_size() const {
  return _internal_uncovered_address_size();
}
inline void WriteAddress::clear_uncovered_address() {
  uncovered_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
WriteAddress::_internal_uncovered_address() const {
  return uncovered_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
WriteAddress::uncovered_address() const {
  // @@protoc_insertion_point(field_map:dra.WriteAddress.uncovered_address)
  return _internal_uncovered_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
WriteAddress::_internal_mutable_uncovered_address() {
  return uncovered_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
WriteAddress::mutable_uncovered_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.WriteAddress.uncovered_address)
  return _internal_mutable_uncovered_address();
}

// map<string, uint32> file_operations_function = 24;
inline int WriteAddress::_internal_file_operations_function_size() const {
  return file_operations_function_.size();
}
inline int WriteAddress::file_operations_function_size() const {
  return _internal_file_operations_function_size();
}
inline void WriteAddress::clear_file_operations_function() {
  file_operations_function_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
WriteAddress::_internal_file_operations_function() const {
  return file_operations_function_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
WriteAddress::file_operations_function() const {
  // @@protoc_insertion_point(field_map:dra.WriteAddress.file_operations_function)
  return _internal_file_operations_function();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
WriteAddress::_internal_mutable_file_operations_function() {
  return file_operations_function_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
WriteAddress::mutable_file_operations_function() {
  // @@protoc_insertion_point(field_mutable_map:dra.WriteAddress.file_operations_function)
  return _internal_mutable_file_operations_function();
}

// map<string, uint32> input = 25;
inline int WriteAddress::_internal_input_size() const {
  return input_.size();
}
inline int WriteAddress::input_size() const {
  return _internal_input_size();
}
inline void WriteAddress::clear_input() {
  input_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
WriteAddress::_internal_input() const {
  return input_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
WriteAddress::input() const {
  // @@protoc_insertion_point(field_map:dra.WriteAddress.input)
  return _internal_input();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
WriteAddress::_internal_mutable_input() {
  return input_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
WriteAddress::mutable_input() {
  // @@protoc_insertion_point(field_mutable_map:dra.WriteAddress.input)
  return _internal_mutable_input();
}

// .dra.runTimeData run_time_date = 11;
inline bool WriteAddress::_internal_has_run_time_date() const {
  return this != internal_default_instance() && run_time_date_ != nullptr;
}
inline bool WriteAddress::has_run_time_date() const {
  return _internal_has_run_time_date();
}
inline const ::dra::runTimeData& WriteAddress::_internal_run_time_date() const {
  const ::dra::runTimeData* p = run_time_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::dra::runTimeData&>(
      ::dra::_runTimeData_default_instance_);
}
inline const ::dra::runTimeData& WriteAddress::run_time_date() const {
  // @@protoc_insertion_point(field_get:dra.WriteAddress.run_time_date)
  return _internal_run_time_date();
}
inline void WriteAddress::unsafe_arena_set_allocated_run_time_date(
    ::dra::runTimeData* run_time_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date_);
  }
  run_time_date_ = run_time_date;
  if (run_time_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dra.WriteAddress.run_time_date)
}
inline ::dra::runTimeData* WriteAddress::release_run_time_date() {
  
  ::dra::runTimeData* temp = run_time_date_;
  run_time_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dra::runTimeData* WriteAddress::unsafe_arena_release_run_time_date() {
  // @@protoc_insertion_point(field_release:dra.WriteAddress.run_time_date)
  
  ::dra::runTimeData* temp = run_time_date_;
  run_time_date_ = nullptr;
  return temp;
}
inline ::dra::runTimeData* WriteAddress::_internal_mutable_run_time_date() {
  
  if (run_time_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::runTimeData>(GetArenaForAllocation());
    run_time_date_ = p;
  }
  return run_time_date_;
}
inline ::dra::runTimeData* WriteAddress::mutable_run_time_date() {
  ::dra::runTimeData* _msg = _internal_mutable_run_time_date();
  // @@protoc_insertion_point(field_mutable:dra.WriteAddress.run_time_date)
  return _msg;
}
inline void WriteAddress::set_allocated_run_time_date(::dra::runTimeData* run_time_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date_);
  }
  if (run_time_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date));
    if (message_arena != submessage_arena) {
      run_time_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_time_date, submessage_arena);
    }
    
  } else {
    
  }
  run_time_date_ = run_time_date;
  // @@protoc_insertion_point(field_set_allocated:dra.WriteAddress.run_time_date)
}

// -------------------------------------------------------------------

// writeAddressAttributes

// uint32 write_address = 2;
inline void writeAddressAttributes::clear_write_address() {
  write_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 writeAddressAttributes::_internal_write_address() const {
  return write_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 writeAddressAttributes::write_address() const {
  // @@protoc_insertion_point(field_get:dra.writeAddressAttributes.write_address)
  return _internal_write_address();
}
inline void writeAddressAttributes::_internal_set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_address_ = value;
}
inline void writeAddressAttributes::set_write_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_address(value);
  // @@protoc_insertion_point(field_set:dra.writeAddressAttributes.write_address)
}

// uint32 repeat = 7;
inline void writeAddressAttributes::clear_repeat() {
  repeat_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 writeAddressAttributes::_internal_repeat() const {
  return repeat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 writeAddressAttributes::repeat() const {
  // @@protoc_insertion_point(field_get:dra.writeAddressAttributes.repeat)
  return _internal_repeat();
}
inline void writeAddressAttributes::_internal_set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  repeat_ = value;
}
inline void writeAddressAttributes::set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:dra.writeAddressAttributes.repeat)
}

// uint32 prio = 6;
inline void writeAddressAttributes::clear_prio() {
  prio_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 writeAddressAttributes::_internal_prio() const {
  return prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 writeAddressAttributes::prio() const {
  // @@protoc_insertion_point(field_get:dra.writeAddressAttributes.prio)
  return _internal_prio();
}
inline void writeAddressAttributes::_internal_set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prio_ = value;
}
inline void writeAddressAttributes::set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:dra.writeAddressAttributes.prio)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Status

// map<uint32, .dra.taskStatus> status = 1;
inline int Status::_internal_status_size() const {
  return status_.size();
}
inline int Status::status_size() const {
  return _internal_status_size();
}
inline void Status::clear_status() {
  status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
Status::_internal_status() const {
  return status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
Status::status() const {
  // @@protoc_insertion_point(field_map:dra.Status.status)
  return _internal_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
Status::_internal_mutable_status() {
  return status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
Status::mutable_status() {
  // @@protoc_insertion_point(field_mutable_map:dra.Status.status)
  return _internal_mutable_status();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UncoveredAddress

// uint32 condition_address = 1;
inline void UncoveredAddress::clear_condition_address() {
  condition_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::_internal_condition_address() const {
  return condition_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::condition_address() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.condition_address)
  return _internal_condition_address();
}
inline void UncoveredAddress::_internal_set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  condition_address_ = value;
}
inline void UncoveredAddress::set_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_condition_address(value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.condition_address)
}

// uint32 uncovered_address = 2;
inline void UncoveredAddress::clear_uncovered_address() {
  uncovered_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::_internal_uncovered_address() const {
  return uncovered_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::uncovered_address() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.uncovered_address)
  return _internal_uncovered_address();
}
inline void UncoveredAddress::_internal_set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uncovered_address_ = value;
}
inline void UncoveredAddress::set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uncovered_address(value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.uncovered_address)
}

// repeated uint32 right_branch_address = 3;
inline int UncoveredAddress::_internal_right_branch_address_size() const {
  return right_branch_address_.size();
}
inline int UncoveredAddress::right_branch_address_size() const {
  return _internal_right_branch_address_size();
}
inline void UncoveredAddress::clear_right_branch_address() {
  right_branch_address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::_internal_right_branch_address(int index) const {
  return right_branch_address_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::right_branch_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.right_branch_address)
  return _internal_right_branch_address(index);
}
inline void UncoveredAddress::set_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  right_branch_address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.right_branch_address)
}
inline void UncoveredAddress::_internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  right_branch_address_.Add(value);
}
inline void UncoveredAddress::add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_right_branch_address(value);
  // @@protoc_insertion_point(field_add:dra.UncoveredAddress.right_branch_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::_internal_right_branch_address() const {
  return right_branch_address_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::right_branch_address() const {
  // @@protoc_insertion_point(field_list:dra.UncoveredAddress.right_branch_address)
  return _internal_right_branch_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::_internal_mutable_right_branch_address() {
  return &right_branch_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::mutable_right_branch_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.UncoveredAddress.right_branch_address)
  return _internal_mutable_right_branch_address();
}

// uint32 number_arrive_basicblocks = 4;
inline void UncoveredAddress::clear_number_arrive_basicblocks() {
  number_arrive_basicblocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::_internal_number_arrive_basicblocks() const {
  return number_arrive_basicblocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::number_arrive_basicblocks() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.number_arrive_basicblocks)
  return _internal_number_arrive_basicblocks();
}
inline void UncoveredAddress::_internal_set_number_arrive_basicblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_arrive_basicblocks_ = value;
}
inline void UncoveredAddress::set_number_arrive_basicblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_arrive_basicblocks(value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.number_arrive_basicblocks)
}

// .dra.UncoveredAddressKind kind = 5;
inline void UncoveredAddress::clear_kind() {
  kind_ = 0;
}
inline ::dra::UncoveredAddressKind UncoveredAddress::_internal_kind() const {
  return static_cast< ::dra::UncoveredAddressKind >(kind_);
}
inline ::dra::UncoveredAddressKind UncoveredAddress::kind() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.kind)
  return _internal_kind();
}
inline void UncoveredAddress::_internal_set_kind(::dra::UncoveredAddressKind value) {
  
  kind_ = value;
}
inline void UncoveredAddress::set_kind(::dra::UncoveredAddressKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.kind)
}

// uint32 number_dominator_instructions = 6;
inline void UncoveredAddress::clear_number_dominator_instructions() {
  number_dominator_instructions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::_internal_number_dominator_instructions() const {
  return number_dominator_instructions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::number_dominator_instructions() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.number_dominator_instructions)
  return _internal_number_dominator_instructions();
}
inline void UncoveredAddress::_internal_set_number_dominator_instructions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_dominator_instructions_ = value;
}
inline void UncoveredAddress::set_number_dominator_instructions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_dominator_instructions(value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.number_dominator_instructions)
}

// map<string, uint32> input = 22;
inline int UncoveredAddress::_internal_input_size() const {
  return input_.size();
}
inline int UncoveredAddress::input_size() const {
  return _internal_input_size();
}
inline void UncoveredAddress::clear_input() {
  input_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::_internal_input() const {
  return input_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::input() const {
  // @@protoc_insertion_point(field_map:dra.UncoveredAddress.input)
  return _internal_input();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::_internal_mutable_input() {
  return input_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::mutable_input() {
  // @@protoc_insertion_point(field_mutable_map:dra.UncoveredAddress.input)
  return _internal_mutable_input();
}

// map<uint32, .dra.writeAddressAttributes> write_address = 23;
inline int UncoveredAddress::_internal_write_address_size() const {
  return write_address_.size();
}
inline int UncoveredAddress::write_address_size() const {
  return _internal_write_address_size();
}
inline void UncoveredAddress::clear_write_address() {
  write_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
UncoveredAddress::_internal_write_address() const {
  return write_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >&
UncoveredAddress::write_address() const {
  // @@protoc_insertion_point(field_map:dra.UncoveredAddress.write_address)
  return _internal_write_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
UncoveredAddress::_internal_mutable_write_address() {
  return write_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::writeAddressAttributes >*
UncoveredAddress::mutable_write_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.UncoveredAddress.write_address)
  return _internal_mutable_write_address();
}

// uint32 count = 24;
inline void UncoveredAddress::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UncoveredAddress::count() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.count)
  return _internal_count();
}
inline void UncoveredAddress::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void UncoveredAddress::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:dra.UncoveredAddress.count)
}

// .dra.runTimeData run_time_date = 8;
inline bool UncoveredAddress::_internal_has_run_time_date() const {
  return this != internal_default_instance() && run_time_date_ != nullptr;
}
inline bool UncoveredAddress::has_run_time_date() const {
  return _internal_has_run_time_date();
}
inline const ::dra::runTimeData& UncoveredAddress::_internal_run_time_date() const {
  const ::dra::runTimeData* p = run_time_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::dra::runTimeData&>(
      ::dra::_runTimeData_default_instance_);
}
inline const ::dra::runTimeData& UncoveredAddress::run_time_date() const {
  // @@protoc_insertion_point(field_get:dra.UncoveredAddress.run_time_date)
  return _internal_run_time_date();
}
inline void UncoveredAddress::unsafe_arena_set_allocated_run_time_date(
    ::dra::runTimeData* run_time_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date_);
  }
  run_time_date_ = run_time_date;
  if (run_time_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dra.UncoveredAddress.run_time_date)
}
inline ::dra::runTimeData* UncoveredAddress::release_run_time_date() {
  
  ::dra::runTimeData* temp = run_time_date_;
  run_time_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dra::runTimeData* UncoveredAddress::unsafe_arena_release_run_time_date() {
  // @@protoc_insertion_point(field_release:dra.UncoveredAddress.run_time_date)
  
  ::dra::runTimeData* temp = run_time_date_;
  run_time_date_ = nullptr;
  return temp;
}
inline ::dra::runTimeData* UncoveredAddress::_internal_mutable_run_time_date() {
  
  if (run_time_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::runTimeData>(GetArenaForAllocation());
    run_time_date_ = p;
  }
  return run_time_date_;
}
inline ::dra::runTimeData* UncoveredAddress::mutable_run_time_date() {
  ::dra::runTimeData* _msg = _internal_mutable_run_time_date();
  // @@protoc_insertion_point(field_mutable:dra.UncoveredAddress.run_time_date)
  return _msg;
}
inline void UncoveredAddress::set_allocated_run_time_date(::dra::runTimeData* run_time_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date_);
  }
  if (run_time_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date));
    if (message_arena != submessage_arena) {
      run_time_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_time_date, submessage_arena);
    }
    
  } else {
    
  }
  run_time_date_ = run_time_date;
  // @@protoc_insertion_point(field_set_allocated:dra.UncoveredAddress.run_time_date)
}

// map<string, .dra.Status> input_status = 31;
inline int UncoveredAddress::_internal_input_status_size() const {
  return input_status_.size();
}
inline int UncoveredAddress::input_status_size() const {
  return _internal_input_status_size();
}
inline void UncoveredAddress::clear_input_status() {
  input_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >&
UncoveredAddress::_internal_input_status() const {
  return input_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >&
UncoveredAddress::input_status() const {
  // @@protoc_insertion_point(field_map:dra.UncoveredAddress.input_status)
  return _internal_input_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >*
UncoveredAddress::_internal_mutable_input_status() {
  return input_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Status >*
UncoveredAddress::mutable_input_status() {
  // @@protoc_insertion_point(field_mutable_map:dra.UncoveredAddress.input_status)
  return _internal_mutable_input_status();
}

// map<uint32, .dra.taskStatus> write_address_status = 32;
inline int UncoveredAddress::_internal_write_address_status_size() const {
  return write_address_status_.size();
}
inline int UncoveredAddress::write_address_status_size() const {
  return _internal_write_address_status_size();
}
inline void UncoveredAddress::clear_write_address_status() {
  write_address_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
UncoveredAddress::_internal_write_address_status() const {
  return write_address_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >&
UncoveredAddress::write_address_status() const {
  // @@protoc_insertion_point(field_map:dra.UncoveredAddress.write_address_status)
  return _internal_write_address_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
UncoveredAddress::_internal_mutable_write_address_status() {
  return write_address_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::taskStatus >*
UncoveredAddress::mutable_write_address_status() {
  // @@protoc_insertion_point(field_mutable_map:dra.UncoveredAddress.write_address_status)
  return _internal_mutable_write_address_status();
}

// map<int32, uint32> tasks_count = 33;
inline int UncoveredAddress::_internal_tasks_count_size() const {
  return tasks_count_.size();
}
inline int UncoveredAddress::tasks_count_size() const {
  return _internal_tasks_count_size();
}
inline void UncoveredAddress::clear_tasks_count() {
  tasks_count_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::_internal_tasks_count() const {
  return tasks_count_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::tasks_count() const {
  // @@protoc_insertion_point(field_map:dra.UncoveredAddress.tasks_count)
  return _internal_tasks_count();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::_internal_mutable_tasks_count() {
  return tasks_count_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::mutable_tasks_count() {
  // @@protoc_insertion_point(field_mutable_map:dra.UncoveredAddress.tasks_count)
  return _internal_mutable_tasks_count();
}

// map<int32, uint32> write_count = 34;
inline int UncoveredAddress::_internal_write_count_size() const {
  return write_count_.size();
}
inline int UncoveredAddress::write_count_size() const {
  return _internal_write_count_size();
}
inline void UncoveredAddress::clear_write_count() {
  write_count_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::_internal_write_count() const {
  return write_count_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UncoveredAddress::write_count() const {
  // @@protoc_insertion_point(field_map:dra.UncoveredAddress.write_count)
  return _internal_write_count();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::_internal_mutable_write_count() {
  return write_count_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UncoveredAddress::mutable_write_count() {
  // @@protoc_insertion_point(field_mutable_map:dra.UncoveredAddress.write_count)
  return _internal_mutable_write_count();
}

// -------------------------------------------------------------------

// Dependency

// .dra.Input input = 1;
inline bool Dependency::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Dependency::has_input() const {
  return _internal_has_input();
}
inline const ::dra::Input& Dependency::_internal_input() const {
  const ::dra::Input* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::dra::Input&>(
      ::dra::_Input_default_instance_);
}
inline const ::dra::Input& Dependency::input() const {
  // @@protoc_insertion_point(field_get:dra.Dependency.input)
  return _internal_input();
}
inline void Dependency::unsafe_arena_set_allocated_input(
    ::dra::Input* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dra.Dependency.input)
}
inline ::dra::Input* Dependency::release_input() {
  
  ::dra::Input* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dra::Input* Dependency::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:dra.Dependency.input)
  
  ::dra::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::dra::Input* Dependency::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::Input>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::dra::Input* Dependency::mutable_input() {
  ::dra::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:dra.Dependency.input)
  return _msg;
}
inline void Dependency::set_allocated_input(::dra::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input));
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:dra.Dependency.input)
}

// .dra.UncoveredAddress uncovered_address = 2;
inline bool Dependency::_internal_has_uncovered_address() const {
  return this != internal_default_instance() && uncovered_address_ != nullptr;
}
inline bool Dependency::has_uncovered_address() const {
  return _internal_has_uncovered_address();
}
inline void Dependency::clear_uncovered_address() {
  if (GetArenaForAllocation() == nullptr && uncovered_address_ != nullptr) {
    delete uncovered_address_;
  }
  uncovered_address_ = nullptr;
}
inline const ::dra::UncoveredAddress& Dependency::_internal_uncovered_address() const {
  const ::dra::UncoveredAddress* p = uncovered_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::dra::UncoveredAddress&>(
      ::dra::_UncoveredAddress_default_instance_);
}
inline const ::dra::UncoveredAddress& Dependency::uncovered_address() const {
  // @@protoc_insertion_point(field_get:dra.Dependency.uncovered_address)
  return _internal_uncovered_address();
}
inline void Dependency::unsafe_arena_set_allocated_uncovered_address(
    ::dra::UncoveredAddress* uncovered_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uncovered_address_);
  }
  uncovered_address_ = uncovered_address;
  if (uncovered_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dra.Dependency.uncovered_address)
}
inline ::dra::UncoveredAddress* Dependency::release_uncovered_address() {
  
  ::dra::UncoveredAddress* temp = uncovered_address_;
  uncovered_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dra::UncoveredAddress* Dependency::unsafe_arena_release_uncovered_address() {
  // @@protoc_insertion_point(field_release:dra.Dependency.uncovered_address)
  
  ::dra::UncoveredAddress* temp = uncovered_address_;
  uncovered_address_ = nullptr;
  return temp;
}
inline ::dra::UncoveredAddress* Dependency::_internal_mutable_uncovered_address() {
  
  if (uncovered_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::UncoveredAddress>(GetArenaForAllocation());
    uncovered_address_ = p;
  }
  return uncovered_address_;
}
inline ::dra::UncoveredAddress* Dependency::mutable_uncovered_address() {
  ::dra::UncoveredAddress* _msg = _internal_mutable_uncovered_address();
  // @@protoc_insertion_point(field_mutable:dra.Dependency.uncovered_address)
  return _msg;
}
inline void Dependency::set_allocated_uncovered_address(::dra::UncoveredAddress* uncovered_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uncovered_address_;
  }
  if (uncovered_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dra::UncoveredAddress>::GetOwningArena(uncovered_address);
    if (message_arena != submessage_arena) {
      uncovered_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uncovered_address, submessage_arena);
    }
    
  } else {
    
  }
  uncovered_address_ = uncovered_address;
  // @@protoc_insertion_point(field_set_allocated:dra.Dependency.uncovered_address)
}

// repeated .dra.WriteAddress write_address = 3;
inline int Dependency::_internal_write_address_size() const {
  return write_address_.size();
}
inline int Dependency::write_address_size() const {
  return _internal_write_address_size();
}
inline void Dependency::clear_write_address() {
  write_address_.Clear();
}
inline ::dra::WriteAddress* Dependency::mutable_write_address(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Dependency.write_address)
  return write_address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >*
Dependency::mutable_write_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.Dependency.write_address)
  return &write_address_;
}
inline const ::dra::WriteAddress& Dependency::_internal_write_address(int index) const {
  return write_address_.Get(index);
}
inline const ::dra::WriteAddress& Dependency::write_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.Dependency.write_address)
  return _internal_write_address(index);
}
inline ::dra::WriteAddress* Dependency::_internal_add_write_address() {
  return write_address_.Add();
}
inline ::dra::WriteAddress* Dependency::add_write_address() {
  ::dra::WriteAddress* _add = _internal_add_write_address();
  // @@protoc_insertion_point(field_add:dra.Dependency.write_address)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >&
Dependency::write_address() const {
  // @@protoc_insertion_point(field_list:dra.Dependency.write_address)
  return write_address_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileOperationsFunction

// string name = 1;
inline void FileOperationsFunction::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileOperationsFunction::name() const {
  // @@protoc_insertion_point(field_get:dra.FileOperationsFunction.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileOperationsFunction::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.FileOperationsFunction.name)
}
inline std::string* FileOperationsFunction::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dra.FileOperationsFunction.name)
  return _s;
}
inline const std::string& FileOperationsFunction::_internal_name() const {
  return name_.Get();
}
inline void FileOperationsFunction::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileOperationsFunction::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileOperationsFunction::release_name() {
  // @@protoc_insertion_point(field_release:dra.FileOperationsFunction.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileOperationsFunction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.FileOperationsFunction.name)
}

// string file_operations_name = 2;
inline void FileOperationsFunction::clear_file_operations_name() {
  file_operations_name_.ClearToEmpty();
}
inline const std::string& FileOperationsFunction::file_operations_name() const {
  // @@protoc_insertion_point(field_get:dra.FileOperationsFunction.file_operations_name)
  return _internal_file_operations_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileOperationsFunction::set_file_operations_name(ArgT0&& arg0, ArgT... args) {
 
 file_operations_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.FileOperationsFunction.file_operations_name)
}
inline std::string* FileOperationsFunction::mutable_file_operations_name() {
  std::string* _s = _internal_mutable_file_operations_name();
  // @@protoc_insertion_point(field_mutable:dra.FileOperationsFunction.file_operations_name)
  return _s;
}
inline const std::string& FileOperationsFunction::_internal_file_operations_name() const {
  return file_operations_name_.Get();
}
inline void FileOperationsFunction::_internal_set_file_operations_name(const std::string& value) {
  
  file_operations_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileOperationsFunction::_internal_mutable_file_operations_name() {
  
  return file_operations_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileOperationsFunction::release_file_operations_name() {
  // @@protoc_insertion_point(field_release:dra.FileOperationsFunction.file_operations_name)
  return file_operations_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileOperationsFunction::set_allocated_file_operations_name(std::string* file_operations_name) {
  if (file_operations_name != nullptr) {
    
  } else {
    
  }
  file_operations_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_operations_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.FileOperationsFunction.file_operations_name)
}

// .dra.file_operations_kind kind = 3;
inline void FileOperationsFunction::clear_kind() {
  kind_ = 0;
}
inline ::dra::file_operations_kind FileOperationsFunction::_internal_kind() const {
  return static_cast< ::dra::file_operations_kind >(kind_);
}
inline ::dra::file_operations_kind FileOperationsFunction::kind() const {
  // @@protoc_insertion_point(field_get:dra.FileOperationsFunction.kind)
  return _internal_kind();
}
inline void FileOperationsFunction::_internal_set_kind(::dra::file_operations_kind value) {
  
  kind_ = value;
}
inline void FileOperationsFunction::set_kind(::dra::file_operations_kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:dra.FileOperationsFunction.kind)
}

// uint64 cmd = 4;
inline void FileOperationsFunction::clear_cmd() {
  cmd_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileOperationsFunction::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileOperationsFunction::cmd() const {
  // @@protoc_insertion_point(field_get:dra.FileOperationsFunction.cmd)
  return _internal_cmd();
}
inline void FileOperationsFunction::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cmd_ = value;
}
inline void FileOperationsFunction::set_cmd(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:dra.FileOperationsFunction.cmd)
}

// .dra.runTimeData run_time_date = 5;
inline bool FileOperationsFunction::_internal_has_run_time_date() const {
  return this != internal_default_instance() && run_time_date_ != nullptr;
}
inline bool FileOperationsFunction::has_run_time_date() const {
  return _internal_has_run_time_date();
}
inline const ::dra::runTimeData& FileOperationsFunction::_internal_run_time_date() const {
  const ::dra::runTimeData* p = run_time_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::dra::runTimeData&>(
      ::dra::_runTimeData_default_instance_);
}
inline const ::dra::runTimeData& FileOperationsFunction::run_time_date() const {
  // @@protoc_insertion_point(field_get:dra.FileOperationsFunction.run_time_date)
  return _internal_run_time_date();
}
inline void FileOperationsFunction::unsafe_arena_set_allocated_run_time_date(
    ::dra::runTimeData* run_time_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date_);
  }
  run_time_date_ = run_time_date;
  if (run_time_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dra.FileOperationsFunction.run_time_date)
}
inline ::dra::runTimeData* FileOperationsFunction::release_run_time_date() {
  
  ::dra::runTimeData* temp = run_time_date_;
  run_time_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dra::runTimeData* FileOperationsFunction::unsafe_arena_release_run_time_date() {
  // @@protoc_insertion_point(field_release:dra.FileOperationsFunction.run_time_date)
  
  ::dra::runTimeData* temp = run_time_date_;
  run_time_date_ = nullptr;
  return temp;
}
inline ::dra::runTimeData* FileOperationsFunction::_internal_mutable_run_time_date() {
  
  if (run_time_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::runTimeData>(GetArenaForAllocation());
    run_time_date_ = p;
  }
  return run_time_date_;
}
inline ::dra::runTimeData* FileOperationsFunction::mutable_run_time_date() {
  ::dra::runTimeData* _msg = _internal_mutable_run_time_date();
  // @@protoc_insertion_point(field_mutable:dra.FileOperationsFunction.run_time_date)
  return _msg;
}
inline void FileOperationsFunction::set_allocated_run_time_date(::dra::runTimeData* run_time_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date_);
  }
  if (run_time_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_date));
    if (message_arena != submessage_arena) {
      run_time_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_time_date, submessage_arena);
    }
    
  } else {
    
  }
  run_time_date_ = run_time_date;
  // @@protoc_insertion_point(field_set_allocated:dra.FileOperationsFunction.run_time_date)
}

// map<uint32, uint32> write_address = 11;
inline int FileOperationsFunction::_internal_write_address_size() const {
  return write_address_.size();
}
inline int FileOperationsFunction::write_address_size() const {
  return _internal_write_address_size();
}
inline void FileOperationsFunction::clear_write_address() {
  write_address_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
FileOperationsFunction::_internal_write_address() const {
  return write_address_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
FileOperationsFunction::write_address() const {
  // @@protoc_insertion_point(field_map:dra.FileOperationsFunction.write_address)
  return _internal_write_address();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
FileOperationsFunction::_internal_mutable_write_address() {
  return write_address_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
FileOperationsFunction::mutable_write_address() {
  // @@protoc_insertion_point(field_mutable_map:dra.FileOperationsFunction.write_address)
  return _internal_mutable_write_address();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileOperations

// string name = 1;
inline void FileOperations::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileOperations::name() const {
  // @@protoc_insertion_point(field_get:dra.FileOperations.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileOperations::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.FileOperations.name)
}
inline std::string* FileOperations::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dra.FileOperations.name)
  return _s;
}
inline const std::string& FileOperations::_internal_name() const {
  return name_.Get();
}
inline void FileOperations::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileOperations::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileOperations::release_name() {
  // @@protoc_insertion_point(field_release:dra.FileOperations.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileOperations::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.FileOperations.name)
}

// map<int64, .dra.FileOperationsFunction> file_operations_function = 3;
inline int FileOperations::_internal_file_operations_function_size() const {
  return file_operations_function_.size();
}
inline int FileOperations::file_operations_function_size() const {
  return _internal_file_operations_function_size();
}
inline void FileOperations::clear_file_operations_function() {
  file_operations_function_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >&
FileOperations::_internal_file_operations_function() const {
  return file_operations_function_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >&
FileOperations::file_operations_function() const {
  // @@protoc_insertion_point(field_map:dra.FileOperations.file_operations_function)
  return _internal_file_operations_function();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >*
FileOperations::_internal_mutable_file_operations_function() {
  return file_operations_function_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::dra::FileOperationsFunction >*
FileOperations::mutable_file_operations_function() {
  // @@protoc_insertion_point(field_mutable_map:dra.FileOperations.file_operations_function)
  return _internal_mutable_file_operations_function();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// address

// string name = 1;
inline void address::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& address::name() const {
  // @@protoc_insertion_point(field_get:dra.address.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void address::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dra.address.name)
}
inline std::string* address::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dra.address.name)
  return _s;
}
inline const std::string& address::_internal_name() const {
  return name_.Get();
}
inline void address::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* address::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* address::release_name() {
  // @@protoc_insertion_point(field_release:dra.address.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void address::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dra.address.name)
}

// map<string, string> addr = 2;
inline int address::_internal_addr_size() const {
  return addr_.size();
}
inline int address::addr_size() const {
  return _internal_addr_size();
}
inline void address::clear_addr() {
  addr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
address::_internal_addr() const {
  return addr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
address::addr() const {
  // @@protoc_insertion_point(field_map:dra.address.addr)
  return _internal_addr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
address::_internal_mutable_addr() {
  return addr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
address::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_map:dra.address.addr)
  return _internal_mutable_addr();
}

// -------------------------------------------------------------------

// Condition

// uint64 condition_address = 1;
inline void Condition::clear_condition_address() {
  condition_address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::_internal_condition_address() const {
  return condition_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::condition_address() const {
  // @@protoc_insertion_point(field_get:dra.Condition.condition_address)
  return _internal_condition_address();
}
inline void Condition::_internal_set_condition_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  condition_address_ = value;
}
inline void Condition::set_condition_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_condition_address(value);
  // @@protoc_insertion_point(field_set:dra.Condition.condition_address)
}

// uint32 syzkaller_condition_address = 2;
inline void Condition::clear_syzkaller_condition_address() {
  syzkaller_condition_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_syzkaller_condition_address() const {
  return syzkaller_condition_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::syzkaller_condition_address() const {
  // @@protoc_insertion_point(field_get:dra.Condition.syzkaller_condition_address)
  return _internal_syzkaller_condition_address();
}
inline void Condition::_internal_set_syzkaller_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  syzkaller_condition_address_ = value;
}
inline void Condition::set_syzkaller_condition_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_syzkaller_condition_address(value);
  // @@protoc_insertion_point(field_set:dra.Condition.syzkaller_condition_address)
}

// uint64 uncovered_address = 3;
inline void Condition::clear_uncovered_address() {
  uncovered_address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::_internal_uncovered_address() const {
  return uncovered_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::uncovered_address() const {
  // @@protoc_insertion_point(field_get:dra.Condition.uncovered_address)
  return _internal_uncovered_address();
}
inline void Condition::_internal_set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uncovered_address_ = value;
}
inline void Condition::set_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uncovered_address(value);
  // @@protoc_insertion_point(field_set:dra.Condition.uncovered_address)
}

// uint32 syzkaller_uncovered_address = 4;
inline void Condition::clear_syzkaller_uncovered_address() {
  syzkaller_uncovered_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_syzkaller_uncovered_address() const {
  return syzkaller_uncovered_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::syzkaller_uncovered_address() const {
  // @@protoc_insertion_point(field_get:dra.Condition.syzkaller_uncovered_address)
  return _internal_syzkaller_uncovered_address();
}
inline void Condition::_internal_set_syzkaller_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  syzkaller_uncovered_address_ = value;
}
inline void Condition::set_syzkaller_uncovered_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_syzkaller_uncovered_address(value);
  // @@protoc_insertion_point(field_set:dra.Condition.syzkaller_uncovered_address)
}

// uint32 idx = 5;
inline void Condition::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::idx() const {
  // @@protoc_insertion_point(field_get:dra.Condition.idx)
  return _internal_idx();
}
inline void Condition::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void Condition::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:dra.Condition.idx)
}

// uint64 successor = 6;
inline void Condition::clear_successor() {
  successor_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::_internal_successor() const {
  return successor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::successor() const {
  // @@protoc_insertion_point(field_get:dra.Condition.successor)
  return _internal_successor();
}
inline void Condition::_internal_set_successor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  successor_ = value;
}
inline void Condition::set_successor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_successor(value);
  // @@protoc_insertion_point(field_set:dra.Condition.successor)
}

// repeated uint64 right_branch_address = 7;
inline int Condition::_internal_right_branch_address_size() const {
  return right_branch_address_.size();
}
inline int Condition::right_branch_address_size() const {
  return _internal_right_branch_address_size();
}
inline void Condition::clear_right_branch_address() {
  right_branch_address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::_internal_right_branch_address(int index) const {
  return right_branch_address_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Condition::right_branch_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.Condition.right_branch_address)
  return _internal_right_branch_address(index);
}
inline void Condition::set_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  right_branch_address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.Condition.right_branch_address)
}
inline void Condition::_internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  right_branch_address_.Add(value);
}
inline void Condition::add_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_right_branch_address(value);
  // @@protoc_insertion_point(field_add:dra.Condition.right_branch_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Condition::_internal_right_branch_address() const {
  return right_branch_address_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Condition::right_branch_address() const {
  // @@protoc_insertion_point(field_list:dra.Condition.right_branch_address)
  return _internal_right_branch_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Condition::_internal_mutable_right_branch_address() {
  return &right_branch_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Condition::mutable_right_branch_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.Condition.right_branch_address)
  return _internal_mutable_right_branch_address();
}

// repeated uint32 syzkaller_right_branch_address = 8;
inline int Condition::_internal_syzkaller_right_branch_address_size() const {
  return syzkaller_right_branch_address_.size();
}
inline int Condition::syzkaller_right_branch_address_size() const {
  return _internal_syzkaller_right_branch_address_size();
}
inline void Condition::clear_syzkaller_right_branch_address() {
  syzkaller_right_branch_address_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_syzkaller_right_branch_address(int index) const {
  return syzkaller_right_branch_address_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::syzkaller_right_branch_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.Condition.syzkaller_right_branch_address)
  return _internal_syzkaller_right_branch_address(index);
}
inline void Condition::set_syzkaller_right_branch_address(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  syzkaller_right_branch_address_.Set(index, value);
  // @@protoc_insertion_point(field_set:dra.Condition.syzkaller_right_branch_address)
}
inline void Condition::_internal_add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  syzkaller_right_branch_address_.Add(value);
}
inline void Condition::add_syzkaller_right_branch_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_syzkaller_right_branch_address(value);
  // @@protoc_insertion_point(field_add:dra.Condition.syzkaller_right_branch_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Condition::_internal_syzkaller_right_branch_address() const {
  return syzkaller_right_branch_address_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Condition::syzkaller_right_branch_address() const {
  // @@protoc_insertion_point(field_list:dra.Condition.syzkaller_right_branch_address)
  return _internal_syzkaller_right_branch_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Condition::_internal_mutable_syzkaller_right_branch_address() {
  return &syzkaller_right_branch_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Condition::mutable_syzkaller_right_branch_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.Condition.syzkaller_right_branch_address)
  return _internal_mutable_syzkaller_right_branch_address();
}

// -------------------------------------------------------------------

// Conditions

// repeated .dra.Condition condition = 10;
inline int Conditions::_internal_condition_size() const {
  return condition_.size();
}
inline int Conditions::condition_size() const {
  return _internal_condition_size();
}
inline void Conditions::clear_condition() {
  condition_.Clear();
}
inline ::dra::Condition* Conditions::mutable_condition(int index) {
  // @@protoc_insertion_point(field_mutable:dra.Conditions.condition)
  return condition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Condition >*
Conditions::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:dra.Conditions.condition)
  return &condition_;
}
inline const ::dra::Condition& Conditions::_internal_condition(int index) const {
  return condition_.Get(index);
}
inline const ::dra::Condition& Conditions::condition(int index) const {
  // @@protoc_insertion_point(field_get:dra.Conditions.condition)
  return _internal_condition(index);
}
inline ::dra::Condition* Conditions::_internal_add_condition() {
  return condition_.Add();
}
inline ::dra::Condition* Conditions::add_condition() {
  ::dra::Condition* _add = _internal_add_condition();
  // @@protoc_insertion_point(field_add:dra.Conditions.condition)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::Condition >&
Conditions::condition() const {
  // @@protoc_insertion_point(field_list:dra.Conditions.condition)
  return condition_;
}

// -------------------------------------------------------------------

// WriteAddresses

// .dra.Condition condition = 1;
inline bool WriteAddresses::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool WriteAddresses::has_condition() const {
  return _internal_has_condition();
}
inline void WriteAddresses::clear_condition() {
  if (GetArenaForAllocation() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::dra::Condition& WriteAddresses::_internal_condition() const {
  const ::dra::Condition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::dra::Condition&>(
      ::dra::_Condition_default_instance_);
}
inline const ::dra::Condition& WriteAddresses::condition() const {
  // @@protoc_insertion_point(field_get:dra.WriteAddresses.condition)
  return _internal_condition();
}
inline void WriteAddresses::unsafe_arena_set_allocated_condition(
    ::dra::Condition* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dra.WriteAddresses.condition)
}
inline ::dra::Condition* WriteAddresses::release_condition() {
  
  ::dra::Condition* temp = condition_;
  condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dra::Condition* WriteAddresses::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:dra.WriteAddresses.condition)
  
  ::dra::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::dra::Condition* WriteAddresses::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::dra::Condition>(GetArenaForAllocation());
    condition_ = p;
  }
  return condition_;
}
inline ::dra::Condition* WriteAddresses::mutable_condition() {
  ::dra::Condition* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:dra.WriteAddresses.condition)
  return _msg;
}
inline void WriteAddresses::set_allocated_condition(::dra::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dra::Condition>::GetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:dra.WriteAddresses.condition)
}

// repeated .dra.WriteAddress write_address = 4;
inline int WriteAddresses::_internal_write_address_size() const {
  return write_address_.size();
}
inline int WriteAddresses::write_address_size() const {
  return _internal_write_address_size();
}
inline void WriteAddresses::clear_write_address() {
  write_address_.Clear();
}
inline ::dra::WriteAddress* WriteAddresses::mutable_write_address(int index) {
  // @@protoc_insertion_point(field_mutable:dra.WriteAddresses.write_address)
  return write_address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >*
WriteAddresses::mutable_write_address() {
  // @@protoc_insertion_point(field_mutable_list:dra.WriteAddresses.write_address)
  return &write_address_;
}
inline const ::dra::WriteAddress& WriteAddresses::_internal_write_address(int index) const {
  return write_address_.Get(index);
}
inline const ::dra::WriteAddress& WriteAddresses::write_address(int index) const {
  // @@protoc_insertion_point(field_get:dra.WriteAddresses.write_address)
  return _internal_write_address(index);
}
inline ::dra::WriteAddress* WriteAddresses::_internal_add_write_address() {
  return write_address_.Add();
}
inline ::dra::WriteAddress* WriteAddresses::add_write_address() {
  ::dra::WriteAddress* _add = _internal_add_write_address();
  // @@protoc_insertion_point(field_add:dra.WriteAddresses.write_address)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dra::WriteAddress >&
WriteAddresses::write_address() const {
  // @@protoc_insertion_point(field_list:dra.WriteAddresses.write_address)
  return write_address_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dra

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dra::UncoveredAddressKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dra::UncoveredAddressKind>() {
  return ::dra::UncoveredAddressKind_descriptor();
}
template <> struct is_proto_enum< ::dra::file_operations_kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dra::file_operations_kind>() {
  return ::dra::file_operations_kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Dependency_2eproto
