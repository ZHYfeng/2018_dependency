// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#include "Task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Task_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_CoveredAddressEntry_DoNotUse_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_UncoveredAddressEntry_DoNotUse_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TaskRunTimeData_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskRunTimeData_CoveredAddressEntry_DoNotUse_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tasks_TaskMapEntry_DoNotUse_Task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_runTimeData_Task_2eproto;
namespace dra {
class runTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<runTimeData> _instance;
} _runTimeData_default_instance_;
class TaskRunTimeData_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskRunTimeData_UncoveredAddressEntry_DoNotUse> _instance;
} _TaskRunTimeData_UncoveredAddressEntry_DoNotUse_default_instance_;
class TaskRunTimeData_CoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskRunTimeData_CoveredAddressEntry_DoNotUse> _instance;
} _TaskRunTimeData_CoveredAddressEntry_DoNotUse_default_instance_;
class TaskRunTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskRunTimeData> _instance;
} _TaskRunTimeData_default_instance_;
class Task_UncoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task_UncoveredAddressEntry_DoNotUse> _instance;
} _Task_UncoveredAddressEntry_DoNotUse_default_instance_;
class Task_CoveredAddressEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task_CoveredAddressEntry_DoNotUse> _instance;
} _Task_CoveredAddressEntry_DoNotUse_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class Tasks_TaskMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tasks_TaskMapEntry_DoNotUse> _instance;
} _Tasks_TaskMapEntry_DoNotUse_default_instance_;
class TasksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tasks> _instance;
} _Tasks_default_instance_;
}  // namespace dra
static void InitDefaultsscc_info_Task_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Task_default_instance_;
    new (ptr) ::dra::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Task_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Task_Task_2eproto}, {
      &scc_info_Task_UncoveredAddressEntry_DoNotUse_Task_2eproto.base,
      &scc_info_Task_CoveredAddressEntry_DoNotUse_Task_2eproto.base,
      &scc_info_TaskRunTimeData_Task_2eproto.base,}};

static void InitDefaultsscc_info_Task_CoveredAddressEntry_DoNotUse_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Task_CoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Task_CoveredAddressEntry_DoNotUse();
  }
  ::dra::Task_CoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_CoveredAddressEntry_DoNotUse_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Task_CoveredAddressEntry_DoNotUse_Task_2eproto}, {
      &scc_info_runTimeData_Task_2eproto.base,}};

static void InitDefaultsscc_info_Task_UncoveredAddressEntry_DoNotUse_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Task_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Task_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::Task_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_UncoveredAddressEntry_DoNotUse_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Task_UncoveredAddressEntry_DoNotUse_Task_2eproto}, {
      &scc_info_runTimeData_Task_2eproto.base,}};

static void InitDefaultsscc_info_TaskRunTimeData_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_TaskRunTimeData_default_instance_;
    new (ptr) ::dra::TaskRunTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::TaskRunTimeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TaskRunTimeData_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TaskRunTimeData_Task_2eproto}, {
      &scc_info_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_Task_2eproto.base,
      &scc_info_TaskRunTimeData_CoveredAddressEntry_DoNotUse_Task_2eproto.base,}};

static void InitDefaultsscc_info_TaskRunTimeData_CoveredAddressEntry_DoNotUse_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_TaskRunTimeData_CoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse();
  }
  ::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskRunTimeData_CoveredAddressEntry_DoNotUse_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskRunTimeData_CoveredAddressEntry_DoNotUse_Task_2eproto}, {
      &scc_info_runTimeData_Task_2eproto.base,}};

static void InitDefaultsscc_info_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse();
  }
  ::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_Task_2eproto}, {
      &scc_info_runTimeData_Task_2eproto.base,}};

static void InitDefaultsscc_info_Tasks_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Tasks_default_instance_;
    new (ptr) ::dra::Tasks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::Tasks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tasks_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Tasks_Task_2eproto}, {
      &scc_info_Tasks_TaskMapEntry_DoNotUse_Task_2eproto.base,
      &scc_info_Task_Task_2eproto.base,}};

static void InitDefaultsscc_info_Tasks_TaskMapEntry_DoNotUse_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_Tasks_TaskMapEntry_DoNotUse_default_instance_;
    new (ptr) ::dra::Tasks_TaskMapEntry_DoNotUse();
  }
  ::dra::Tasks_TaskMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tasks_TaskMapEntry_DoNotUse_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tasks_TaskMapEntry_DoNotUse_Task_2eproto}, {
      &scc_info_Task_Task_2eproto.base,}};

static void InitDefaultsscc_info_runTimeData_Task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dra::_runTimeData_default_instance_;
    new (ptr) ::dra::runTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dra::runTimeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_runTimeData_Task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_runTimeData_Task_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Task_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Task_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Task_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, priority_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, write_address_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, condition_address_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, address_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, right_branch_address_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, task_status_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, program_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, idx_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, recursive_count_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkwrite_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkcondition_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkaddress_),
  PROTOBUF_FIELD_OFFSET(::dra::runTimeData, checkrightbranchaddress_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, hash_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, program_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, write_idx_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, condition_idx_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, check_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::TaskRunTimeData, covered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_UncoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Task_CoveredAddressEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Task, sig_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, index_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, program_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, priority_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, hash_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, count_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_sig_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_index_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, write_program_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, task_status_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, check_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, uncovered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, covered_address_),
  PROTOBUF_FIELD_OFFSET(::dra::Task, task_run_time_data_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks_TaskMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, name_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, kind_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, task_map_),
  PROTOBUF_FIELD_OFFSET(::dra::Tasks, task_array_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dra::runTimeData)},
  { 18, 25, sizeof(::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse)},
  { 27, 34, sizeof(::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse)},
  { 36, -1, sizeof(::dra::TaskRunTimeData)},
  { 48, 55, sizeof(::dra::Task_UncoveredAddressEntry_DoNotUse)},
  { 57, 64, sizeof(::dra::Task_CoveredAddressEntry_DoNotUse)},
  { 66, -1, sizeof(::dra::Task)},
  { 86, 93, sizeof(::dra::Tasks_TaskMapEntry_DoNotUse)},
  { 95, -1, sizeof(::dra::Tasks)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_runTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_TaskRunTimeData_CoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_TaskRunTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Task_UncoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Task_CoveredAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Tasks_TaskMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dra::_Tasks_default_instance_),
};

const char descriptor_table_protodef_Task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nTask.proto\022\003dra\"\300\002\n\013runTimeData\022\020\n\010pri"
  "ority\030\001 \001(\r\022\025\n\rwrite_address\030\002 \001(\r\022\031\n\021co"
  "ndition_address\030\003 \001(\r\022\017\n\007address\030\004 \001(\r\022\034"
  "\n\024right_branch_address\030\006 \003(\r\022$\n\013task_sta"
  "tus\030\n \001(\0162\017.dra.taskStatus\022\017\n\007program\030\014 "
  "\001(\014\022\013\n\003idx\030\r \001(\r\022\027\n\017recursive_count\030\016 \001("
  "\r\022\022\n\ncheckWrite\030\024 \001(\010\022\026\n\016checkCondition\030"
  "\025 \001(\010\022\024\n\014checkAddress\030\026 \001(\010\022\037\n\027checkRigh"
  "tBranchAddress\030\027 \003(\010\"\207\003\n\017TaskRunTimeData"
  "\022\014\n\004hash\030\001 \001(\t\022\017\n\007program\030\002 \001(\014\022\021\n\twrite"
  "_idx\030\005 \001(\r\022\025\n\rcondition_idx\030\006 \001(\r\022\r\n\005che"
  "ck\030\n \001(\010\022E\n\021uncovered_address\030\025 \003(\0132*.dr"
  "a.TaskRunTimeData.UncoveredAddressEntry\022"
  "A\n\017covered_address\030\027 \003(\0132(.dra.TaskRunTi"
  "meData.CoveredAddressEntry\032I\n\025UncoveredA"
  "ddressEntry\022\013\n\003key\030\001 \001(\r\022\037\n\005value\030\002 \001(\0132"
  "\020.dra.runTimeData:\0028\001\032G\n\023CoveredAddressE"
  "ntry\022\013\n\003key\030\001 \001(\r\022\037\n\005value\030\002 \001(\0132\020.dra.r"
  "unTimeData:\0028\001\"\236\004\n\004Task\022\013\n\003sig\030\001 \001(\t\022\r\n\005"
  "index\030\002 \001(\r\022\017\n\007program\030\003 \001(\014\022\014\n\004kind\030\004 \001"
  "(\r\022\020\n\010priority\030\005 \001(\005\022\014\n\004hash\030\006 \001(\t\022\r\n\005co"
  "unt\030\007 \001(\r\022\021\n\twrite_sig\030\013 \001(\t\022\023\n\013write_in"
  "dex\030\014 \001(\r\022\025\n\rwrite_program\030\r \001(\014\022$\n\013task"
  "_status\030\030 \001(\0162\017.dra.taskStatus\022\r\n\005check\030"
  "\031 \001(\010\022:\n\021uncovered_address\030\025 \003(\0132\037.dra.T"
  "ask.UncoveredAddressEntry\0226\n\017covered_add"
  "ress\030\027 \003(\0132\035.dra.Task.CoveredAddressEntr"
  "y\0220\n\022task_run_time_data\030\037 \003(\0132\024.dra.Task"
  "RunTimeData\032I\n\025UncoveredAddressEntry\022\013\n\003"
  "key\030\001 \001(\r\022\037\n\005value\030\002 \001(\0132\020.dra.runTimeDa"
  "ta:\0028\001\032G\n\023CoveredAddressEntry\022\013\n\003key\030\001 \001"
  "(\r\022\037\n\005value\030\002 \001(\0132\020.dra.runTimeData:\0028\001\""
  "\267\001\n\005Tasks\022\014\n\004name\030) \001(\t\022\033\n\004kind\030* \001(\0162\r."
  "dra.TaskKind\022)\n\010task_map\030\001 \003(\0132\027.dra.Tas"
  "ks.TaskMapEntry\022\035\n\ntask_array\030\002 \003(\0132\t.dr"
  "a.Task\0329\n\014TaskMapEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005v"
  "alue\030\002 \001(\0132\t.dra.Task:\0028\001*\217\003\n\ntaskStatus"
  "\022\014\n\010untested\020\000\022\013\n\007testing\020\001\022\033\n\016not_find_"
  "input\020\373\377\377\377\377\377\377\377\377\001\022#\n\026not_find_write_addre"
  "ss\020\374\377\377\377\377\377\377\377\377\001\022!\n\024not_find_write_input\020\375\377"
  "\377\377\377\377\377\377\377\001\022\022\n\016unstable_write\020\013\022\020\n\014stable_w"
  "rite\020\014\022\026\n\022unstable_condition\020\r\022\024\n\020stable"
  "_condition\020\016\022\031\n\025unstable_insert_write\020\017\022"
  "\027\n\023stable_insert_write\020\020\022\035\n\031unstable_ins"
  "ert_condition\020\021\022\033\n\027stable_insert_conditi"
  "on\020\022\022\014\n\010unstable\020\023\022\n\n\006tested\020\025\022\013\n\007covere"
  "d\020\026\022\r\n\trecursive\020\037\022\007\n\003out\020 *5\n\010TaskKind\022"
  "\010\n\004Boot\020\000\022\010\n\004High\020\001\022\t\n\005Ckeck\020\003\022\n\n\006Normal"
  "\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Task_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Task_2eproto_sccs[9] = {
  &scc_info_Task_Task_2eproto.base,
  &scc_info_Task_CoveredAddressEntry_DoNotUse_Task_2eproto.base,
  &scc_info_Task_UncoveredAddressEntry_DoNotUse_Task_2eproto.base,
  &scc_info_TaskRunTimeData_Task_2eproto.base,
  &scc_info_TaskRunTimeData_CoveredAddressEntry_DoNotUse_Task_2eproto.base,
  &scc_info_TaskRunTimeData_UncoveredAddressEntry_DoNotUse_Task_2eproto.base,
  &scc_info_Tasks_Task_2eproto.base,
  &scc_info_Tasks_TaskMapEntry_DoNotUse_Task_2eproto.base,
  &scc_info_runTimeData_Task_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Task_2eproto_once;
static bool descriptor_table_Task_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Task_2eproto = {
  &descriptor_table_Task_2eproto_initialized, descriptor_table_protodef_Task_2eproto, "Task.proto", 1930,
  &descriptor_table_Task_2eproto_once, descriptor_table_Task_2eproto_sccs, descriptor_table_Task_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_Task_2eproto::offsets,
  file_level_metadata_Task_2eproto, 9, file_level_enum_descriptors_Task_2eproto, file_level_service_descriptors_Task_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Task_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Task_2eproto), true);
namespace dra {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* taskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Task_2eproto);
  return file_level_enum_descriptors_Task_2eproto[0];
}
bool taskStatus_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Task_2eproto);
  return file_level_enum_descriptors_Task_2eproto[1];
}
bool TaskKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void runTimeData::InitAsDefaultInstance() {
}
class runTimeData::_Internal {
 public:
};

runTimeData::runTimeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.runTimeData)
}
runTimeData::runTimeData(const runTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      right_branch_address_(from.right_branch_address_),
      checkrightbranchaddress_(from.checkrightbranchaddress_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkaddress_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(checkaddress_));
  // @@protoc_insertion_point(copy_constructor:dra.runTimeData)
}

void runTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_runTimeData_Task_2eproto.base);
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkaddress_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(checkaddress_));
}

runTimeData::~runTimeData() {
  // @@protoc_insertion_point(destructor:dra.runTimeData)
  SharedDtor();
}

void runTimeData::SharedDtor() {
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void runTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const runTimeData& runTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_runTimeData_Task_2eproto.base);
  return *internal_default_instance();
}


void runTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.runTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  right_branch_address_.Clear();
  checkrightbranchaddress_.Clear();
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkaddress_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(checkaddress_));
  _internal_metadata_.Clear();
}

const char* runTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          write_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 condition_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          condition_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 right_branch_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_right_branch_address(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_right_branch_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.taskStatus task_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::dra::taskStatus>(val));
        } else goto handle_unusual;
        continue;
      // bytes program = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 recursive_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          recursive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool checkWrite = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          checkwrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool checkCondition = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          checkcondition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool checkAddress = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          checkaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool checkRightBranchAddress = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_checkrightbranchaddress(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_checkrightbranchaddress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* runTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.runTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 priority = 1;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_write_address(), target);
  }

  // uint32 condition_address = 3;
  if (this->condition_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_condition_address(), target);
  }

  // uint32 address = 4;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_address(), target);
  }

  // repeated uint32 right_branch_address = 6;
  {
    int byte_size = _right_branch_address_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_right_branch_address(), byte_size, target);
    }
  }

  // .dra.taskStatus task_status = 10;
  if (this->task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_task_status(), target);
  }

  // bytes program = 12;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_program(), target);
  }

  // uint32 idx = 13;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_idx(), target);
  }

  // uint32 recursive_count = 14;
  if (this->recursive_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_recursive_count(), target);
  }

  // bool checkWrite = 20;
  if (this->checkwrite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_checkwrite(), target);
  }

  // bool checkCondition = 21;
  if (this->checkcondition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_checkcondition(), target);
  }

  // bool checkAddress = 22;
  if (this->checkaddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_checkaddress(), target);
  }

  // repeated bool checkRightBranchAddress = 23;
  if (this->_internal_checkrightbranchaddress_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_checkrightbranchaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.runTimeData)
  return target;
}

size_t runTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.runTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 right_branch_address = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->right_branch_address_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_branch_address_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool checkRightBranchAddress = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_checkrightbranchaddress_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _checkrightbranchaddress_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes program = 12;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // uint32 priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // uint32 write_address = 2;
  if (this->write_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_address());
  }

  // uint32 condition_address = 3;
  if (this->condition_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_address());
  }

  // uint32 address = 4;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  // .dra.taskStatus task_status = 10;
  if (this->task_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  // uint32 idx = 13;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 recursive_count = 14;
  if (this->recursive_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recursive_count());
  }

  // bool checkWrite = 20;
  if (this->checkwrite() != 0) {
    total_size += 2 + 1;
  }

  // bool checkCondition = 21;
  if (this->checkcondition() != 0) {
    total_size += 2 + 1;
  }

  // bool checkAddress = 22;
  if (this->checkaddress() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void runTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.runTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const runTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<runTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.runTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.runTimeData)
    MergeFrom(*source);
  }
}

void runTimeData::MergeFrom(const runTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.runTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  right_branch_address_.MergeFrom(from.right_branch_address_);
  checkrightbranchaddress_.MergeFrom(from.checkrightbranchaddress_);
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.write_address() != 0) {
    _internal_set_write_address(from._internal_write_address());
  }
  if (from.condition_address() != 0) {
    _internal_set_condition_address(from._internal_condition_address());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.recursive_count() != 0) {
    _internal_set_recursive_count(from._internal_recursive_count());
  }
  if (from.checkwrite() != 0) {
    _internal_set_checkwrite(from._internal_checkwrite());
  }
  if (from.checkcondition() != 0) {
    _internal_set_checkcondition(from._internal_checkcondition());
  }
  if (from.checkaddress() != 0) {
    _internal_set_checkaddress(from._internal_checkaddress());
  }
}

void runTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.runTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void runTimeData::CopyFrom(const runTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.runTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool runTimeData::IsInitialized() const {
  return true;
}

void runTimeData::InternalSwap(runTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  right_branch_address_.InternalSwap(&other->right_branch_address_);
  checkrightbranchaddress_.InternalSwap(&other->checkrightbranchaddress_);
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(priority_, other->priority_);
  swap(write_address_, other->write_address_);
  swap(condition_address_, other->condition_address_);
  swap(address_, other->address_);
  swap(task_status_, other->task_status_);
  swap(idx_, other->idx_);
  swap(recursive_count_, other->recursive_count_);
  swap(checkwrite_, other->checkwrite_);
  swap(checkcondition_, other->checkcondition_);
  swap(checkaddress_, other->checkaddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata runTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TaskRunTimeData_UncoveredAddressEntry_DoNotUse::TaskRunTimeData_UncoveredAddressEntry_DoNotUse() {}
TaskRunTimeData_UncoveredAddressEntry_DoNotUse::TaskRunTimeData_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskRunTimeData_UncoveredAddressEntry_DoNotUse::MergeFrom(const TaskRunTimeData_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskRunTimeData_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TaskRunTimeData_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TaskRunTimeData_CoveredAddressEntry_DoNotUse::TaskRunTimeData_CoveredAddressEntry_DoNotUse() {}
TaskRunTimeData_CoveredAddressEntry_DoNotUse::TaskRunTimeData_CoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskRunTimeData_CoveredAddressEntry_DoNotUse::MergeFrom(const TaskRunTimeData_CoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskRunTimeData_CoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TaskRunTimeData_CoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TaskRunTimeData::InitAsDefaultInstance() {
}
class TaskRunTimeData::_Internal {
 public:
};

TaskRunTimeData::TaskRunTimeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.TaskRunTimeData)
}
TaskRunTimeData::TaskRunTimeData(const TaskRunTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  covered_address_.MergeFrom(from.covered_address_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  ::memcpy(&write_idx_, &from.write_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&write_idx_)) + sizeof(check_));
  // @@protoc_insertion_point(copy_constructor:dra.TaskRunTimeData)
}

void TaskRunTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskRunTimeData_Task_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&write_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_) -
      reinterpret_cast<char*>(&write_idx_)) + sizeof(check_));
}

TaskRunTimeData::~TaskRunTimeData() {
  // @@protoc_insertion_point(destructor:dra.TaskRunTimeData)
  SharedDtor();
}

void TaskRunTimeData::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskRunTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskRunTimeData& TaskRunTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskRunTimeData_Task_2eproto.base);
  return *internal_default_instance();
}


void TaskRunTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.TaskRunTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncovered_address_.Clear();
  covered_address_.Clear();
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&write_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_) -
      reinterpret_cast<char*>(&write_idx_)) + sizeof(check_));
  _internal_metadata_.Clear();
}

const char* TaskRunTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.TaskRunTimeData.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes program = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          write_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 condition_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          condition_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.runTimeData> uncovered_address = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.runTimeData> covered_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&covered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskRunTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.TaskRunTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.TaskRunTimeData.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // bytes program = 2;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_program(), target);
  }

  // uint32 write_idx = 5;
  if (this->write_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_write_idx(), target);
  }

  // uint32 condition_idx = 6;
  if (this->condition_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_condition_idx(), target);
  }

  // bool check = 10;
  if (this->check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_check(), target);
  }

  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskRunTimeData_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = TaskRunTimeData_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .dra.runTimeData> covered_address = 23;
  if (!this->_internal_covered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_covered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_covered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskRunTimeData_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it) {
        target = TaskRunTimeData_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.TaskRunTimeData)
  return target;
}

size_t TaskRunTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.TaskRunTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += TaskRunTimeData_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.runTimeData> covered_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_covered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
      it = this->_internal_covered_address().begin();
      it != this->_internal_covered_address().end(); ++it) {
    total_size += TaskRunTimeData_CoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // bytes program = 2;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // uint32 write_idx = 5;
  if (this->write_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_idx());
  }

  // uint32 condition_idx = 6;
  if (this->condition_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_idx());
  }

  // bool check = 10;
  if (this->check() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskRunTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.TaskRunTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRunTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskRunTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.TaskRunTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.TaskRunTimeData)
    MergeFrom(*source);
  }
}

void TaskRunTimeData::MergeFrom(const TaskRunTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.TaskRunTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uncovered_address_.MergeFrom(from.uncovered_address_);
  covered_address_.MergeFrom(from.covered_address_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.write_idx() != 0) {
    _internal_set_write_idx(from._internal_write_idx());
  }
  if (from.condition_idx() != 0) {
    _internal_set_condition_idx(from._internal_condition_idx());
  }
  if (from.check() != 0) {
    _internal_set_check(from._internal_check());
  }
}

void TaskRunTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.TaskRunTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRunTimeData::CopyFrom(const TaskRunTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.TaskRunTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRunTimeData::IsInitialized() const {
  return true;
}

void TaskRunTimeData::InternalSwap(TaskRunTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uncovered_address_.Swap(&other->uncovered_address_);
  covered_address_.Swap(&other->covered_address_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(write_idx_, other->write_idx_);
  swap(condition_idx_, other->condition_idx_);
  swap(check_, other->check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskRunTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Task_UncoveredAddressEntry_DoNotUse::Task_UncoveredAddressEntry_DoNotUse() {}
Task_UncoveredAddressEntry_DoNotUse::Task_UncoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Task_UncoveredAddressEntry_DoNotUse::MergeFrom(const Task_UncoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Task_UncoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Task_UncoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Task_CoveredAddressEntry_DoNotUse::Task_CoveredAddressEntry_DoNotUse() {}
Task_CoveredAddressEntry_DoNotUse::Task_CoveredAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Task_CoveredAddressEntry_DoNotUse::MergeFrom(const Task_CoveredAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Task_CoveredAddressEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Task_CoveredAddressEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Task::InitAsDefaultInstance() {
}
class Task::_Internal {
 public:
};

Task::Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      task_run_time_data_(from.task_run_time_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uncovered_address_.MergeFrom(from.uncovered_address_);
  covered_address_.MergeFrom(from.covered_address_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  write_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_sig().empty()) {
    write_sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_sig_);
  }
  write_program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_program().empty()) {
    write_program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_program_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_status_) -
    reinterpret_cast<char*>(&index_)) + sizeof(task_status_));
  // @@protoc_insertion_point(copy_constructor:dra.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_Task_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_status_) -
      reinterpret_cast<char*>(&index_)) + sizeof(task_status_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:dra.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_Task_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncovered_address_.Clear();
  covered_address_.Clear();
  task_run_time_data_.Clear();
  sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_status_) -
      reinterpret_cast<char*>(&index_)) + sizeof(task_status_));
  _internal_metadata_.Clear();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Task.sig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes program = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Task.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string write_sig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_write_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Task.write_sig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          write_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes write_program = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_write_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.runTimeData> uncovered_address = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&uncovered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .dra.runTimeData> covered_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&covered_address_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // .dra.taskStatus task_status = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::dra::taskStatus>(val));
        } else goto handle_unusual;
        continue;
      // bool check = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dra.TaskRunTimeData task_run_time_data = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_task_run_time_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sig = 1;
  if (this->sig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Task.sig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sig(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bytes program = 3;
  if (this->program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_program(), target);
  }

  // uint32 kind = 4;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kind(), target);
  }

  // int32 priority = 5;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_priority(), target);
  }

  // string hash = 6;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Task.hash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hash(), target);
  }

  // uint32 count = 7;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_count(), target);
  }

  // string write_sig = 11;
  if (this->write_sig().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_sig().data(), static_cast<int>(this->_internal_write_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Task.write_sig");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_write_sig(), target);
  }

  // uint32 write_index = 12;
  if (this->write_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_write_index(), target);
  }

  // bytes write_program = 13;
  if (this->write_program().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_write_program(), target);
  }

  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  if (!this->_internal_uncovered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_uncovered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_uncovered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Task_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_uncovered_address().begin();
          it != this->_internal_uncovered_address().end(); ++it) {
        target = Task_UncoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .dra.runTimeData> covered_address = 23;
  if (!this->_internal_covered_address().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_covered_address().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_covered_address().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Task_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
          it = this->_internal_covered_address().begin();
          it != this->_internal_covered_address().end(); ++it) {
        target = Task_CoveredAddressEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // .dra.taskStatus task_status = 24;
  if (this->task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_task_status(), target);
  }

  // bool check = 25;
  if (this->check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_check(), target);
  }

  // repeated .dra.TaskRunTimeData task_run_time_data = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_run_time_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_task_run_time_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .dra.runTimeData> uncovered_address = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uncovered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
      it = this->_internal_uncovered_address().begin();
      it != this->_internal_uncovered_address().end(); ++it) {
    total_size += Task_UncoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .dra.runTimeData> covered_address = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_covered_address_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::dra::runTimeData >::const_iterator
      it = this->_internal_covered_address().begin();
      it != this->_internal_covered_address().end(); ++it) {
    total_size += Task_CoveredAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.TaskRunTimeData task_run_time_data = 31;
  total_size += 2UL * this->_internal_task_run_time_data_size();
  for (const auto& msg : this->task_run_time_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sig = 1;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // bytes program = 3;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_program());
  }

  // string hash = 6;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string write_sig = 11;
  if (this->write_sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_sig());
  }

  // bytes write_program = 13;
  if (this->write_program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_write_program());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());
  }

  // int32 priority = 5;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  // uint32 count = 7;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // bool check = 25;
  if (this->check() != 0) {
    total_size += 2 + 1;
  }

  // uint32 write_index = 12;
  if (this->write_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_index());
  }

  // .dra.taskStatus task_status = 24;
  if (this->task_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uncovered_address_.MergeFrom(from.uncovered_address_);
  covered_address_.MergeFrom(from.covered_address_);
  task_run_time_data_.MergeFrom(from.task_run_time_data_);
  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.program().size() > 0) {

    program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.write_sig().size() > 0) {

    write_sig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_sig_);
  }
  if (from.write_program().size() > 0) {

    write_program_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.write_program_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.check() != 0) {
    _internal_set_check(from._internal_check());
  }
  if (from.write_index() != 0) {
    _internal_set_write_index(from._internal_write_index());
  }
  if (from.task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uncovered_address_.Swap(&other->uncovered_address_);
  covered_address_.Swap(&other->covered_address_);
  task_run_time_data_.InternalSwap(&other->task_run_time_data_);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  write_sig_.Swap(&other->write_sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  write_program_.Swap(&other->write_program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(kind_, other->kind_);
  swap(priority_, other->priority_);
  swap(count_, other->count_);
  swap(check_, other->check_);
  swap(write_index_, other->write_index_);
  swap(task_status_, other->task_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Tasks_TaskMapEntry_DoNotUse::Tasks_TaskMapEntry_DoNotUse() {}
Tasks_TaskMapEntry_DoNotUse::Tasks_TaskMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Tasks_TaskMapEntry_DoNotUse::MergeFrom(const Tasks_TaskMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Tasks_TaskMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Tasks_TaskMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Tasks::InitAsDefaultInstance() {
}
class Tasks::_Internal {
 public:
};

Tasks::Tasks()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dra.Tasks)
}
Tasks::Tasks(const Tasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      task_array_(from.task_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_map_.MergeFrom(from.task_map_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:dra.Tasks)
}

void Tasks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tasks_Task_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
}

Tasks::~Tasks() {
  // @@protoc_insertion_point(destructor:dra.Tasks)
  SharedDtor();
}

void Tasks::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tasks& Tasks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tasks_Task_2eproto.base);
  return *internal_default_instance();
}


void Tasks::Clear() {
// @@protoc_insertion_point(message_clear_start:dra.Tasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_map_.Clear();
  task_array_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
  _internal_metadata_.Clear();
}

const char* Tasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dra.Task> task_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&task_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .dra.Task task_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_array(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dra.Tasks.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dra.TaskKind kind = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::dra::TaskKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dra.Tasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dra.Task> task_map = 1;
  if (!this->_internal_task_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dra.Tasks.TaskMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_task_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_task_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_iterator
          it = this->_internal_task_map().begin();
          it != this->_internal_task_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Tasks_TaskMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_iterator
          it = this->_internal_task_map().begin();
          it != this->_internal_task_map().end(); ++it) {
        target = Tasks_TaskMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .dra.Task task_array = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_array_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_task_array(i), target, stream);
  }

  // string name = 41;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dra.Tasks.name");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_name(), target);
  }

  // .dra.TaskKind kind = 42;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      42, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dra.Tasks)
  return target;
}

size_t Tasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dra.Tasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dra.Task> task_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_task_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dra::Task >::const_iterator
      it = this->_internal_task_map().begin();
      it != this->_internal_task_map().end(); ++it) {
    total_size += Tasks_TaskMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .dra.Task task_array = 2;
  total_size += 1UL * this->_internal_task_array_size();
  for (const auto& msg : this->task_array_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 41;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dra.TaskKind kind = 42;
  if (this->kind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tasks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dra.Tasks)
  GOOGLE_DCHECK_NE(&from, this);
  const Tasks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tasks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dra.Tasks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dra.Tasks)
    MergeFrom(*source);
  }
}

void Tasks::MergeFrom(const Tasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dra.Tasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_map_.MergeFrom(from.task_map_);
  task_array_.MergeFrom(from.task_array_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void Tasks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dra.Tasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tasks::CopyFrom(const Tasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dra.Tasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tasks::IsInitialized() const {
  return true;
}

void Tasks::InternalSwap(Tasks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_map_.Swap(&other->task_map_);
  task_array_.InternalSwap(&other->task_array_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tasks::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dra
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dra::runTimeData* Arena::CreateMaybeMessage< ::dra::runTimeData >(Arena* arena) {
  return Arena::CreateInternal< ::dra::runTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::TaskRunTimeData_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::TaskRunTimeData_CoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::TaskRunTimeData* Arena::CreateMaybeMessage< ::dra::TaskRunTimeData >(Arena* arena) {
  return Arena::CreateInternal< ::dra::TaskRunTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Task_UncoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Task_UncoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Task_UncoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Task_CoveredAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Task_CoveredAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Task_CoveredAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Task* Arena::CreateMaybeMessage< ::dra::Task >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Tasks_TaskMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::dra::Tasks_TaskMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Tasks_TaskMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dra::Tasks* Arena::CreateMaybeMessage< ::dra::Tasks >(Arena* arena) {
  return Arena::CreateInternal< ::dra::Tasks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
